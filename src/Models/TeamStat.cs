// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TeamStat : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The conference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conference { get; set; }
#nullable restore
#else
        public string Conference { get; set; }
#endif
        /// <summary>The season property</summary>
        public int? Season { get; set; }
        /// <summary>The statName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatName { get; set; }
#nullable restore
#else
        public string StatName { get; set; }
#endif
        /// <summary>The statValue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamStat.TeamStat_statValue? StatValue { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamStat.TeamStat_statValue StatValue { get; set; }
#endif
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team { get; set; }
#nullable restore
#else
        public string Team { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.TeamStat"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.TeamStat CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.TeamStat();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "conference", n => { Conference = n.GetStringValue(); } },
                { "season", n => { Season = n.GetIntValue(); } },
                { "statName", n => { StatName = n.GetStringValue(); } },
                { "statValue", n => { StatValue = n.GetObjectValue<global::CollegeFootballData.Models.TeamStat.TeamStat_statValue>(global::CollegeFootballData.Models.TeamStat.TeamStat_statValue.CreateFromDiscriminatorValue); } },
                { "team", n => { Team = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("conference", Conference);
            writer.WriteIntValue("season", Season);
            writer.WriteStringValue("statName", StatName);
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamStat.TeamStat_statValue>("statValue", StatValue);
            writer.WriteStringValue("team", Team);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TeamStat_statValue : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double { get; set; }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::CollegeFootballData.Models.TeamStat.TeamStat_statValue"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::CollegeFootballData.Models.TeamStat.TeamStat_statValue CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::CollegeFootballData.Models.TeamStat.TeamStat_statValue();
                if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
