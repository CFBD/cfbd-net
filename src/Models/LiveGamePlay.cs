// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LiveGamePlay : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The awayScore property</summary>
        public int? AwayScore { get; set; }
        /// <summary>The clock property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Clock { get; set; }
#nullable restore
#else
        public string Clock { get; set; }
#endif
        /// <summary>The distance property</summary>
        public int? Distance { get; set; }
        /// <summary>The down property</summary>
        public int? Down { get; set; }
        /// <summary>The downType property</summary>
        public global::CollegeFootballData.Models.LiveGamePlay_downType? DownType { get; set; }
        /// <summary>The epa property</summary>
        public double? Epa { get; set; }
        /// <summary>The garbageTime property</summary>
        public bool? GarbageTime { get; set; }
        /// <summary>The homeScore property</summary>
        public int? HomeScore { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The period property</summary>
        public int? Period { get; set; }
        /// <summary>The playText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayText { get; set; }
#nullable restore
#else
        public string PlayText { get; set; }
#endif
        /// <summary>The playType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayType { get; set; }
#nullable restore
#else
        public string PlayType { get; set; }
#endif
        /// <summary>The playTypeId property</summary>
        public int? PlayTypeId { get; set; }
        /// <summary>The rushPash property</summary>
        public global::CollegeFootballData.Models.LiveGamePlay_rushPash? RushPash { get; set; }
        /// <summary>The success property</summary>
        public bool? Success { get; set; }
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team { get; set; }
#nullable restore
#else
        public string Team { get; set; }
#endif
        /// <summary>The teamId property</summary>
        public int? TeamId { get; set; }
        /// <summary>The wallClock property</summary>
        public DateTimeOffset? WallClock { get; set; }
        /// <summary>The yardsGained property</summary>
        public int? YardsGained { get; set; }
        /// <summary>The yardsToGoal property</summary>
        public int? YardsToGoal { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.LiveGamePlay"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.LiveGamePlay CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.LiveGamePlay();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awayScore", n => { AwayScore = n.GetIntValue(); } },
                { "clock", n => { Clock = n.GetStringValue(); } },
                { "distance", n => { Distance = n.GetIntValue(); } },
                { "down", n => { Down = n.GetIntValue(); } },
                { "downType", n => { DownType = n.GetEnumValue<global::CollegeFootballData.Models.LiveGamePlay_downType>(); } },
                { "epa", n => { Epa = n.GetDoubleValue(); } },
                { "garbageTime", n => { GarbageTime = n.GetBoolValue(); } },
                { "homeScore", n => { HomeScore = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "period", n => { Period = n.GetIntValue(); } },
                { "playText", n => { PlayText = n.GetStringValue(); } },
                { "playType", n => { PlayType = n.GetStringValue(); } },
                { "playTypeId", n => { PlayTypeId = n.GetIntValue(); } },
                { "rushPash", n => { RushPash = n.GetEnumValue<global::CollegeFootballData.Models.LiveGamePlay_rushPash>(); } },
                { "success", n => { Success = n.GetBoolValue(); } },
                { "team", n => { Team = n.GetStringValue(); } },
                { "teamId", n => { TeamId = n.GetIntValue(); } },
                { "wallClock", n => { WallClock = n.GetDateTimeOffsetValue(); } },
                { "yardsGained", n => { YardsGained = n.GetIntValue(); } },
                { "yardsToGoal", n => { YardsToGoal = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("awayScore", AwayScore);
            writer.WriteStringValue("clock", Clock);
            writer.WriteIntValue("distance", Distance);
            writer.WriteIntValue("down", Down);
            writer.WriteEnumValue<global::CollegeFootballData.Models.LiveGamePlay_downType>("downType", DownType);
            writer.WriteDoubleValue("epa", Epa);
            writer.WriteBoolValue("garbageTime", GarbageTime);
            writer.WriteIntValue("homeScore", HomeScore);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("period", Period);
            writer.WriteStringValue("playText", PlayText);
            writer.WriteStringValue("playType", PlayType);
            writer.WriteIntValue("playTypeId", PlayTypeId);
            writer.WriteEnumValue<global::CollegeFootballData.Models.LiveGamePlay_rushPash>("rushPash", RushPash);
            writer.WriteBoolValue("success", Success);
            writer.WriteStringValue("team", Team);
            writer.WriteIntValue("teamId", TeamId);
            writer.WriteDateTimeOffsetValue("wallClock", WallClock);
            writer.WriteIntValue("yardsGained", YardsGained);
            writer.WriteIntValue("yardsToGoal", YardsToGoal);
        }
    }
}
#pragma warning restore CS0618
