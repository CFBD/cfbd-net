// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TeamRushingStats : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The lineYards property</summary>
        public double? LineYards { get; set; }
        /// <summary>The lineYardsAverage property</summary>
        public double? LineYardsAverage { get; set; }
        /// <summary>The openFieldYards property</summary>
        public double? OpenFieldYards { get; set; }
        /// <summary>The openFieldYardsAverage property</summary>
        public double? OpenFieldYardsAverage { get; set; }
        /// <summary>The powerSuccess property</summary>
        public double? PowerSuccess { get; set; }
        /// <summary>The secondLevelYards property</summary>
        public double? SecondLevelYards { get; set; }
        /// <summary>The secondLevelYardsAverage property</summary>
        public double? SecondLevelYardsAverage { get; set; }
        /// <summary>The stuffRate property</summary>
        public double? StuffRate { get; set; }
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team { get; set; }
#nullable restore
#else
        public string Team { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.TeamRushingStats"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.TeamRushingStats CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.TeamRushingStats();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "lineYards", n => { LineYards = n.GetDoubleValue(); } },
                { "lineYardsAverage", n => { LineYardsAverage = n.GetDoubleValue(); } },
                { "openFieldYards", n => { OpenFieldYards = n.GetDoubleValue(); } },
                { "openFieldYardsAverage", n => { OpenFieldYardsAverage = n.GetDoubleValue(); } },
                { "powerSuccess", n => { PowerSuccess = n.GetDoubleValue(); } },
                { "secondLevelYards", n => { SecondLevelYards = n.GetDoubleValue(); } },
                { "secondLevelYardsAverage", n => { SecondLevelYardsAverage = n.GetDoubleValue(); } },
                { "stuffRate", n => { StuffRate = n.GetDoubleValue(); } },
                { "team", n => { Team = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("lineYards", LineYards);
            writer.WriteDoubleValue("lineYardsAverage", LineYardsAverage);
            writer.WriteDoubleValue("openFieldYards", OpenFieldYards);
            writer.WriteDoubleValue("openFieldYardsAverage", OpenFieldYardsAverage);
            writer.WriteDoubleValue("powerSuccess", PowerSuccess);
            writer.WriteDoubleValue("secondLevelYards", SecondLevelYards);
            writer.WriteDoubleValue("secondLevelYardsAverage", SecondLevelYardsAverage);
            writer.WriteDoubleValue("stuffRate", StuffRate);
            writer.WriteStringValue("team", Team);
        }
    }
}
#pragma warning restore CS0618
