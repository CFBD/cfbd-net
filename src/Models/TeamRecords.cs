// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TeamRecords : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The awayGames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamRecord? AwayGames { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamRecord AwayGames { get; set; }
#endif
        /// <summary>The classification property</summary>
        public global::CollegeFootballData.Models.DivisionClassification? Classification { get; set; }
        /// <summary>The conference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conference { get; set; }
#nullable restore
#else
        public string Conference { get; set; }
#endif
        /// <summary>The conferenceGames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamRecord? ConferenceGames { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamRecord ConferenceGames { get; set; }
#endif
        /// <summary>The division property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Division { get; set; }
#nullable restore
#else
        public string Division { get; set; }
#endif
        /// <summary>The expectedWins property</summary>
        public double? ExpectedWins { get; set; }
        /// <summary>The homeGames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamRecord? HomeGames { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamRecord HomeGames { get; set; }
#endif
        /// <summary>The neutralSiteGames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamRecord? NeutralSiteGames { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamRecord NeutralSiteGames { get; set; }
#endif
        /// <summary>The postseason property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamRecord? Postseason { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamRecord Postseason { get; set; }
#endif
        /// <summary>The regularSeason property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamRecord? RegularSeason { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamRecord RegularSeason { get; set; }
#endif
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team { get; set; }
#nullable restore
#else
        public string Team { get; set; }
#endif
        /// <summary>The teamId property</summary>
        public int? TeamId { get; set; }
        /// <summary>The total property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamRecord? Total { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamRecord Total { get; set; }
#endif
        /// <summary>The year property</summary>
        public int? Year { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.TeamRecords"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.TeamRecords CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.TeamRecords();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awayGames", n => { AwayGames = n.GetObjectValue<global::CollegeFootballData.Models.TeamRecord>(global::CollegeFootballData.Models.TeamRecord.CreateFromDiscriminatorValue); } },
                { "classification", n => { Classification = n.GetEnumValue<global::CollegeFootballData.Models.DivisionClassification>(); } },
                { "conference", n => { Conference = n.GetStringValue(); } },
                { "conferenceGames", n => { ConferenceGames = n.GetObjectValue<global::CollegeFootballData.Models.TeamRecord>(global::CollegeFootballData.Models.TeamRecord.CreateFromDiscriminatorValue); } },
                { "division", n => { Division = n.GetStringValue(); } },
                { "expectedWins", n => { ExpectedWins = n.GetDoubleValue(); } },
                { "homeGames", n => { HomeGames = n.GetObjectValue<global::CollegeFootballData.Models.TeamRecord>(global::CollegeFootballData.Models.TeamRecord.CreateFromDiscriminatorValue); } },
                { "neutralSiteGames", n => { NeutralSiteGames = n.GetObjectValue<global::CollegeFootballData.Models.TeamRecord>(global::CollegeFootballData.Models.TeamRecord.CreateFromDiscriminatorValue); } },
                { "postseason", n => { Postseason = n.GetObjectValue<global::CollegeFootballData.Models.TeamRecord>(global::CollegeFootballData.Models.TeamRecord.CreateFromDiscriminatorValue); } },
                { "regularSeason", n => { RegularSeason = n.GetObjectValue<global::CollegeFootballData.Models.TeamRecord>(global::CollegeFootballData.Models.TeamRecord.CreateFromDiscriminatorValue); } },
                { "team", n => { Team = n.GetStringValue(); } },
                { "teamId", n => { TeamId = n.GetIntValue(); } },
                { "total", n => { Total = n.GetObjectValue<global::CollegeFootballData.Models.TeamRecord>(global::CollegeFootballData.Models.TeamRecord.CreateFromDiscriminatorValue); } },
                { "year", n => { Year = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamRecord>("awayGames", AwayGames);
            writer.WriteEnumValue<global::CollegeFootballData.Models.DivisionClassification>("classification", Classification);
            writer.WriteStringValue("conference", Conference);
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamRecord>("conferenceGames", ConferenceGames);
            writer.WriteStringValue("division", Division);
            writer.WriteDoubleValue("expectedWins", ExpectedWins);
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamRecord>("homeGames", HomeGames);
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamRecord>("neutralSiteGames", NeutralSiteGames);
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamRecord>("postseason", Postseason);
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamRecord>("regularSeason", RegularSeason);
            writer.WriteStringValue("team", Team);
            writer.WriteIntValue("teamId", TeamId);
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamRecord>("total", Total);
            writer.WriteIntValue("year", Year);
        }
    }
}
#pragma warning restore CS0618
