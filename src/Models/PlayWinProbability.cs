// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlayWinProbability : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The away property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Away { get; set; }
#nullable restore
#else
        public string Away { get; set; }
#endif
        /// <summary>The awayId property</summary>
        public int? AwayId { get; set; }
        /// <summary>The awayScore property</summary>
        public int? AwayScore { get; set; }
        /// <summary>The distance property</summary>
        public int? Distance { get; set; }
        /// <summary>The down property</summary>
        public int? Down { get; set; }
        /// <summary>The gameId property</summary>
        public int? GameId { get; set; }
        /// <summary>The home property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Home { get; set; }
#nullable restore
#else
        public string Home { get; set; }
#endif
        /// <summary>The homeBall property</summary>
        public bool? HomeBall { get; set; }
        /// <summary>The homeId property</summary>
        public int? HomeId { get; set; }
        /// <summary>The homeScore property</summary>
        public int? HomeScore { get; set; }
        /// <summary>The homeWinProbability property</summary>
        public double? HomeWinProbability { get; set; }
        /// <summary>The playId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayId { get; set; }
#nullable restore
#else
        public string PlayId { get; set; }
#endif
        /// <summary>The playNumber property</summary>
        public int? PlayNumber { get; set; }
        /// <summary>The playText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayText { get; set; }
#nullable restore
#else
        public string PlayText { get; set; }
#endif
        /// <summary>The spread property</summary>
        public double? Spread { get; set; }
        /// <summary>The yardLine property</summary>
        public int? YardLine { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.PlayWinProbability"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.PlayWinProbability CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.PlayWinProbability();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "away", n => { Away = n.GetStringValue(); } },
                { "awayId", n => { AwayId = n.GetIntValue(); } },
                { "awayScore", n => { AwayScore = n.GetIntValue(); } },
                { "distance", n => { Distance = n.GetIntValue(); } },
                { "down", n => { Down = n.GetIntValue(); } },
                { "gameId", n => { GameId = n.GetIntValue(); } },
                { "home", n => { Home = n.GetStringValue(); } },
                { "homeBall", n => { HomeBall = n.GetBoolValue(); } },
                { "homeId", n => { HomeId = n.GetIntValue(); } },
                { "homeScore", n => { HomeScore = n.GetIntValue(); } },
                { "homeWinProbability", n => { HomeWinProbability = n.GetDoubleValue(); } },
                { "playId", n => { PlayId = n.GetStringValue(); } },
                { "playNumber", n => { PlayNumber = n.GetIntValue(); } },
                { "playText", n => { PlayText = n.GetStringValue(); } },
                { "spread", n => { Spread = n.GetDoubleValue(); } },
                { "yardLine", n => { YardLine = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("away", Away);
            writer.WriteIntValue("awayId", AwayId);
            writer.WriteIntValue("awayScore", AwayScore);
            writer.WriteIntValue("distance", Distance);
            writer.WriteIntValue("down", Down);
            writer.WriteIntValue("gameId", GameId);
            writer.WriteStringValue("home", Home);
            writer.WriteBoolValue("homeBall", HomeBall);
            writer.WriteIntValue("homeId", HomeId);
            writer.WriteIntValue("homeScore", HomeScore);
            writer.WriteDoubleValue("homeWinProbability", HomeWinProbability);
            writer.WriteStringValue("playId", PlayId);
            writer.WriteIntValue("playNumber", PlayNumber);
            writer.WriteStringValue("playText", PlayText);
            writer.WriteDoubleValue("spread", Spread);
            writer.WriteIntValue("yardLine", YardLine);
        }
    }
}
#pragma warning restore CS0618
