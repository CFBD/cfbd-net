// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TeamSP_defense : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The explosiveness property</summary>
        public double? Explosiveness { get; set; }
        /// <summary>The havoc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.TeamSP_defense_havoc? Havoc { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.TeamSP_defense_havoc Havoc { get; set; }
#endif
        /// <summary>The passing property</summary>
        public double? Passing { get; set; }
        /// <summary>The passingDowns property</summary>
        public double? PassingDowns { get; set; }
        /// <summary>The ranking property</summary>
        public int? Ranking { get; set; }
        /// <summary>The rating property</summary>
        public double? Rating { get; set; }
        /// <summary>The rushing property</summary>
        public double? Rushing { get; set; }
        /// <summary>The standardDowns property</summary>
        public double? StandardDowns { get; set; }
        /// <summary>The success property</summary>
        public double? Success { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Models.TeamSP_defense"/> and sets the default values.
        /// </summary>
        public TeamSP_defense()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.TeamSP_defense"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.TeamSP_defense CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.TeamSP_defense();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "explosiveness", n => { Explosiveness = n.GetDoubleValue(); } },
                { "havoc", n => { Havoc = n.GetObjectValue<global::CollegeFootballData.Models.TeamSP_defense_havoc>(global::CollegeFootballData.Models.TeamSP_defense_havoc.CreateFromDiscriminatorValue); } },
                { "passing", n => { Passing = n.GetDoubleValue(); } },
                { "passingDowns", n => { PassingDowns = n.GetDoubleValue(); } },
                { "ranking", n => { Ranking = n.GetIntValue(); } },
                { "rating", n => { Rating = n.GetDoubleValue(); } },
                { "rushing", n => { Rushing = n.GetDoubleValue(); } },
                { "standardDowns", n => { StandardDowns = n.GetDoubleValue(); } },
                { "success", n => { Success = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("explosiveness", Explosiveness);
            writer.WriteObjectValue<global::CollegeFootballData.Models.TeamSP_defense_havoc>("havoc", Havoc);
            writer.WriteDoubleValue("passing", Passing);
            writer.WriteDoubleValue("passingDowns", PassingDowns);
            writer.WriteIntValue("ranking", Ranking);
            writer.WriteDoubleValue("rating", Rating);
            writer.WriteDoubleValue("rushing", Rushing);
            writer.WriteDoubleValue("standardDowns", StandardDowns);
            writer.WriteDoubleValue("success", Success);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
