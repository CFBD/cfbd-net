// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Matchup : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The endYear property</summary>
        public int? EndYear { get; set; }
        /// <summary>The games property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::CollegeFootballData.Models.MatchupGame>? Games { get; set; }
#nullable restore
#else
        public List<global::CollegeFootballData.Models.MatchupGame> Games { get; set; }
#endif
        /// <summary>The startYear property</summary>
        public int? StartYear { get; set; }
        /// <summary>The team1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team1 { get; set; }
#nullable restore
#else
        public string Team1 { get; set; }
#endif
        /// <summary>The team1Wins property</summary>
        public int? Team1Wins { get; set; }
        /// <summary>The team2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team2 { get; set; }
#nullable restore
#else
        public string Team2 { get; set; }
#endif
        /// <summary>The team2Wins property</summary>
        public int? Team2Wins { get; set; }
        /// <summary>The ties property</summary>
        public int? Ties { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.Matchup"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.Matchup CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.Matchup();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "endYear", n => { EndYear = n.GetIntValue(); } },
                { "games", n => { Games = n.GetCollectionOfObjectValues<global::CollegeFootballData.Models.MatchupGame>(global::CollegeFootballData.Models.MatchupGame.CreateFromDiscriminatorValue)?.AsList(); } },
                { "startYear", n => { StartYear = n.GetIntValue(); } },
                { "team1", n => { Team1 = n.GetStringValue(); } },
                { "team1Wins", n => { Team1Wins = n.GetIntValue(); } },
                { "team2", n => { Team2 = n.GetStringValue(); } },
                { "team2Wins", n => { Team2Wins = n.GetIntValue(); } },
                { "ties", n => { Ties = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("endYear", EndYear);
            writer.WriteCollectionOfObjectValues<global::CollegeFootballData.Models.MatchupGame>("games", Games);
            writer.WriteIntValue("startYear", StartYear);
            writer.WriteStringValue("team1", Team1);
            writer.WriteIntValue("team1Wins", Team1Wins);
            writer.WriteStringValue("team2", Team2);
            writer.WriteIntValue("team2Wins", Team2Wins);
            writer.WriteIntValue("ties", Ties);
        }
    }
}
#pragma warning restore CS0618
