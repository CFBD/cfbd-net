// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ScoreboardGame_homeTeam : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The classification property</summary>
        public global::CollegeFootballData.Models.DivisionClassification? Classification { get; set; }
        /// <summary>The conference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conference { get; set; }
#nullable restore
#else
        public string Conference { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The lineScores property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? LineScores { get; set; }
#nullable restore
#else
        public List<int?> LineScores { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The points property</summary>
        public int? Points { get; set; }
        /// <summary>The winProbability property</summary>
        public double? WinProbability { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Models.ScoreboardGame_homeTeam"/> and sets the default values.
        /// </summary>
        public ScoreboardGame_homeTeam()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.ScoreboardGame_homeTeam"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.ScoreboardGame_homeTeam CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.ScoreboardGame_homeTeam();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "classification", n => { Classification = n.GetEnumValue<global::CollegeFootballData.Models.DivisionClassification>(); } },
                { "conference", n => { Conference = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "lineScores", n => { LineScores = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "points", n => { Points = n.GetIntValue(); } },
                { "winProbability", n => { WinProbability = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::CollegeFootballData.Models.DivisionClassification>("classification", Classification);
            writer.WriteStringValue("conference", Conference);
            writer.WriteIntValue("id", Id);
            writer.WriteCollectionOfPrimitiveValues<int?>("lineScores", LineScores);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("points", Points);
            writer.WriteDoubleValue("winProbability", WinProbability);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
