// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GameLine : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The awayMoneyline property</summary>
        public double? AwayMoneyline { get; set; }
        /// <summary>The formattedSpread property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormattedSpread { get; set; }
#nullable restore
#else
        public string FormattedSpread { get; set; }
#endif
        /// <summary>The homeMoneyline property</summary>
        public double? HomeMoneyline { get; set; }
        /// <summary>The overUnder property</summary>
        public double? OverUnder { get; set; }
        /// <summary>The overUnderOpen property</summary>
        public double? OverUnderOpen { get; set; }
        /// <summary>The provider property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Provider { get; set; }
#nullable restore
#else
        public string Provider { get; set; }
#endif
        /// <summary>The spread property</summary>
        public double? Spread { get; set; }
        /// <summary>The spreadOpen property</summary>
        public double? SpreadOpen { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.GameLine"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.GameLine CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.GameLine();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awayMoneyline", n => { AwayMoneyline = n.GetDoubleValue(); } },
                { "formattedSpread", n => { FormattedSpread = n.GetStringValue(); } },
                { "homeMoneyline", n => { HomeMoneyline = n.GetDoubleValue(); } },
                { "overUnder", n => { OverUnder = n.GetDoubleValue(); } },
                { "overUnderOpen", n => { OverUnderOpen = n.GetDoubleValue(); } },
                { "provider", n => { Provider = n.GetStringValue(); } },
                { "spread", n => { Spread = n.GetDoubleValue(); } },
                { "spreadOpen", n => { SpreadOpen = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("awayMoneyline", AwayMoneyline);
            writer.WriteStringValue("formattedSpread", FormattedSpread);
            writer.WriteDoubleValue("homeMoneyline", HomeMoneyline);
            writer.WriteDoubleValue("overUnder", OverUnder);
            writer.WriteDoubleValue("overUnderOpen", OverUnderOpen);
            writer.WriteStringValue("provider", Provider);
            writer.WriteDoubleValue("spread", Spread);
            writer.WriteDoubleValue("spreadOpen", SpreadOpen);
        }
    }
}
#pragma warning restore CS0618
