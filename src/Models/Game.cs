// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Game : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The attendance property</summary>
        public int? Attendance { get; set; }
        /// <summary>The awayClassification property</summary>
        public global::CollegeFootballData.Models.DivisionClassification? AwayClassification { get; set; }
        /// <summary>The awayConference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AwayConference { get; set; }
#nullable restore
#else
        public string AwayConference { get; set; }
#endif
        /// <summary>The awayId property</summary>
        public int? AwayId { get; set; }
        /// <summary>The awayLineScores property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? AwayLineScores { get; set; }
#nullable restore
#else
        public List<double?> AwayLineScores { get; set; }
#endif
        /// <summary>The awayPoints property</summary>
        public int? AwayPoints { get; set; }
        /// <summary>The awayPostgameElo property</summary>
        public int? AwayPostgameElo { get; set; }
        /// <summary>The awayPostgameWinProbability property</summary>
        public double? AwayPostgameWinProbability { get; set; }
        /// <summary>The awayPregameElo property</summary>
        public int? AwayPregameElo { get; set; }
        /// <summary>The awayTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AwayTeam { get; set; }
#nullable restore
#else
        public string AwayTeam { get; set; }
#endif
        /// <summary>The completed property</summary>
        public bool? Completed { get; set; }
        /// <summary>The conferenceGame property</summary>
        public bool? ConferenceGame { get; set; }
        /// <summary>The excitementIndex property</summary>
        public double? ExcitementIndex { get; set; }
        /// <summary>The highlights property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Highlights { get; set; }
#nullable restore
#else
        public string Highlights { get; set; }
#endif
        /// <summary>The homeClassification property</summary>
        public global::CollegeFootballData.Models.DivisionClassification? HomeClassification { get; set; }
        /// <summary>The homeConference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeConference { get; set; }
#nullable restore
#else
        public string HomeConference { get; set; }
#endif
        /// <summary>The homeId property</summary>
        public int? HomeId { get; set; }
        /// <summary>The homeLineScores property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? HomeLineScores { get; set; }
#nullable restore
#else
        public List<double?> HomeLineScores { get; set; }
#endif
        /// <summary>The homePoints property</summary>
        public int? HomePoints { get; set; }
        /// <summary>The homePostgameElo property</summary>
        public int? HomePostgameElo { get; set; }
        /// <summary>The homePostgameWinProbability property</summary>
        public double? HomePostgameWinProbability { get; set; }
        /// <summary>The homePregameElo property</summary>
        public int? HomePregameElo { get; set; }
        /// <summary>The homeTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeTeam { get; set; }
#nullable restore
#else
        public string HomeTeam { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The neutralSite property</summary>
        public bool? NeutralSite { get; set; }
        /// <summary>The notes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>The season property</summary>
        public int? Season { get; set; }
        /// <summary>The seasonType property</summary>
        public global::CollegeFootballData.Models.SeasonType? SeasonType { get; set; }
        /// <summary>The startDate property</summary>
        public DateTimeOffset? StartDate { get; set; }
        /// <summary>The startTimeTBD property</summary>
        public bool? StartTimeTBD { get; set; }
        /// <summary>The venue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Venue { get; set; }
#nullable restore
#else
        public string Venue { get; set; }
#endif
        /// <summary>The venueId property</summary>
        public int? VenueId { get; set; }
        /// <summary>The week property</summary>
        public int? Week { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.Game"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.Game CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.Game();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attendance", n => { Attendance = n.GetIntValue(); } },
                { "awayClassification", n => { AwayClassification = n.GetEnumValue<global::CollegeFootballData.Models.DivisionClassification>(); } },
                { "awayConference", n => { AwayConference = n.GetStringValue(); } },
                { "awayId", n => { AwayId = n.GetIntValue(); } },
                { "awayLineScores", n => { AwayLineScores = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "awayPoints", n => { AwayPoints = n.GetIntValue(); } },
                { "awayPostgameElo", n => { AwayPostgameElo = n.GetIntValue(); } },
                { "awayPostgameWinProbability", n => { AwayPostgameWinProbability = n.GetDoubleValue(); } },
                { "awayPregameElo", n => { AwayPregameElo = n.GetIntValue(); } },
                { "awayTeam", n => { AwayTeam = n.GetStringValue(); } },
                { "completed", n => { Completed = n.GetBoolValue(); } },
                { "conferenceGame", n => { ConferenceGame = n.GetBoolValue(); } },
                { "excitementIndex", n => { ExcitementIndex = n.GetDoubleValue(); } },
                { "highlights", n => { Highlights = n.GetStringValue(); } },
                { "homeClassification", n => { HomeClassification = n.GetEnumValue<global::CollegeFootballData.Models.DivisionClassification>(); } },
                { "homeConference", n => { HomeConference = n.GetStringValue(); } },
                { "homeId", n => { HomeId = n.GetIntValue(); } },
                { "homeLineScores", n => { HomeLineScores = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "homePoints", n => { HomePoints = n.GetIntValue(); } },
                { "homePostgameElo", n => { HomePostgameElo = n.GetIntValue(); } },
                { "homePostgameWinProbability", n => { HomePostgameWinProbability = n.GetDoubleValue(); } },
                { "homePregameElo", n => { HomePregameElo = n.GetIntValue(); } },
                { "homeTeam", n => { HomeTeam = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "neutralSite", n => { NeutralSite = n.GetBoolValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "season", n => { Season = n.GetIntValue(); } },
                { "seasonType", n => { SeasonType = n.GetEnumValue<global::CollegeFootballData.Models.SeasonType>(); } },
                { "startDate", n => { StartDate = n.GetDateTimeOffsetValue(); } },
                { "startTimeTBD", n => { StartTimeTBD = n.GetBoolValue(); } },
                { "venue", n => { Venue = n.GetStringValue(); } },
                { "venueId", n => { VenueId = n.GetIntValue(); } },
                { "week", n => { Week = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("attendance", Attendance);
            writer.WriteEnumValue<global::CollegeFootballData.Models.DivisionClassification>("awayClassification", AwayClassification);
            writer.WriteStringValue("awayConference", AwayConference);
            writer.WriteIntValue("awayId", AwayId);
            writer.WriteCollectionOfPrimitiveValues<double?>("awayLineScores", AwayLineScores);
            writer.WriteIntValue("awayPoints", AwayPoints);
            writer.WriteIntValue("awayPostgameElo", AwayPostgameElo);
            writer.WriteDoubleValue("awayPostgameWinProbability", AwayPostgameWinProbability);
            writer.WriteIntValue("awayPregameElo", AwayPregameElo);
            writer.WriteStringValue("awayTeam", AwayTeam);
            writer.WriteBoolValue("completed", Completed);
            writer.WriteBoolValue("conferenceGame", ConferenceGame);
            writer.WriteDoubleValue("excitementIndex", ExcitementIndex);
            writer.WriteStringValue("highlights", Highlights);
            writer.WriteEnumValue<global::CollegeFootballData.Models.DivisionClassification>("homeClassification", HomeClassification);
            writer.WriteStringValue("homeConference", HomeConference);
            writer.WriteIntValue("homeId", HomeId);
            writer.WriteCollectionOfPrimitiveValues<double?>("homeLineScores", HomeLineScores);
            writer.WriteIntValue("homePoints", HomePoints);
            writer.WriteIntValue("homePostgameElo", HomePostgameElo);
            writer.WriteDoubleValue("homePostgameWinProbability", HomePostgameWinProbability);
            writer.WriteIntValue("homePregameElo", HomePregameElo);
            writer.WriteStringValue("homeTeam", HomeTeam);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("neutralSite", NeutralSite);
            writer.WriteStringValue("notes", Notes);
            writer.WriteIntValue("season", Season);
            writer.WriteEnumValue<global::CollegeFootballData.Models.SeasonType>("seasonType", SeasonType);
            writer.WriteDateTimeOffsetValue("startDate", StartDate);
            writer.WriteBoolValue("startTimeTBD", StartTimeTBD);
            writer.WriteStringValue("venue", Venue);
            writer.WriteIntValue("venueId", VenueId);
            writer.WriteIntValue("week", Week);
        }
    }
}
#pragma warning restore CS0618
