// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TeamRecord : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The games property</summary>
        public int? Games { get; set; }
        /// <summary>The losses property</summary>
        public int? Losses { get; set; }
        /// <summary>The ties property</summary>
        public int? Ties { get; set; }
        /// <summary>The wins property</summary>
        public int? Wins { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.TeamRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.TeamRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.TeamRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "games", n => { Games = n.GetIntValue(); } },
                { "losses", n => { Losses = n.GetIntValue(); } },
                { "ties", n => { Ties = n.GetIntValue(); } },
                { "wins", n => { Wins = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("games", Games);
            writer.WriteIntValue("losses", Losses);
            writer.WriteIntValue("ties", Ties);
            writer.WriteIntValue("wins", Wins);
        }
    }
}
#pragma warning restore CS0618
