// <auto-generated/>
#pragma warning disable CS0618
using CollegeFootballData.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CollegeFootballData.Ppa.Teams
{
    /// <summary>
    /// Builds and executes requests for operations under \ppa\teams
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TeamsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TeamsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/ppa/teams{?conference*,excludeGarbageTime*,team*,year*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TeamsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/ppa/teams{?conference*,excludeGarbageTime*,team*,year*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves historical team PPA metrics by season
        /// </summary>
        /// <returns>A List&lt;global::CollegeFootballData.Models.TeamSeasonPredictedPointsAdded&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::CollegeFootballData.Models.TeamSeasonPredictedPointsAdded>?> GetAsync(Action<RequestConfiguration<global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::CollegeFootballData.Models.TeamSeasonPredictedPointsAdded>> GetAsync(Action<RequestConfiguration<global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::CollegeFootballData.Models.TeamSeasonPredictedPointsAdded>(requestInfo, global::CollegeFootballData.Models.TeamSeasonPredictedPointsAdded.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Retrieves historical team PPA metrics by season
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves historical team PPA metrics by season
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TeamsRequestBuilderGetQueryParameters 
        {
            /// <summary>Conference abbreviation filter</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("conference")]
            public string? Conference { get; set; }
#nullable restore
#else
            [QueryParameter("conference")]
            public string Conference { get; set; }
#endif
            /// <summary>Exclude garbage time plays</summary>
            [QueryParameter("excludeGarbageTime")]
            public bool? ExcludeGarbageTime { get; set; }
            /// <summary>Team filter, required if year not specified</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("team")]
            public string? Team { get; set; }
#nullable restore
#else
            [QueryParameter("team")]
            public string Team { get; set; }
#endif
            /// <summary>Year filter, required if team not specified</summary>
            [QueryParameter("year")]
            public int? Year { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TeamsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::CollegeFootballData.Ppa.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
