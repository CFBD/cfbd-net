// <auto-generated/>
#pragma warning disable CS0618
using CollegeFootballData.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CollegeFootballData.Teams.Matchup
{
    /// <summary>
    /// Builds and executes requests for operations under \teams\matchup
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MatchupRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MatchupRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/teams/matchup?team1={team1}&team2={team2}{&maxYear*,minYear*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MatchupRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/teams/matchup?team1={team1}&team2={team2}{&maxYear*,minYear*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves historical matchup details for two given teams
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.Matchup"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::CollegeFootballData.Models.Matchup?> GetAsync(Action<RequestConfiguration<global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder.MatchupRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::CollegeFootballData.Models.Matchup> GetAsync(Action<RequestConfiguration<global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder.MatchupRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::CollegeFootballData.Models.Matchup>(requestInfo, global::CollegeFootballData.Models.Matchup.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves historical matchup details for two given teams
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder.MatchupRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder.MatchupRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves historical matchup details for two given teams
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MatchupRequestBuilderGetQueryParameters 
        {
            /// <summary>Optional ending year</summary>
            [QueryParameter("maxYear")]
            public int? MaxYear { get; set; }
            /// <summary>Optional starting year</summary>
            [QueryParameter("minYear")]
            public int? MinYear { get; set; }
            /// <summary>First team to compare</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("team1")]
            public string? Team1 { get; set; }
#nullable restore
#else
            [QueryParameter("team1")]
            public string Team1 { get; set; }
#endif
            /// <summary>Second team to compare</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("team2")]
            public string? Team2 { get; set; }
#nullable restore
#else
            [QueryParameter("team2")]
            public string Team2 { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MatchupRequestBuilderGetRequestConfiguration : RequestConfiguration<global::CollegeFootballData.Teams.Matchup.MatchupRequestBuilder.MatchupRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
