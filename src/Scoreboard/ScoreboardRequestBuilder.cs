// <auto-generated/>
#pragma warning disable CS0618
using CollegeFootballData.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CollegeFootballData.Scoreboard
{
    /// <summary>
    /// Builds and executes requests for operations under \scoreboard
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ScoreboardRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ScoreboardRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/scoreboard{?classification*,conference*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ScoreboardRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/scoreboard{?classification*,conference*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves live scoreboard data
        /// </summary>
        /// <returns>A List&lt;global::CollegeFootballData.Models.ScoreboardGame&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::CollegeFootballData.Models.ScoreboardGame>?> GetAsync(Action<RequestConfiguration<global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder.ScoreboardRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::CollegeFootballData.Models.ScoreboardGame>> GetAsync(Action<RequestConfiguration<global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder.ScoreboardRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::CollegeFootballData.Models.ScoreboardGame>(requestInfo, global::CollegeFootballData.Models.ScoreboardGame.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Retrieves live scoreboard data
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder.ScoreboardRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder.ScoreboardRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves live scoreboard data
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ScoreboardRequestBuilderGetQueryParameters 
        {
            /// <summary>Optional division classification filter, defaults to fbs</summary>
            [Obsolete("This property is deprecated, use ClassificationAsDivisionClassification instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("classification")]
            public string? Classification { get; set; }
#nullable restore
#else
            [QueryParameter("classification")]
            public string Classification { get; set; }
#endif
            /// <summary>Optional division classification filter, defaults to fbs</summary>
            [QueryParameter("classification")]
            public global::CollegeFootballData.Models.DivisionClassification? ClassificationAsDivisionClassification { get; set; }
            /// <summary>Optional conference filter</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("conference")]
            public string? Conference { get; set; }
#nullable restore
#else
            [QueryParameter("conference")]
            public string Conference { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ScoreboardRequestBuilderGetRequestConfiguration : RequestConfiguration<global::CollegeFootballData.Scoreboard.ScoreboardRequestBuilder.ScoreboardRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
