/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CollegeFootballData.Client;
using CollegeFootballData.Api;
// uncomment below to import models
//using CollegeFootballData.Model;

namespace CollegeFootballData.Test.Api
{
    /// <summary>
    ///  Class for testing MetricsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MetricsApiTests : IDisposable
    {
        private MetricsApi instance;

        public MetricsApiTests()
        {
            instance = new MetricsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MetricsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MetricsApi
            //Assert.IsType<MetricsApi>(instance);
        }

        /// <summary>
        /// Test GetFieldGoalExpectedPoints
        /// </summary>
        [Fact]
        public void GetFieldGoalExpectedPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetFieldGoalExpectedPoints();
            //Assert.IsType<List<FieldGoalEP>>(response);
        }

        /// <summary>
        /// Test GetPredictedPoints
        /// </summary>
        [Fact]
        public void GetPredictedPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int down = null;
            //int distance = null;
            //var response = instance.GetPredictedPoints(down, distance);
            //Assert.IsType<List<PredictedPointsValue>>(response);
        }

        /// <summary>
        /// Test GetPredictedPointsAddedByGame
        /// </summary>
        [Fact]
        public void GetPredictedPointsAddedByGameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int year = null;
            //int? week = null;
            //SeasonType? seasonType = null;
            //string? team = null;
            //string? conference = null;
            //bool? excludeGarbageTime = null;
            //var response = instance.GetPredictedPointsAddedByGame(year, week, seasonType, team, conference, excludeGarbageTime);
            //Assert.IsType<List<TeamGamePredictedPointsAdded>>(response);
        }

        /// <summary>
        /// Test GetPredictedPointsAddedByPlayerGame
        /// </summary>
        [Fact]
        public void GetPredictedPointsAddedByPlayerGameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int year = null;
            //int? week = null;
            //SeasonType? seasonType = null;
            //string? team = null;
            //string? position = null;
            //string? playerId = null;
            //double? threshold = null;
            //bool? excludeGarbageTime = null;
            //var response = instance.GetPredictedPointsAddedByPlayerGame(year, week, seasonType, team, position, playerId, threshold, excludeGarbageTime);
            //Assert.IsType<List<PlayerGamePredictedPointsAdded>>(response);
        }

        /// <summary>
        /// Test GetPredictedPointsAddedByPlayerSeason
        /// </summary>
        [Fact]
        public void GetPredictedPointsAddedByPlayerSeasonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? year = null;
            //string? conference = null;
            //string? team = null;
            //string? position = null;
            //string? playerId = null;
            //double? threshold = null;
            //bool? excludeGarbageTime = null;
            //var response = instance.GetPredictedPointsAddedByPlayerSeason(year, conference, team, position, playerId, threshold, excludeGarbageTime);
            //Assert.IsType<List<PlayerSeasonPredictedPointsAdded>>(response);
        }

        /// <summary>
        /// Test GetPredictedPointsAddedByTeam
        /// </summary>
        [Fact]
        public void GetPredictedPointsAddedByTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? year = null;
            //string? team = null;
            //string? conference = null;
            //bool? excludeGarbageTime = null;
            //var response = instance.GetPredictedPointsAddedByTeam(year, team, conference, excludeGarbageTime);
            //Assert.IsType<List<TeamSeasonPredictedPointsAdded>>(response);
        }

        /// <summary>
        /// Test GetPregameWinProbabilities
        /// </summary>
        [Fact]
        public void GetPregameWinProbabilitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? year = null;
            //int? week = null;
            //SeasonType? seasonType = null;
            //string? team = null;
            //var response = instance.GetPregameWinProbabilities(year, week, seasonType, team);
            //Assert.IsType<List<PregameWinProbability>>(response);
        }

        /// <summary>
        /// Test GetWinProbability
        /// </summary>
        [Fact]
        public void GetWinProbabilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int gameId = null;
            //var response = instance.GetWinProbability(gameId);
            //Assert.IsType<List<PlayWinProbability>>(response);
        }
    }
}
