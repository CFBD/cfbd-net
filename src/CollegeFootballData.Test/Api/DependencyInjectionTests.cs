/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.23
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using CollegeFootballData.Client;
using CollegeFootballData.Api;
using CollegeFootballData.Extensions;
using Xunit;

namespace CollegeFootballData.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var adjustedMetricsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAdjustedMetricsApi>();
            Assert.True(adjustedMetricsApi.HttpClient.BaseAddress != null);

            var bettingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBettingApi>();
            Assert.True(bettingApi.HttpClient.BaseAddress != null);

            var coachesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICoachesApi>();
            Assert.True(coachesApi.HttpClient.BaseAddress != null);

            var conferencesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IConferencesApi>();
            Assert.True(conferencesApi.HttpClient.BaseAddress != null);

            var draftApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDraftApi>();
            Assert.True(draftApi.HttpClient.BaseAddress != null);

            var drivesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDrivesApi>();
            Assert.True(drivesApi.HttpClient.BaseAddress != null);

            var gamesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGamesApi>();
            Assert.True(gamesApi.HttpClient.BaseAddress != null);

            var metricsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMetricsApi>();
            Assert.True(metricsApi.HttpClient.BaseAddress != null);

            var playersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPlayersApi>();
            Assert.True(playersApi.HttpClient.BaseAddress != null);

            var playsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPlaysApi>();
            Assert.True(playsApi.HttpClient.BaseAddress != null);

            var rankingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRankingsApi>();
            Assert.True(rankingsApi.HttpClient.BaseAddress != null);

            var ratingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRatingsApi>();
            Assert.True(ratingsApi.HttpClient.BaseAddress != null);

            var recruitingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRecruitingApi>();
            Assert.True(recruitingApi.HttpClient.BaseAddress != null);

            var statsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IStatsApi>();
            Assert.True(statsApi.HttpClient.BaseAddress != null);

            var teamsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITeamsApi>();
            Assert.True(teamsApi.HttpClient.BaseAddress != null);

            var venuesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVenuesApi>();
            Assert.True(venuesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var adjustedMetricsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAdjustedMetricsApi>();
            Assert.True(adjustedMetricsApi.HttpClient.BaseAddress != null);

            var bettingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBettingApi>();
            Assert.True(bettingApi.HttpClient.BaseAddress != null);

            var coachesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICoachesApi>();
            Assert.True(coachesApi.HttpClient.BaseAddress != null);

            var conferencesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IConferencesApi>();
            Assert.True(conferencesApi.HttpClient.BaseAddress != null);

            var draftApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDraftApi>();
            Assert.True(draftApi.HttpClient.BaseAddress != null);

            var drivesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDrivesApi>();
            Assert.True(drivesApi.HttpClient.BaseAddress != null);

            var gamesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGamesApi>();
            Assert.True(gamesApi.HttpClient.BaseAddress != null);

            var metricsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMetricsApi>();
            Assert.True(metricsApi.HttpClient.BaseAddress != null);

            var playersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPlayersApi>();
            Assert.True(playersApi.HttpClient.BaseAddress != null);

            var playsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPlaysApi>();
            Assert.True(playsApi.HttpClient.BaseAddress != null);

            var rankingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRankingsApi>();
            Assert.True(rankingsApi.HttpClient.BaseAddress != null);

            var ratingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRatingsApi>();
            Assert.True(ratingsApi.HttpClient.BaseAddress != null);

            var recruitingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRecruitingApi>();
            Assert.True(recruitingApi.HttpClient.BaseAddress != null);

            var statsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IStatsApi>();
            Assert.True(statsApi.HttpClient.BaseAddress != null);

            var teamsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITeamsApi>();
            Assert.True(teamsApi.HttpClient.BaseAddress != null);

            var venuesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVenuesApi>();
            Assert.True(venuesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var adjustedMetricsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAdjustedMetricsApi>();
            Assert.True(adjustedMetricsApi.HttpClient.BaseAddress != null);
            
            var bettingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBettingApi>();
            Assert.True(bettingApi.HttpClient.BaseAddress != null);
            
            var coachesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICoachesApi>();
            Assert.True(coachesApi.HttpClient.BaseAddress != null);
            
            var conferencesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IConferencesApi>();
            Assert.True(conferencesApi.HttpClient.BaseAddress != null);
            
            var draftApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDraftApi>();
            Assert.True(draftApi.HttpClient.BaseAddress != null);
            
            var drivesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDrivesApi>();
            Assert.True(drivesApi.HttpClient.BaseAddress != null);
            
            var gamesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGamesApi>();
            Assert.True(gamesApi.HttpClient.BaseAddress != null);
            
            var metricsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMetricsApi>();
            Assert.True(metricsApi.HttpClient.BaseAddress != null);
            
            var playersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPlayersApi>();
            Assert.True(playersApi.HttpClient.BaseAddress != null);
            
            var playsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPlaysApi>();
            Assert.True(playsApi.HttpClient.BaseAddress != null);
            
            var rankingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRankingsApi>();
            Assert.True(rankingsApi.HttpClient.BaseAddress != null);
            
            var ratingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRatingsApi>();
            Assert.True(ratingsApi.HttpClient.BaseAddress != null);
            
            var recruitingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRecruitingApi>();
            Assert.True(recruitingApi.HttpClient.BaseAddress != null);
            
            var statsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IStatsApi>();
            Assert.True(statsApi.HttpClient.BaseAddress != null);
            
            var teamsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITeamsApi>();
            Assert.True(teamsApi.HttpClient.BaseAddress != null);
            
            var venuesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVenuesApi>();
            Assert.True(venuesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var adjustedMetricsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAdjustedMetricsApi>();
            Assert.True(adjustedMetricsApi.HttpClient.BaseAddress != null);

            var bettingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBettingApi>();
            Assert.True(bettingApi.HttpClient.BaseAddress != null);

            var coachesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICoachesApi>();
            Assert.True(coachesApi.HttpClient.BaseAddress != null);

            var conferencesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IConferencesApi>();
            Assert.True(conferencesApi.HttpClient.BaseAddress != null);

            var draftApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDraftApi>();
            Assert.True(draftApi.HttpClient.BaseAddress != null);

            var drivesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDrivesApi>();
            Assert.True(drivesApi.HttpClient.BaseAddress != null);

            var gamesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGamesApi>();
            Assert.True(gamesApi.HttpClient.BaseAddress != null);

            var metricsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMetricsApi>();
            Assert.True(metricsApi.HttpClient.BaseAddress != null);

            var playersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPlayersApi>();
            Assert.True(playersApi.HttpClient.BaseAddress != null);

            var playsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPlaysApi>();
            Assert.True(playsApi.HttpClient.BaseAddress != null);

            var rankingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRankingsApi>();
            Assert.True(rankingsApi.HttpClient.BaseAddress != null);

            var ratingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRatingsApi>();
            Assert.True(ratingsApi.HttpClient.BaseAddress != null);

            var recruitingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRecruitingApi>();
            Assert.True(recruitingApi.HttpClient.BaseAddress != null);

            var statsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IStatsApi>();
            Assert.True(statsApi.HttpClient.BaseAddress != null);

            var teamsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITeamsApi>();
            Assert.True(teamsApi.HttpClient.BaseAddress != null);

            var venuesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVenuesApi>();
            Assert.True(venuesApi.HttpClient.BaseAddress != null);
        }
    }
}
