/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.3
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CollegeFootballData.Client;
using CollegeFootballData.Model;

namespace CollegeFootballData.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGamesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an advanced box score for a game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AdvancedBoxScore</returns>
        AdvancedBoxScore GetAdvancedBoxScore(int id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an advanced box score for a game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AdvancedBoxScore</returns>
        ApiResponse<AdvancedBoxScore> GetAdvancedBoxScoreWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves calendar information
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CalendarWeek&gt;</returns>
        List<CalendarWeek> GetCalendar(int year, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves calendar information
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CalendarWeek&gt;</returns>
        ApiResponse<List<CalendarWeek>> GetCalendarWithHttpInfo(int year, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player box score statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GamePlayerStats&gt;</returns>
        List<GamePlayerStats> GetGamePlayerStats(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int? id = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player box score statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GamePlayerStats&gt;</returns>
        ApiResponse<List<GamePlayerStats>> GetGamePlayerStatsWithHttpInfo(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int? id = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves team box score statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GameTeamStats&gt;</returns>
        List<GameTeamStats> GetGameTeamStats(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), int? id = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves team box score statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GameTeamStats&gt;</returns>
        ApiResponse<List<GameTeamStats>> GetGameTeamStatsWithHttpInfo(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), int? id = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical game data
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Game&gt;</returns>
        List<Game> GetGames(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), DivisionClassification? classification = default(DivisionClassification?), string? team = default(string?), string? home = default(string?), string? away = default(string?), string? conference = default(string?), int? id = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical game data
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Game&gt;</returns>
        ApiResponse<List<Game>> GetGamesWithHttpInfo(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), DivisionClassification? classification = default(DivisionClassification?), string? team = default(string?), string? home = default(string?), string? away = default(string?), string? conference = default(string?), int? id = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves media information for games
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GameMedia&gt;</returns>
        List<GameMedia> GetMedia(int year, SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), MediaType? mediaType = default(MediaType?), DivisionClassification? classification = default(DivisionClassification?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves media information for games
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GameMedia&gt;</returns>
        ApiResponse<List<GameMedia>> GetMediaWithHttpInfo(int year, SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), MediaType? mediaType = default(MediaType?), DivisionClassification? classification = default(DivisionClassification?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team records
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamRecords&gt;</returns>
        List<TeamRecords> GetRecords(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team records
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamRecords&gt;</returns>
        ApiResponse<List<TeamRecords>> GetRecordsWithHttpInfo(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves live scoreboard data
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScoreboardGame&gt;</returns>
        List<ScoreboardGame> GetScoreboard(DivisionClassification? classification = default(DivisionClassification?), string? conference = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves live scoreboard data
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScoreboardGame&gt;</returns>
        ApiResponse<List<ScoreboardGame>> GetScoreboardWithHttpInfo(DivisionClassification? classification = default(DivisionClassification?), string? conference = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve historical and future weather data (Patreon only)
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GameWeather&gt;</returns>
        List<GameWeather> GetWeather(int? year = default(int?), SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), int? gameId = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve historical and future weather data (Patreon only)
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GameWeather&gt;</returns>
        ApiResponse<List<GameWeather>> GetWeatherWithHttpInfo(int? year = default(int?), SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), int? gameId = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGamesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an advanced box score for a game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AdvancedBoxScore</returns>
        System.Threading.Tasks.Task<AdvancedBoxScore> GetAdvancedBoxScoreAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an advanced box score for a game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AdvancedBoxScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdvancedBoxScore>> GetAdvancedBoxScoreWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves calendar information
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CalendarWeek&gt;</returns>
        System.Threading.Tasks.Task<List<CalendarWeek>> GetCalendarAsync(int year, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves calendar information
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CalendarWeek&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CalendarWeek>>> GetCalendarWithHttpInfoAsync(int year, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player box score statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GamePlayerStats&gt;</returns>
        System.Threading.Tasks.Task<List<GamePlayerStats>> GetGamePlayerStatsAsync(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player box score statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GamePlayerStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GamePlayerStats>>> GetGamePlayerStatsWithHttpInfoAsync(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves team box score statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GameTeamStats&gt;</returns>
        System.Threading.Tasks.Task<List<GameTeamStats>> GetGameTeamStatsAsync(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves team box score statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GameTeamStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GameTeamStats>>> GetGameTeamStatsWithHttpInfoAsync(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical game data
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Game&gt;</returns>
        System.Threading.Tasks.Task<List<Game>> GetGamesAsync(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), DivisionClassification? classification = default(DivisionClassification?), string? team = default(string?), string? home = default(string?), string? away = default(string?), string? conference = default(string?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical game data
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Game&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Game>>> GetGamesWithHttpInfoAsync(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), DivisionClassification? classification = default(DivisionClassification?), string? team = default(string?), string? home = default(string?), string? away = default(string?), string? conference = default(string?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves media information for games
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GameMedia&gt;</returns>
        System.Threading.Tasks.Task<List<GameMedia>> GetMediaAsync(int year, SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), MediaType? mediaType = default(MediaType?), DivisionClassification? classification = default(DivisionClassification?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves media information for games
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GameMedia&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GameMedia>>> GetMediaWithHttpInfoAsync(int year, SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), MediaType? mediaType = default(MediaType?), DivisionClassification? classification = default(DivisionClassification?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team records
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamRecords&gt;</returns>
        System.Threading.Tasks.Task<List<TeamRecords>> GetRecordsAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team records
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamRecords&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamRecords>>> GetRecordsWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves live scoreboard data
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScoreboardGame&gt;</returns>
        System.Threading.Tasks.Task<List<ScoreboardGame>> GetScoreboardAsync(DivisionClassification? classification = default(DivisionClassification?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves live scoreboard data
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScoreboardGame&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScoreboardGame>>> GetScoreboardWithHttpInfoAsync(DivisionClassification? classification = default(DivisionClassification?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve historical and future weather data (Patreon only)
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GameWeather&gt;</returns>
        System.Threading.Tasks.Task<List<GameWeather>> GetWeatherAsync(int? year = default(int?), SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), int? gameId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve historical and future weather data (Patreon only)
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GameWeather&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GameWeather>>> GetWeatherWithHttpInfoAsync(int? year = default(int?), SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), int? gameId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGamesApi : IGamesApiSync, IGamesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GamesApi : IGamesApi
    {
        private CollegeFootballData.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamesApi(string basePath)
        {
            this.Configuration = CollegeFootballData.Client.Configuration.MergeConfigurations(
                CollegeFootballData.Client.GlobalConfiguration.Instance,
                new CollegeFootballData.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GamesApi(CollegeFootballData.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CollegeFootballData.Client.Configuration.MergeConfigurations(
                CollegeFootballData.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GamesApi(CollegeFootballData.Client.ISynchronousClient client, CollegeFootballData.Client.IAsynchronousClient asyncClient, CollegeFootballData.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CollegeFootballData.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CollegeFootballData.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CollegeFootballData.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CollegeFootballData.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieves an advanced box score for a game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AdvancedBoxScore</returns>
        public AdvancedBoxScore GetAdvancedBoxScore(int id, int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<AdvancedBoxScore> localVarResponse = GetAdvancedBoxScoreWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an advanced box score for a game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AdvancedBoxScore</returns>
        public CollegeFootballData.Client.ApiResponse<AdvancedBoxScore> GetAdvancedBoxScoreWithHttpInfo(int id, int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "GamesApi.GetAdvancedBoxScore";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AdvancedBoxScore>("/game/box/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdvancedBoxScore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves an advanced box score for a game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AdvancedBoxScore</returns>
        public async System.Threading.Tasks.Task<AdvancedBoxScore> GetAdvancedBoxScoreAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<AdvancedBoxScore> localVarResponse = await GetAdvancedBoxScoreWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an advanced box score for a game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AdvancedBoxScore)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<AdvancedBoxScore>> GetAdvancedBoxScoreWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "GamesApi.GetAdvancedBoxScore";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AdvancedBoxScore>("/game/box/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdvancedBoxScore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves calendar information
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CalendarWeek&gt;</returns>
        public List<CalendarWeek> GetCalendar(int year, int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<CalendarWeek>> localVarResponse = GetCalendarWithHttpInfo(year);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves calendar information
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CalendarWeek&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<CalendarWeek>> GetCalendarWithHttpInfo(int year, int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));

            localVarRequestOptions.Operation = "GamesApi.GetCalendar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CalendarWeek>>("/calendar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalendar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves calendar information
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CalendarWeek&gt;</returns>
        public async System.Threading.Tasks.Task<List<CalendarWeek>> GetCalendarAsync(int year, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<CalendarWeek>> localVarResponse = await GetCalendarWithHttpInfoAsync(year, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves calendar information
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CalendarWeek&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<CalendarWeek>>> GetCalendarWithHttpInfoAsync(int year, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));

            localVarRequestOptions.Operation = "GamesApi.GetCalendar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CalendarWeek>>("/calendar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalendar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves player box score statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GamePlayerStats&gt;</returns>
        public List<GamePlayerStats> GetGamePlayerStats(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int? id = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<GamePlayerStats>> localVarResponse = GetGamePlayerStatsWithHttpInfo(year, week, team, conference, classification, seasonType, category, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves player box score statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GamePlayerStats&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<GamePlayerStats>> GetGamePlayerStatsWithHttpInfo(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int? id = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "GamesApi.GetGamePlayerStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GamePlayerStats>>("/games/players", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGamePlayerStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves player box score statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GamePlayerStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<GamePlayerStats>> GetGamePlayerStatsAsync(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<GamePlayerStats>> localVarResponse = await GetGamePlayerStatsWithHttpInfoAsync(year, week, team, conference, classification, seasonType, category, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves player box score statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GamePlayerStats&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<GamePlayerStats>>> GetGamePlayerStatsWithHttpInfoAsync(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "GamesApi.GetGamePlayerStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GamePlayerStats>>("/games/players", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGamePlayerStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves team box score statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GameTeamStats&gt;</returns>
        public List<GameTeamStats> GetGameTeamStats(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), int? id = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<GameTeamStats>> localVarResponse = GetGameTeamStatsWithHttpInfo(year, week, team, conference, classification, seasonType, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves team box score statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GameTeamStats&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<GameTeamStats>> GetGameTeamStatsWithHttpInfo(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), int? id = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "GamesApi.GetGameTeamStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GameTeamStats>>("/games/teams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGameTeamStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves team box score statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GameTeamStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<GameTeamStats>> GetGameTeamStatsAsync(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<GameTeamStats>> localVarResponse = await GetGameTeamStatsWithHttpInfoAsync(year, week, team, conference, classification, seasonType, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves team box score statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GameTeamStats&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<GameTeamStats>>> GetGameTeamStatsWithHttpInfoAsync(int? year = default(int?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), SeasonType? seasonType = default(SeasonType?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "GamesApi.GetGameTeamStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GameTeamStats>>("/games/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGameTeamStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves historical game data
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Game&gt;</returns>
        public List<Game> GetGames(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), DivisionClassification? classification = default(DivisionClassification?), string? team = default(string?), string? home = default(string?), string? away = default(string?), string? conference = default(string?), int? id = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<Game>> localVarResponse = GetGamesWithHttpInfo(year, week, seasonType, classification, team, home, away, conference, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves historical game data
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Game&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<Game>> GetGamesWithHttpInfo(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), DivisionClassification? classification = default(DivisionClassification?), string? team = default(string?), string? home = default(string?), string? away = default(string?), string? conference = default(string?), int? id = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (home != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "home", home));
            }
            if (away != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "away", away));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "GamesApi.GetGames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Game>>("/games", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves historical game data
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Game&gt;</returns>
        public async System.Threading.Tasks.Task<List<Game>> GetGamesAsync(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), DivisionClassification? classification = default(DivisionClassification?), string? team = default(string?), string? home = default(string?), string? away = default(string?), string? conference = default(string?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<Game>> localVarResponse = await GetGamesWithHttpInfoAsync(year, week, seasonType, classification, team, home, away, conference, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves historical game data
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Game&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<Game>>> GetGamesWithHttpInfoAsync(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), DivisionClassification? classification = default(DivisionClassification?), string? team = default(string?), string? home = default(string?), string? away = default(string?), string? conference = default(string?), int? id = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (home != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "home", home));
            }
            if (away != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "away", away));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "GamesApi.GetGames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Game>>("/games", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves media information for games
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GameMedia&gt;</returns>
        public List<GameMedia> GetMedia(int year, SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), MediaType? mediaType = default(MediaType?), DivisionClassification? classification = default(DivisionClassification?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<GameMedia>> localVarResponse = GetMediaWithHttpInfo(year, seasonType, week, team, conference, mediaType, classification);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves media information for games
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GameMedia&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<GameMedia>> GetMediaWithHttpInfo(int year, SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), MediaType? mediaType = default(MediaType?), DivisionClassification? classification = default(DivisionClassification?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "mediaType", mediaType));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }

            localVarRequestOptions.Operation = "GamesApi.GetMedia";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GameMedia>>("/games/media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMedia", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves media information for games
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GameMedia&gt;</returns>
        public async System.Threading.Tasks.Task<List<GameMedia>> GetMediaAsync(int year, SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), MediaType? mediaType = default(MediaType?), DivisionClassification? classification = default(DivisionClassification?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<GameMedia>> localVarResponse = await GetMediaWithHttpInfoAsync(year, seasonType, week, team, conference, mediaType, classification, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves media information for games
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GameMedia&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<GameMedia>>> GetMediaWithHttpInfoAsync(int year, SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), MediaType? mediaType = default(MediaType?), DivisionClassification? classification = default(DivisionClassification?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "mediaType", mediaType));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }

            localVarRequestOptions.Operation = "GamesApi.GetMedia";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GameMedia>>("/games/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMedia", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves historical team records
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamRecords&gt;</returns>
        public List<TeamRecords> GetRecords(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<TeamRecords>> localVarResponse = GetRecordsWithHttpInfo(year, team, conference);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves historical team records
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamRecords&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<TeamRecords>> GetRecordsWithHttpInfo(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }

            localVarRequestOptions.Operation = "GamesApi.GetRecords";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamRecords>>("/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves historical team records
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamRecords&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamRecords>> GetRecordsAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<TeamRecords>> localVarResponse = await GetRecordsWithHttpInfoAsync(year, team, conference, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves historical team records
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamRecords&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<TeamRecords>>> GetRecordsWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }

            localVarRequestOptions.Operation = "GamesApi.GetRecords";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamRecords>>("/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves live scoreboard data
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScoreboardGame&gt;</returns>
        public List<ScoreboardGame> GetScoreboard(DivisionClassification? classification = default(DivisionClassification?), string? conference = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<ScoreboardGame>> localVarResponse = GetScoreboardWithHttpInfo(classification, conference);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves live scoreboard data
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScoreboardGame&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<ScoreboardGame>> GetScoreboardWithHttpInfo(DivisionClassification? classification = default(DivisionClassification?), string? conference = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }

            localVarRequestOptions.Operation = "GamesApi.GetScoreboard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScoreboardGame>>("/scoreboard", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScoreboard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves live scoreboard data
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScoreboardGame&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScoreboardGame>> GetScoreboardAsync(DivisionClassification? classification = default(DivisionClassification?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<ScoreboardGame>> localVarResponse = await GetScoreboardWithHttpInfoAsync(classification, conference, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves live scoreboard data
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScoreboardGame&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<ScoreboardGame>>> GetScoreboardWithHttpInfoAsync(DivisionClassification? classification = default(DivisionClassification?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }

            localVarRequestOptions.Operation = "GamesApi.GetScoreboard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScoreboardGame>>("/scoreboard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScoreboard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve historical and future weather data (Patreon only)
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GameWeather&gt;</returns>
        public List<GameWeather> GetWeather(int? year = default(int?), SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), int? gameId = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<GameWeather>> localVarResponse = GetWeatherWithHttpInfo(year, seasonType, week, team, conference, classification, gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve historical and future weather data (Patreon only)
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GameWeather&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<GameWeather>> GetWeatherWithHttpInfo(int? year = default(int?), SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), int? gameId = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (gameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "gameId", gameId));
            }

            localVarRequestOptions.Operation = "GamesApi.GetWeather";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GameWeather>>("/games/weather", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeather", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve historical and future weather data (Patreon only)
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GameWeather&gt;</returns>
        public async System.Threading.Tasks.Task<List<GameWeather>> GetWeatherAsync(int? year = default(int?), SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), int? gameId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<GameWeather>> localVarResponse = await GetWeatherWithHttpInfoAsync(year, seasonType, week, team, conference, classification, gameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve historical and future weather data (Patreon only)
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GameWeather&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<GameWeather>>> GetWeatherWithHttpInfoAsync(int? year = default(int?), SeasonType? seasonType = default(SeasonType?), int? week = default(int?), string? team = default(string?), string? conference = default(string?), DivisionClassification? classification = default(DivisionClassification?), int? gameId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (classification != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "classification", classification));
            }
            if (gameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "gameId", gameId));
            }

            localVarRequestOptions.Operation = "GamesApi.GetWeather";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GameWeather>>("/games/weather", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeather", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
