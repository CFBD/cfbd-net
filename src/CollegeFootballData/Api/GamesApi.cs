// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.19
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CollegeFootballData.Client;
using CollegeFootballData.Model;
using System.Diagnostics.CodeAnalysis;

namespace CollegeFootballData.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGamesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GamesApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an advanced box score for a game
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedBoxScoreApiResponse"/>&gt;</returns>
        Task<IGetAdvancedBoxScoreApiResponse> GetAdvancedBoxScoreAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an advanced box score for a game
        /// </remarks>
        /// <param name="id">Required game id filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedBoxScoreApiResponse"/>?&gt;</returns>
        Task<IGetAdvancedBoxScoreApiResponse?> GetAdvancedBoxScoreOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves calendar information
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCalendarApiResponse"/>&gt;</returns>
        Task<IGetCalendarApiResponse> GetCalendarAsync(int year, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves calendar information
        /// </remarks>
        /// <param name="year">Required year filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCalendarApiResponse"/>?&gt;</returns>
        Task<IGetCalendarApiResponse?> GetCalendarOrDefaultAsync(int year, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player box score statistics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamePlayerStatsApiResponse"/>&gt;</returns>
        Task<IGetGamePlayerStatsApiResponse> GetGamePlayerStatsAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<SeasonType> seasonType = default, Option<string> category = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player box score statistics
        /// </remarks>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamePlayerStatsApiResponse"/>?&gt;</returns>
        Task<IGetGamePlayerStatsApiResponse?> GetGamePlayerStatsOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<SeasonType> seasonType = default, Option<string> category = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves team box score statistics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGameTeamStatsApiResponse"/>&gt;</returns>
        Task<IGetGameTeamStatsApiResponse> GetGameTeamStatsAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<SeasonType> seasonType = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves team box score statistics
        /// </remarks>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGameTeamStatsApiResponse"/>?&gt;</returns>
        Task<IGetGameTeamStatsApiResponse?> GetGameTeamStatsOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<SeasonType> seasonType = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical game data
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamesApiResponse"/>&gt;</returns>
        Task<IGetGamesApiResponse> GetGamesAsync(Option<int> year = default, Option<int> week = default, Option<SeasonType> seasonType = default, Option<DivisionClassification> classification = default, Option<string> team = default, Option<string> home = default, Option<string> away = default, Option<string> conference = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical game data
        /// </remarks>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamesApiResponse"/>?&gt;</returns>
        Task<IGetGamesApiResponse?> GetGamesOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<SeasonType> seasonType = default, Option<DivisionClassification> classification = default, Option<string> team = default, Option<string> home = default, Option<string> away = default, Option<string> conference = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves media information for games
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMediaApiResponse"/>&gt;</returns>
        Task<IGetMediaApiResponse> GetMediaAsync(int year, Option<SeasonType> seasonType = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<MediaType> mediaType = default, Option<DivisionClassification> classification = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves media information for games
        /// </remarks>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMediaApiResponse"/>?&gt;</returns>
        Task<IGetMediaApiResponse?> GetMediaOrDefaultAsync(int year, Option<SeasonType> seasonType = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<MediaType> mediaType = default, Option<DivisionClassification> classification = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team records
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecordsApiResponse"/>&gt;</returns>
        Task<IGetRecordsApiResponse> GetRecordsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team records
        /// </remarks>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecordsApiResponse"/>?&gt;</returns>
        Task<IGetRecordsApiResponse?> GetRecordsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves live scoreboard data
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetScoreboardApiResponse"/>&gt;</returns>
        Task<IGetScoreboardApiResponse> GetScoreboardAsync(Option<DivisionClassification> classification = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves live scoreboard data
        /// </remarks>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetScoreboardApiResponse"/>?&gt;</returns>
        Task<IGetScoreboardApiResponse?> GetScoreboardOrDefaultAsync(Option<DivisionClassification> classification = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve historical and future weather data (Patreon only)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWeatherApiResponse"/>&gt;</returns>
        Task<IGetWeatherApiResponse> GetWeatherAsync(Option<int> year = default, Option<SeasonType> seasonType = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<int> gameId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve historical and future weather data (Patreon only)
        /// </remarks>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWeatherApiResponse"/>?&gt;</returns>
        Task<IGetWeatherApiResponse?> GetWeatherOrDefaultAsync(Option<int> year = default, Option<SeasonType> seasonType = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<int> gameId = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAdvancedBoxScoreApiResponse"/>
    /// </summary>
    public interface IGetAdvancedBoxScoreApiResponse : CollegeFootballData.Client.IApiResponse, IOk<CollegeFootballData.Model.AdvancedBoxScore?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetCalendarApiResponse"/>
    /// </summary>
    public interface IGetCalendarApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<CalendarWeek>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGamePlayerStatsApiResponse"/>
    /// </summary>
    public interface IGetGamePlayerStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<GamePlayerStats>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGameTeamStatsApiResponse"/>
    /// </summary>
    public interface IGetGameTeamStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<GameTeamStats>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGamesApiResponse"/>
    /// </summary>
    public interface IGetGamesApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<Game>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMediaApiResponse"/>
    /// </summary>
    public interface IGetMediaApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<GameMedia>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetRecordsApiResponse"/>
    /// </summary>
    public interface IGetRecordsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<TeamRecords>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetScoreboardApiResponse"/>
    /// </summary>
    public interface IGetScoreboardApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<ScoreboardGame>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWeatherApiResponse"/>
    /// </summary>
    public interface IGetWeatherApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<GameWeather>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GamesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAdvancedBoxScore;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAdvancedBoxScore;

        internal void ExecuteOnGetAdvancedBoxScore(GamesApi.GetAdvancedBoxScoreApiResponse apiResponse)
        {
            OnGetAdvancedBoxScore?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAdvancedBoxScore(Exception exception)
        {
            OnErrorGetAdvancedBoxScore?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCalendar;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCalendar;

        internal void ExecuteOnGetCalendar(GamesApi.GetCalendarApiResponse apiResponse)
        {
            OnGetCalendar?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCalendar(Exception exception)
        {
            OnErrorGetCalendar?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGamePlayerStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGamePlayerStats;

        internal void ExecuteOnGetGamePlayerStats(GamesApi.GetGamePlayerStatsApiResponse apiResponse)
        {
            OnGetGamePlayerStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGamePlayerStats(Exception exception)
        {
            OnErrorGetGamePlayerStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGameTeamStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGameTeamStats;

        internal void ExecuteOnGetGameTeamStats(GamesApi.GetGameTeamStatsApiResponse apiResponse)
        {
            OnGetGameTeamStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGameTeamStats(Exception exception)
        {
            OnErrorGetGameTeamStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGames;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGames;

        internal void ExecuteOnGetGames(GamesApi.GetGamesApiResponse apiResponse)
        {
            OnGetGames?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGames(Exception exception)
        {
            OnErrorGetGames?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMedia;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMedia;

        internal void ExecuteOnGetMedia(GamesApi.GetMediaApiResponse apiResponse)
        {
            OnGetMedia?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMedia(Exception exception)
        {
            OnErrorGetMedia?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRecords;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRecords;

        internal void ExecuteOnGetRecords(GamesApi.GetRecordsApiResponse apiResponse)
        {
            OnGetRecords?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRecords(Exception exception)
        {
            OnErrorGetRecords?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetScoreboard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetScoreboard;

        internal void ExecuteOnGetScoreboard(GamesApi.GetScoreboardApiResponse apiResponse)
        {
            OnGetScoreboard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetScoreboard(Exception exception)
        {
            OnErrorGetScoreboard?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWeather;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWeather;

        internal void ExecuteOnGetWeather(GamesApi.GetWeatherApiResponse apiResponse)
        {
            OnGetWeather?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWeather(Exception exception)
        {
            OnErrorGetWeather?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GamesApi : IGamesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GamesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GamesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamesApi(ILogger<GamesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GamesApiEvents gamesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GamesApi>();
            HttpClient = httpClient;
            Events = gamesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetAdvancedBoxScore(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetAdvancedBoxScoreDefaultImplementation(IGetAdvancedBoxScoreApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterGetAdvancedBoxScore(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetAdvancedBoxScore(ref bool suppressDefaultLog, IGetAdvancedBoxScoreApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetAdvancedBoxScoreDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAdvancedBoxScore(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetAdvancedBoxScore(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        ///  Retrieves an advanced box score for a game
        /// </summary>
        /// <param name="id">Required game id filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedBoxScoreApiResponse"/>&gt;</returns>
        public async Task<IGetAdvancedBoxScoreApiResponse?> GetAdvancedBoxScoreOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAdvancedBoxScoreAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves an advanced box score for a game
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Required game id filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedBoxScoreApiResponse"/>&gt;</returns>
        public async Task<IGetAdvancedBoxScoreApiResponse> GetAdvancedBoxScoreAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetAdvancedBoxScore(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/game/box/advanced";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAdvancedBoxScoreApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAdvancedBoxScoreApiResponse>();

                        GetAdvancedBoxScoreApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/game/box/advanced", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAdvancedBoxScoreDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetAdvancedBoxScore(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAdvancedBoxScoreDefaultImplementation(e, "/game/box/advanced", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetAdvancedBoxScore(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAdvancedBoxScoreApiResponse"/>
        /// </summary>
        public partial class GetAdvancedBoxScoreApiResponse : CollegeFootballData.Client.ApiResponse, IGetAdvancedBoxScoreApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAdvancedBoxScoreApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAdvancedBoxScoreApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAdvancedBoxScoreApiResponse(ILogger<GetAdvancedBoxScoreApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CollegeFootballData.Model.AdvancedBoxScore? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CollegeFootballData.Model.AdvancedBoxScore>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CollegeFootballData.Model.AdvancedBoxScore? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCalendar(ref int year);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        private void AfterGetCalendarDefaultImplementation(IGetCalendarApiResponse apiResponseLocalVar, int year)
        {
            bool suppressDefaultLog = false;
            AfterGetCalendar(ref suppressDefaultLog, apiResponseLocalVar, year);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        partial void AfterGetCalendar(ref bool suppressDefaultLog, IGetCalendarApiResponse apiResponseLocalVar, int year);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        private void OnErrorGetCalendarDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCalendar(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        partial void OnErrorGetCalendar(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year);

        /// <summary>
        ///  Retrieves calendar information
        /// </summary>
        /// <param name="year">Required year filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCalendarApiResponse"/>&gt;</returns>
        public async Task<IGetCalendarApiResponse?> GetCalendarOrDefaultAsync(int year, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCalendarAsync(year, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves calendar information
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCalendarApiResponse"/>&gt;</returns>
        public async Task<IGetCalendarApiResponse> GetCalendarAsync(int year, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetCalendar(ref year);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/calendar";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCalendarApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCalendarApiResponse>();

                        GetCalendarApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/calendar", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCalendarDefaultImplementation(apiResponseLocalVar, year);

                        Events.ExecuteOnGetCalendar(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCalendarDefaultImplementation(e, "/calendar", uriBuilderLocalVar.Path, year);
                Events.ExecuteOnErrorGetCalendar(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCalendarApiResponse"/>
        /// </summary>
        public partial class GetCalendarApiResponse : CollegeFootballData.Client.ApiResponse, IGetCalendarApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCalendarApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCalendarApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCalendarApiResponse(ILogger<GetCalendarApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<CalendarWeek>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<CalendarWeek>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<CalendarWeek>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGamePlayerStats(ref Option<int> year, ref Option<int> week, ref Option<string> team, ref Option<string> conference, ref Option<DivisionClassification> classification, ref Option<SeasonType> seasonType, ref Option<string> category, ref Option<int> id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="category"></param>
        /// <returns></returns>
        private void ValidateGetGamePlayerStats(Option<string> team, Option<string> conference, Option<string> category)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="seasonType"></param>
        /// <param name="category"></param>
        /// <param name="id"></param>
        private void AfterGetGamePlayerStatsDefaultImplementation(IGetGamePlayerStatsApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<SeasonType> seasonType, Option<string> category, Option<int> id)
        {
            bool suppressDefaultLog = false;
            AfterGetGamePlayerStats(ref suppressDefaultLog, apiResponseLocalVar, year, week, team, conference, classification, seasonType, category, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="seasonType"></param>
        /// <param name="category"></param>
        /// <param name="id"></param>
        partial void AfterGetGamePlayerStats(ref bool suppressDefaultLog, IGetGamePlayerStatsApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<SeasonType> seasonType, Option<string> category, Option<int> id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="seasonType"></param>
        /// <param name="category"></param>
        /// <param name="id"></param>
        private void OnErrorGetGamePlayerStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<SeasonType> seasonType, Option<string> category, Option<int> id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGamePlayerStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, week, team, conference, classification, seasonType, category, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="seasonType"></param>
        /// <param name="category"></param>
        /// <param name="id"></param>
        partial void OnErrorGetGamePlayerStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<SeasonType> seasonType, Option<string> category, Option<int> id);

        /// <summary>
        ///  Retrieves player box score statistics
        /// </summary>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamePlayerStatsApiResponse"/>&gt;</returns>
        public async Task<IGetGamePlayerStatsApiResponse?> GetGamePlayerStatsOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<SeasonType> seasonType = default, Option<string> category = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGamePlayerStatsAsync(year, week, team, conference, classification, seasonType, category, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves player box score statistics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional player statistical category filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamePlayerStatsApiResponse"/>&gt;</returns>
        public async Task<IGetGamePlayerStatsApiResponse> GetGamePlayerStatsAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<SeasonType> seasonType = default, Option<string> category = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGamePlayerStats(team, conference, category);

                FormatGetGamePlayerStats(ref year, ref week, ref team, ref conference, ref classification, ref seasonType, ref category, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/games/players";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (classification.IsSet)
                        parseQueryStringLocalVar["classification"] = ClientUtils.ParameterToString(classification.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (category.IsSet)
                        parseQueryStringLocalVar["category"] = ClientUtils.ParameterToString(category.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGamePlayerStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGamePlayerStatsApiResponse>();

                        GetGamePlayerStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/games/players", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGamePlayerStatsDefaultImplementation(apiResponseLocalVar, year, week, team, conference, classification, seasonType, category, id);

                        Events.ExecuteOnGetGamePlayerStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGamePlayerStatsDefaultImplementation(e, "/games/players", uriBuilderLocalVar.Path, year, week, team, conference, classification, seasonType, category, id);
                Events.ExecuteOnErrorGetGamePlayerStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGamePlayerStatsApiResponse"/>
        /// </summary>
        public partial class GetGamePlayerStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetGamePlayerStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGamePlayerStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGamePlayerStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGamePlayerStatsApiResponse(ILogger<GetGamePlayerStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<GamePlayerStats>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<GamePlayerStats>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<GamePlayerStats>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGameTeamStats(ref Option<int> year, ref Option<int> week, ref Option<string> team, ref Option<string> conference, ref Option<DivisionClassification> classification, ref Option<SeasonType> seasonType, ref Option<int> id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetGameTeamStats(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="seasonType"></param>
        /// <param name="id"></param>
        private void AfterGetGameTeamStatsDefaultImplementation(IGetGameTeamStatsApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<SeasonType> seasonType, Option<int> id)
        {
            bool suppressDefaultLog = false;
            AfterGetGameTeamStats(ref suppressDefaultLog, apiResponseLocalVar, year, week, team, conference, classification, seasonType, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="seasonType"></param>
        /// <param name="id"></param>
        partial void AfterGetGameTeamStats(ref bool suppressDefaultLog, IGetGameTeamStatsApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<SeasonType> seasonType, Option<int> id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="seasonType"></param>
        /// <param name="id"></param>
        private void OnErrorGetGameTeamStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<SeasonType> seasonType, Option<int> id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGameTeamStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, week, team, conference, classification, seasonType, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="seasonType"></param>
        /// <param name="id"></param>
        partial void OnErrorGetGameTeamStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<SeasonType> seasonType, Option<int> id);

        /// <summary>
        ///  Retrieves team box score statistics
        /// </summary>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGameTeamStatsApiResponse"/>&gt;</returns>
        public async Task<IGetGameTeamStatsApiResponse?> GetGameTeamStatsOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<SeasonType> seasonType = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGameTeamStatsAsync(year, week, team, conference, classification, seasonType, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves team box score statistics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (along with one of week, team, or conference), unless id is specified (optional)</param>
        /// <param name="week">Optional week filter, required if team and conference not specified (optional)</param>
        /// <param name="team">Optional team filter, required if week and conference not specified (optional)</param>
        /// <param name="conference">Optional conference filter, required if week and team not specified (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="id">Optional id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGameTeamStatsApiResponse"/>&gt;</returns>
        public async Task<IGetGameTeamStatsApiResponse> GetGameTeamStatsAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<SeasonType> seasonType = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGameTeamStats(team, conference);

                FormatGetGameTeamStats(ref year, ref week, ref team, ref conference, ref classification, ref seasonType, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/games/teams";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (classification.IsSet)
                        parseQueryStringLocalVar["classification"] = ClientUtils.ParameterToString(classification.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGameTeamStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGameTeamStatsApiResponse>();

                        GetGameTeamStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/games/teams", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGameTeamStatsDefaultImplementation(apiResponseLocalVar, year, week, team, conference, classification, seasonType, id);

                        Events.ExecuteOnGetGameTeamStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGameTeamStatsDefaultImplementation(e, "/games/teams", uriBuilderLocalVar.Path, year, week, team, conference, classification, seasonType, id);
                Events.ExecuteOnErrorGetGameTeamStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGameTeamStatsApiResponse"/>
        /// </summary>
        public partial class GetGameTeamStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetGameTeamStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGameTeamStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGameTeamStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGameTeamStatsApiResponse(ILogger<GetGameTeamStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<GameTeamStats>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<GameTeamStats>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<GameTeamStats>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGames(ref Option<int> year, ref Option<int> week, ref Option<SeasonType> seasonType, ref Option<DivisionClassification> classification, ref Option<string> team, ref Option<string> home, ref Option<string> away, ref Option<string> conference, ref Option<int> id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="home"></param>
        /// <param name="away"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetGames(Option<string> team, Option<string> home, Option<string> away, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (home.IsSet && home.Value == null)
                throw new ArgumentNullException(nameof(home));

            if (away.IsSet && away.Value == null)
                throw new ArgumentNullException(nameof(away));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="classification"></param>
        /// <param name="team"></param>
        /// <param name="home"></param>
        /// <param name="away"></param>
        /// <param name="conference"></param>
        /// <param name="id"></param>
        private void AfterGetGamesDefaultImplementation(IGetGamesApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<SeasonType> seasonType, Option<DivisionClassification> classification, Option<string> team, Option<string> home, Option<string> away, Option<string> conference, Option<int> id)
        {
            bool suppressDefaultLog = false;
            AfterGetGames(ref suppressDefaultLog, apiResponseLocalVar, year, week, seasonType, classification, team, home, away, conference, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="classification"></param>
        /// <param name="team"></param>
        /// <param name="home"></param>
        /// <param name="away"></param>
        /// <param name="conference"></param>
        /// <param name="id"></param>
        partial void AfterGetGames(ref bool suppressDefaultLog, IGetGamesApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<SeasonType> seasonType, Option<DivisionClassification> classification, Option<string> team, Option<string> home, Option<string> away, Option<string> conference, Option<int> id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="classification"></param>
        /// <param name="team"></param>
        /// <param name="home"></param>
        /// <param name="away"></param>
        /// <param name="conference"></param>
        /// <param name="id"></param>
        private void OnErrorGetGamesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<SeasonType> seasonType, Option<DivisionClassification> classification, Option<string> team, Option<string> home, Option<string> away, Option<string> conference, Option<int> id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGames(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, week, seasonType, classification, team, home, away, conference, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="classification"></param>
        /// <param name="team"></param>
        /// <param name="home"></param>
        /// <param name="away"></param>
        /// <param name="conference"></param>
        /// <param name="id"></param>
        partial void OnErrorGetGames(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<SeasonType> seasonType, Option<DivisionClassification> classification, Option<string> team, Option<string> home, Option<string> away, Option<string> conference, Option<int> id);

        /// <summary>
        ///  Retrieves historical game data
        /// </summary>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamesApiResponse"/>&gt;</returns>
        public async Task<IGetGamesApiResponse?> GetGamesOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<SeasonType> seasonType = default, Option<DivisionClassification> classification = default, Option<string> team = default, Option<string> home = default, Option<string> away = default, Option<string> conference = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGamesAsync(year, week, seasonType, classification, team, home, away, conference, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves historical game data
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter (except when id is specified) (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="home">Optional home team filter (optional)</param>
        /// <param name="away">Optional away team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="id">Game id filter to retrieve a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamesApiResponse"/>&gt;</returns>
        public async Task<IGetGamesApiResponse> GetGamesAsync(Option<int> year = default, Option<int> week = default, Option<SeasonType> seasonType = default, Option<DivisionClassification> classification = default, Option<string> team = default, Option<string> home = default, Option<string> away = default, Option<string> conference = default, Option<int> id = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGames(team, home, away, conference);

                FormatGetGames(ref year, ref week, ref seasonType, ref classification, ref team, ref home, ref away, ref conference, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/games";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (classification.IsSet)
                        parseQueryStringLocalVar["classification"] = ClientUtils.ParameterToString(classification.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (home.IsSet)
                        parseQueryStringLocalVar["home"] = ClientUtils.ParameterToString(home.Value);

                    if (away.IsSet)
                        parseQueryStringLocalVar["away"] = ClientUtils.ParameterToString(away.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGamesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGamesApiResponse>();

                        GetGamesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/games", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGamesDefaultImplementation(apiResponseLocalVar, year, week, seasonType, classification, team, home, away, conference, id);

                        Events.ExecuteOnGetGames(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGamesDefaultImplementation(e, "/games", uriBuilderLocalVar.Path, year, week, seasonType, classification, team, home, away, conference, id);
                Events.ExecuteOnErrorGetGames(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGamesApiResponse"/>
        /// </summary>
        public partial class GetGamesApiResponse : CollegeFootballData.Client.ApiResponse, IGetGamesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGamesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGamesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGamesApiResponse(ILogger<GetGamesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Game>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Game>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Game>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetMedia(ref int year, ref Option<SeasonType> seasonType, ref Option<int> week, ref Option<string> team, ref Option<string> conference, ref Option<MediaType> mediaType, ref Option<DivisionClassification> classification);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetMedia(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="seasonType"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="mediaType"></param>
        /// <param name="classification"></param>
        private void AfterGetMediaDefaultImplementation(IGetMediaApiResponse apiResponseLocalVar, int year, Option<SeasonType> seasonType, Option<int> week, Option<string> team, Option<string> conference, Option<MediaType> mediaType, Option<DivisionClassification> classification)
        {
            bool suppressDefaultLog = false;
            AfterGetMedia(ref suppressDefaultLog, apiResponseLocalVar, year, seasonType, week, team, conference, mediaType, classification);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="seasonType"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="mediaType"></param>
        /// <param name="classification"></param>
        partial void AfterGetMedia(ref bool suppressDefaultLog, IGetMediaApiResponse apiResponseLocalVar, int year, Option<SeasonType> seasonType, Option<int> week, Option<string> team, Option<string> conference, Option<MediaType> mediaType, Option<DivisionClassification> classification);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="seasonType"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="mediaType"></param>
        /// <param name="classification"></param>
        private void OnErrorGetMediaDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<SeasonType> seasonType, Option<int> week, Option<string> team, Option<string> conference, Option<MediaType> mediaType, Option<DivisionClassification> classification)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetMedia(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, seasonType, week, team, conference, mediaType, classification);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="seasonType"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="mediaType"></param>
        /// <param name="classification"></param>
        partial void OnErrorGetMedia(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<SeasonType> seasonType, Option<int> week, Option<string> team, Option<string> conference, Option<MediaType> mediaType, Option<DivisionClassification> classification);

        /// <summary>
        ///  Retrieves media information for games
        /// </summary>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMediaApiResponse"/>&gt;</returns>
        public async Task<IGetMediaApiResponse?> GetMediaOrDefaultAsync(int year, Option<SeasonType> seasonType = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<MediaType> mediaType = default, Option<DivisionClassification> classification = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMediaAsync(year, seasonType, week, team, conference, mediaType, classification, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves media information for games
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="mediaType">Optional media type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMediaApiResponse"/>&gt;</returns>
        public async Task<IGetMediaApiResponse> GetMediaAsync(int year, Option<SeasonType> seasonType = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<MediaType> mediaType = default, Option<DivisionClassification> classification = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMedia(team, conference);

                FormatGetMedia(ref year, ref seasonType, ref week, ref team, ref conference, ref mediaType, ref classification);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/games/media";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (mediaType.IsSet)
                        parseQueryStringLocalVar["mediaType"] = ClientUtils.ParameterToString(mediaType.Value);

                    if (classification.IsSet)
                        parseQueryStringLocalVar["classification"] = ClientUtils.ParameterToString(classification.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMediaApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMediaApiResponse>();

                        GetMediaApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/games/media", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMediaDefaultImplementation(apiResponseLocalVar, year, seasonType, week, team, conference, mediaType, classification);

                        Events.ExecuteOnGetMedia(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMediaDefaultImplementation(e, "/games/media", uriBuilderLocalVar.Path, year, seasonType, week, team, conference, mediaType, classification);
                Events.ExecuteOnErrorGetMedia(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMediaApiResponse"/>
        /// </summary>
        public partial class GetMediaApiResponse : CollegeFootballData.Client.ApiResponse, IGetMediaApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMediaApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMediaApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMediaApiResponse(ILogger<GetMediaApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<GameMedia>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<GameMedia>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<GameMedia>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRecords(ref Option<int> year, ref Option<string> team, ref Option<string> conference);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetRecords(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        private void AfterGetRecordsDefaultImplementation(IGetRecordsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference)
        {
            bool suppressDefaultLog = false;
            AfterGetRecords(ref suppressDefaultLog, apiResponseLocalVar, year, team, conference);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        partial void AfterGetRecords(ref bool suppressDefaultLog, IGetRecordsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        private void OnErrorGetRecordsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRecords(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, conference);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        partial void OnErrorGetRecords(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference);

        /// <summary>
        ///  Retrieves historical team records
        /// </summary>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecordsApiResponse"/>&gt;</returns>
        public async Task<IGetRecordsApiResponse?> GetRecordsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRecordsAsync(year, team, conference, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves historical team records
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecordsApiResponse"/>&gt;</returns>
        public async Task<IGetRecordsApiResponse> GetRecordsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRecords(team, conference);

                FormatGetRecords(ref year, ref team, ref conference);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/records";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRecordsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRecordsApiResponse>();

                        GetRecordsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/records", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRecordsDefaultImplementation(apiResponseLocalVar, year, team, conference);

                        Events.ExecuteOnGetRecords(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRecordsDefaultImplementation(e, "/records", uriBuilderLocalVar.Path, year, team, conference);
                Events.ExecuteOnErrorGetRecords(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRecordsApiResponse"/>
        /// </summary>
        public partial class GetRecordsApiResponse : CollegeFootballData.Client.ApiResponse, IGetRecordsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRecordsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRecordsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRecordsApiResponse(ILogger<GetRecordsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TeamRecords>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TeamRecords>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TeamRecords>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetScoreboard(ref Option<DivisionClassification> classification, ref Option<string> conference);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetScoreboard(Option<string> conference)
        {
            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="classification"></param>
        /// <param name="conference"></param>
        private void AfterGetScoreboardDefaultImplementation(IGetScoreboardApiResponse apiResponseLocalVar, Option<DivisionClassification> classification, Option<string> conference)
        {
            bool suppressDefaultLog = false;
            AfterGetScoreboard(ref suppressDefaultLog, apiResponseLocalVar, classification, conference);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="classification"></param>
        /// <param name="conference"></param>
        partial void AfterGetScoreboard(ref bool suppressDefaultLog, IGetScoreboardApiResponse apiResponseLocalVar, Option<DivisionClassification> classification, Option<string> conference);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="classification"></param>
        /// <param name="conference"></param>
        private void OnErrorGetScoreboardDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DivisionClassification> classification, Option<string> conference)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetScoreboard(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, classification, conference);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="classification"></param>
        /// <param name="conference"></param>
        partial void OnErrorGetScoreboard(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DivisionClassification> classification, Option<string> conference);

        /// <summary>
        ///  Retrieves live scoreboard data
        /// </summary>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetScoreboardApiResponse"/>&gt;</returns>
        public async Task<IGetScoreboardApiResponse?> GetScoreboardOrDefaultAsync(Option<DivisionClassification> classification = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetScoreboardAsync(classification, conference, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves live scoreboard data
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Optional division classification filter, defaults to fbs (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetScoreboardApiResponse"/>&gt;</returns>
        public async Task<IGetScoreboardApiResponse> GetScoreboardAsync(Option<DivisionClassification> classification = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetScoreboard(conference);

                FormatGetScoreboard(ref classification, ref conference);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/scoreboard";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (classification.IsSet)
                        parseQueryStringLocalVar["classification"] = ClientUtils.ParameterToString(classification.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetScoreboardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetScoreboardApiResponse>();

                        GetScoreboardApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/scoreboard", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetScoreboardDefaultImplementation(apiResponseLocalVar, classification, conference);

                        Events.ExecuteOnGetScoreboard(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetScoreboardDefaultImplementation(e, "/scoreboard", uriBuilderLocalVar.Path, classification, conference);
                Events.ExecuteOnErrorGetScoreboard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetScoreboardApiResponse"/>
        /// </summary>
        public partial class GetScoreboardApiResponse : CollegeFootballData.Client.ApiResponse, IGetScoreboardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetScoreboardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetScoreboardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetScoreboardApiResponse(ILogger<GetScoreboardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ScoreboardGame>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ScoreboardGame>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ScoreboardGame>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWeather(ref Option<int> year, ref Option<SeasonType> seasonType, ref Option<int> week, ref Option<string> team, ref Option<string> conference, ref Option<DivisionClassification> classification, ref Option<int> gameId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetWeather(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="seasonType"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="gameId"></param>
        private void AfterGetWeatherDefaultImplementation(IGetWeatherApiResponse apiResponseLocalVar, Option<int> year, Option<SeasonType> seasonType, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<int> gameId)
        {
            bool suppressDefaultLog = false;
            AfterGetWeather(ref suppressDefaultLog, apiResponseLocalVar, year, seasonType, week, team, conference, classification, gameId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="seasonType"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="gameId"></param>
        partial void AfterGetWeather(ref bool suppressDefaultLog, IGetWeatherApiResponse apiResponseLocalVar, Option<int> year, Option<SeasonType> seasonType, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<int> gameId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="seasonType"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="gameId"></param>
        private void OnErrorGetWeatherDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<SeasonType> seasonType, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<int> gameId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWeather(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, seasonType, week, team, conference, classification, gameId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="seasonType"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="classification"></param>
        /// <param name="gameId"></param>
        partial void OnErrorGetWeather(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<SeasonType> seasonType, Option<int> week, Option<string> team, Option<string> conference, Option<DivisionClassification> classification, Option<int> gameId);

        /// <summary>
        ///  Retrieve historical and future weather data (Patreon only)
        /// </summary>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWeatherApiResponse"/>&gt;</returns>
        public async Task<IGetWeatherApiResponse?> GetWeatherOrDefaultAsync(Option<int> year = default, Option<SeasonType> seasonType = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<int> gameId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWeatherAsync(year, seasonType, week, team, conference, classification, gameId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve historical and future weather data (Patreon only)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if game id not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="gameId">Filter for retrieving a single game (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWeatherApiResponse"/>&gt;</returns>
        public async Task<IGetWeatherApiResponse> GetWeatherAsync(Option<int> year = default, Option<SeasonType> seasonType = default, Option<int> week = default, Option<string> team = default, Option<string> conference = default, Option<DivisionClassification> classification = default, Option<int> gameId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWeather(team, conference);

                FormatGetWeather(ref year, ref seasonType, ref week, ref team, ref conference, ref classification, ref gameId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/games/weather";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (classification.IsSet)
                        parseQueryStringLocalVar["classification"] = ClientUtils.ParameterToString(classification.Value);

                    if (gameId.IsSet)
                        parseQueryStringLocalVar["gameId"] = ClientUtils.ParameterToString(gameId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWeatherApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWeatherApiResponse>();

                        GetWeatherApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/games/weather", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWeatherDefaultImplementation(apiResponseLocalVar, year, seasonType, week, team, conference, classification, gameId);

                        Events.ExecuteOnGetWeather(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWeatherDefaultImplementation(e, "/games/weather", uriBuilderLocalVar.Path, year, seasonType, week, team, conference, classification, gameId);
                Events.ExecuteOnErrorGetWeather(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWeatherApiResponse"/>
        /// </summary>
        public partial class GetWeatherApiResponse : CollegeFootballData.Client.ApiResponse, IGetWeatherApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWeatherApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWeatherApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWeatherApiResponse(ILogger<GetWeatherApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<GameWeather>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<GameWeather>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<GameWeather>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
