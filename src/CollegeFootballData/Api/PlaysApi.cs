// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.16
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CollegeFootballData.Client;
using CollegeFootballData.Model;
using System.Diagnostics.CodeAnalysis;

namespace CollegeFootballData.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPlaysApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PlaysApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries live play-by-play data and advanced stats
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game Id filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLivePlaysApiResponse"/>&gt;</returns>
        Task<IGetLivePlaysApiResponse> GetLivePlaysAsync(int gameId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries live play-by-play data and advanced stats
        /// </remarks>
        /// <param name="gameId">Game Id filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLivePlaysApiResponse"/>?&gt;</returns>
        Task<IGetLivePlaysApiResponse?> GetLivePlaysOrDefaultAsync(int gameId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves available play stat types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayStatTypesApiResponse"/>&gt;</returns>
        Task<IGetPlayStatTypesApiResponse> GetPlayStatTypesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves available play stat types
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayStatTypesApiResponse"/>?&gt;</returns>
        Task<IGetPlayStatTypesApiResponse?> GetPlayStatTypesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve player-play associations (limit 2000)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="gameId">Optional gameId filter (optional)</param>
        /// <param name="athleteId">Optional athleteId filter (optional)</param>
        /// <param name="statTypeId">Optional statTypeId filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayStatsApiResponse"/>&gt;</returns>
        Task<IGetPlayStatsApiResponse> GetPlayStatsAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<int> gameId = default, Option<int> athleteId = default, Option<int> statTypeId = default, Option<SeasonType> seasonType = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve player-play associations (limit 2000)
        /// </remarks>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="gameId">Optional gameId filter (optional)</param>
        /// <param name="athleteId">Optional athleteId filter (optional)</param>
        /// <param name="statTypeId">Optional statTypeId filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayStatsApiResponse"/>?&gt;</returns>
        Task<IGetPlayStatsApiResponse?> GetPlayStatsOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<int> gameId = default, Option<int> athleteId = default, Option<int> statTypeId = default, Option<SeasonType> seasonType = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves available play types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayTypesApiResponse"/>&gt;</returns>
        Task<IGetPlayTypesApiResponse> GetPlayTypesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves available play types
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayTypesApiResponse"/>?&gt;</returns>
        Task<IGetPlayTypesApiResponse?> GetPlayTypesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical play data
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Required week filter</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="offense">Optional offensive team filter (optional)</param>
        /// <param name="defense">Optional defensive team filter (optional)</param>
        /// <param name="offenseConference">Optional offensive conference filter (optional)</param>
        /// <param name="defenseConference">Optional defensive conference filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="playType">Optoinal play type abbreviation filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlaysApiResponse"/>&gt;</returns>
        Task<IGetPlaysApiResponse> GetPlaysAsync(int year, int week, Option<string> team = default, Option<string> offense = default, Option<string> defense = default, Option<string> offenseConference = default, Option<string> defenseConference = default, Option<string> conference = default, Option<string> playType = default, Option<SeasonType> seasonType = default, Option<DivisionClassification> classification = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical play data
        /// </remarks>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Required week filter</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="offense">Optional offensive team filter (optional)</param>
        /// <param name="defense">Optional defensive team filter (optional)</param>
        /// <param name="offenseConference">Optional offensive conference filter (optional)</param>
        /// <param name="defenseConference">Optional defensive conference filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="playType">Optoinal play type abbreviation filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlaysApiResponse"/>?&gt;</returns>
        Task<IGetPlaysApiResponse?> GetPlaysOrDefaultAsync(int year, int week, Option<string> team = default, Option<string> offense = default, Option<string> defense = default, Option<string> offenseConference = default, Option<string> defenseConference = default, Option<string> conference = default, Option<string> playType = default, Option<SeasonType> seasonType = default, Option<DivisionClassification> classification = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetLivePlaysApiResponse"/>
    /// </summary>
    public interface IGetLivePlaysApiResponse : CollegeFootballData.Client.IApiResponse, IOk<CollegeFootballData.Model.LiveGame?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlayStatTypesApiResponse"/>
    /// </summary>
    public interface IGetPlayStatTypesApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayStatType>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlayStatsApiResponse"/>
    /// </summary>
    public interface IGetPlayStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayStat>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlayTypesApiResponse"/>
    /// </summary>
    public interface IGetPlayTypesApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayType>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlaysApiResponse"/>
    /// </summary>
    public interface IGetPlaysApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<Play>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PlaysApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLivePlays;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLivePlays;

        internal void ExecuteOnGetLivePlays(PlaysApi.GetLivePlaysApiResponse apiResponse)
        {
            OnGetLivePlays?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLivePlays(Exception exception)
        {
            OnErrorGetLivePlays?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPlayStatTypes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPlayStatTypes;

        internal void ExecuteOnGetPlayStatTypes(PlaysApi.GetPlayStatTypesApiResponse apiResponse)
        {
            OnGetPlayStatTypes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayStatTypes(Exception exception)
        {
            OnErrorGetPlayStatTypes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPlayStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPlayStats;

        internal void ExecuteOnGetPlayStats(PlaysApi.GetPlayStatsApiResponse apiResponse)
        {
            OnGetPlayStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayStats(Exception exception)
        {
            OnErrorGetPlayStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPlayTypes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPlayTypes;

        internal void ExecuteOnGetPlayTypes(PlaysApi.GetPlayTypesApiResponse apiResponse)
        {
            OnGetPlayTypes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayTypes(Exception exception)
        {
            OnErrorGetPlayTypes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPlays;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPlays;

        internal void ExecuteOnGetPlays(PlaysApi.GetPlaysApiResponse apiResponse)
        {
            OnGetPlays?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlays(Exception exception)
        {
            OnErrorGetPlays?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PlaysApi : IPlaysApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PlaysApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PlaysApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaysApi(ILogger<PlaysApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PlaysApiEvents playsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PlaysApi>();
            HttpClient = httpClient;
            Events = playsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetLivePlays(ref int gameId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="gameId"></param>
        private void AfterGetLivePlaysDefaultImplementation(IGetLivePlaysApiResponse apiResponseLocalVar, int gameId)
        {
            bool suppressDefaultLog = false;
            AfterGetLivePlays(ref suppressDefaultLog, apiResponseLocalVar, gameId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="gameId"></param>
        partial void AfterGetLivePlays(ref bool suppressDefaultLog, IGetLivePlaysApiResponse apiResponseLocalVar, int gameId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="gameId"></param>
        private void OnErrorGetLivePlaysDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int gameId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLivePlays(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, gameId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="gameId"></param>
        partial void OnErrorGetLivePlays(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int gameId);

        /// <summary>
        ///  Queries live play-by-play data and advanced stats
        /// </summary>
        /// <param name="gameId">Game Id filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLivePlaysApiResponse"/>&gt;</returns>
        public async Task<IGetLivePlaysApiResponse?> GetLivePlaysOrDefaultAsync(int gameId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLivePlaysAsync(gameId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Queries live play-by-play data and advanced stats
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game Id filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLivePlaysApiResponse"/>&gt;</returns>
        public async Task<IGetLivePlaysApiResponse> GetLivePlaysAsync(int gameId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetLivePlays(ref gameId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/live/plays";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["gameId"] = ClientUtils.ParameterToString(gameId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLivePlaysApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLivePlaysApiResponse>();

                        GetLivePlaysApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/live/plays", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLivePlaysDefaultImplementation(apiResponseLocalVar, gameId);

                        Events.ExecuteOnGetLivePlays(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLivePlaysDefaultImplementation(e, "/live/plays", uriBuilderLocalVar.Path, gameId);
                Events.ExecuteOnErrorGetLivePlays(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLivePlaysApiResponse"/>
        /// </summary>
        public partial class GetLivePlaysApiResponse : CollegeFootballData.Client.ApiResponse, IGetLivePlaysApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLivePlaysApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLivePlaysApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLivePlaysApiResponse(ILogger<GetLivePlaysApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public CollegeFootballData.Model.LiveGame? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<CollegeFootballData.Model.LiveGame>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out CollegeFootballData.Model.LiveGame? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPlayStatTypesDefaultImplementation(IGetPlayStatTypesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayStatTypes(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPlayStatTypes(ref bool suppressDefaultLog, IGetPlayStatTypesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetPlayStatTypesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlayStatTypes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetPlayStatTypes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Retrieves available play stat types
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayStatTypesApiResponse"/>&gt;</returns>
        public async Task<IGetPlayStatTypesApiResponse?> GetPlayStatTypesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayStatTypesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves available play stat types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayStatTypesApiResponse"/>&gt;</returns>
        public async Task<IGetPlayStatTypesApiResponse> GetPlayStatTypesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/plays/stats/types";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayStatTypesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayStatTypesApiResponse>();

                        GetPlayStatTypesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/plays/stats/types", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayStatTypesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPlayStatTypes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayStatTypesDefaultImplementation(e, "/plays/stats/types", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPlayStatTypes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayStatTypesApiResponse"/>
        /// </summary>
        public partial class GetPlayStatTypesApiResponse : CollegeFootballData.Client.ApiResponse, IGetPlayStatTypesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayStatTypesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayStatTypesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayStatTypesApiResponse(ILogger<GetPlayStatTypesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayStatType>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayStatType>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayStatType>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPlayStats(ref Option<int> year, ref Option<int> week, ref Option<string> team, ref Option<int> gameId, ref Option<int> athleteId, ref Option<int> statTypeId, ref Option<SeasonType> seasonType, ref Option<string> conference);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetPlayStats(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="gameId"></param>
        /// <param name="athleteId"></param>
        /// <param name="statTypeId"></param>
        /// <param name="seasonType"></param>
        /// <param name="conference"></param>
        private void AfterGetPlayStatsDefaultImplementation(IGetPlayStatsApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<int> gameId, Option<int> athleteId, Option<int> statTypeId, Option<SeasonType> seasonType, Option<string> conference)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayStats(ref suppressDefaultLog, apiResponseLocalVar, year, week, team, gameId, athleteId, statTypeId, seasonType, conference);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="gameId"></param>
        /// <param name="athleteId"></param>
        /// <param name="statTypeId"></param>
        /// <param name="seasonType"></param>
        /// <param name="conference"></param>
        partial void AfterGetPlayStats(ref bool suppressDefaultLog, IGetPlayStatsApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<int> gameId, Option<int> athleteId, Option<int> statTypeId, Option<SeasonType> seasonType, Option<string> conference);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="gameId"></param>
        /// <param name="athleteId"></param>
        /// <param name="statTypeId"></param>
        /// <param name="seasonType"></param>
        /// <param name="conference"></param>
        private void OnErrorGetPlayStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<int> gameId, Option<int> athleteId, Option<int> statTypeId, Option<SeasonType> seasonType, Option<string> conference)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlayStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, week, team, gameId, athleteId, statTypeId, seasonType, conference);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="gameId"></param>
        /// <param name="athleteId"></param>
        /// <param name="statTypeId"></param>
        /// <param name="seasonType"></param>
        /// <param name="conference"></param>
        partial void OnErrorGetPlayStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<string> team, Option<int> gameId, Option<int> athleteId, Option<int> statTypeId, Option<SeasonType> seasonType, Option<string> conference);

        /// <summary>
        ///  Retrieve player-play associations (limit 2000)
        /// </summary>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="gameId">Optional gameId filter (optional)</param>
        /// <param name="athleteId">Optional athleteId filter (optional)</param>
        /// <param name="statTypeId">Optional statTypeId filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayStatsApiResponse"/>&gt;</returns>
        public async Task<IGetPlayStatsApiResponse?> GetPlayStatsOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<int> gameId = default, Option<int> athleteId = default, Option<int> statTypeId = default, Option<SeasonType> seasonType = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayStatsAsync(year, week, team, gameId, athleteId, statTypeId, seasonType, conference, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve player-play associations (limit 2000)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="gameId">Optional gameId filter (optional)</param>
        /// <param name="athleteId">Optional athleteId filter (optional)</param>
        /// <param name="statTypeId">Optional statTypeId filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayStatsApiResponse"/>&gt;</returns>
        public async Task<IGetPlayStatsApiResponse> GetPlayStatsAsync(Option<int> year = default, Option<int> week = default, Option<string> team = default, Option<int> gameId = default, Option<int> athleteId = default, Option<int> statTypeId = default, Option<SeasonType> seasonType = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPlayStats(team, conference);

                FormatGetPlayStats(ref year, ref week, ref team, ref gameId, ref athleteId, ref statTypeId, ref seasonType, ref conference);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/plays/stats";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (gameId.IsSet)
                        parseQueryStringLocalVar["gameId"] = ClientUtils.ParameterToString(gameId.Value);

                    if (athleteId.IsSet)
                        parseQueryStringLocalVar["athleteId"] = ClientUtils.ParameterToString(athleteId.Value);

                    if (statTypeId.IsSet)
                        parseQueryStringLocalVar["statTypeId"] = ClientUtils.ParameterToString(statTypeId.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayStatsApiResponse>();

                        GetPlayStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/plays/stats", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayStatsDefaultImplementation(apiResponseLocalVar, year, week, team, gameId, athleteId, statTypeId, seasonType, conference);

                        Events.ExecuteOnGetPlayStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayStatsDefaultImplementation(e, "/plays/stats", uriBuilderLocalVar.Path, year, week, team, gameId, athleteId, statTypeId, seasonType, conference);
                Events.ExecuteOnErrorGetPlayStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayStatsApiResponse"/>
        /// </summary>
        public partial class GetPlayStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetPlayStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayStatsApiResponse(ILogger<GetPlayStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayStat>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayStat>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayStat>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPlayTypesDefaultImplementation(IGetPlayTypesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayTypes(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPlayTypes(ref bool suppressDefaultLog, IGetPlayTypesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetPlayTypesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlayTypes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetPlayTypes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Retrieves available play types
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayTypesApiResponse"/>&gt;</returns>
        public async Task<IGetPlayTypesApiResponse?> GetPlayTypesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayTypesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves available play types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayTypesApiResponse"/>&gt;</returns>
        public async Task<IGetPlayTypesApiResponse> GetPlayTypesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/plays/types";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayTypesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayTypesApiResponse>();

                        GetPlayTypesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/plays/types", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayTypesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPlayTypes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayTypesDefaultImplementation(e, "/plays/types", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPlayTypes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayTypesApiResponse"/>
        /// </summary>
        public partial class GetPlayTypesApiResponse : CollegeFootballData.Client.ApiResponse, IGetPlayTypesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayTypesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayTypesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayTypesApiResponse(ILogger<GetPlayTypesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayType>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayType>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayType>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPlays(ref int year, ref int week, ref Option<string> team, ref Option<string> offense, ref Option<string> defense, ref Option<string> offenseConference, ref Option<string> defenseConference, ref Option<string> conference, ref Option<string> playType, ref Option<SeasonType> seasonType, ref Option<DivisionClassification> classification);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="offense"></param>
        /// <param name="defense"></param>
        /// <param name="offenseConference"></param>
        /// <param name="defenseConference"></param>
        /// <param name="conference"></param>
        /// <param name="playType"></param>
        /// <returns></returns>
        private void ValidateGetPlays(Option<string> team, Option<string> offense, Option<string> defense, Option<string> offenseConference, Option<string> defenseConference, Option<string> conference, Option<string> playType)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (offense.IsSet && offense.Value == null)
                throw new ArgumentNullException(nameof(offense));

            if (defense.IsSet && defense.Value == null)
                throw new ArgumentNullException(nameof(defense));

            if (offenseConference.IsSet && offenseConference.Value == null)
                throw new ArgumentNullException(nameof(offenseConference));

            if (defenseConference.IsSet && defenseConference.Value == null)
                throw new ArgumentNullException(nameof(defenseConference));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));

            if (playType.IsSet && playType.Value == null)
                throw new ArgumentNullException(nameof(playType));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="offense"></param>
        /// <param name="defense"></param>
        /// <param name="offenseConference"></param>
        /// <param name="defenseConference"></param>
        /// <param name="conference"></param>
        /// <param name="playType"></param>
        /// <param name="seasonType"></param>
        /// <param name="classification"></param>
        private void AfterGetPlaysDefaultImplementation(IGetPlaysApiResponse apiResponseLocalVar, int year, int week, Option<string> team, Option<string> offense, Option<string> defense, Option<string> offenseConference, Option<string> defenseConference, Option<string> conference, Option<string> playType, Option<SeasonType> seasonType, Option<DivisionClassification> classification)
        {
            bool suppressDefaultLog = false;
            AfterGetPlays(ref suppressDefaultLog, apiResponseLocalVar, year, week, team, offense, defense, offenseConference, defenseConference, conference, playType, seasonType, classification);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="offense"></param>
        /// <param name="defense"></param>
        /// <param name="offenseConference"></param>
        /// <param name="defenseConference"></param>
        /// <param name="conference"></param>
        /// <param name="playType"></param>
        /// <param name="seasonType"></param>
        /// <param name="classification"></param>
        partial void AfterGetPlays(ref bool suppressDefaultLog, IGetPlaysApiResponse apiResponseLocalVar, int year, int week, Option<string> team, Option<string> offense, Option<string> defense, Option<string> offenseConference, Option<string> defenseConference, Option<string> conference, Option<string> playType, Option<SeasonType> seasonType, Option<DivisionClassification> classification);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="offense"></param>
        /// <param name="defense"></param>
        /// <param name="offenseConference"></param>
        /// <param name="defenseConference"></param>
        /// <param name="conference"></param>
        /// <param name="playType"></param>
        /// <param name="seasonType"></param>
        /// <param name="classification"></param>
        private void OnErrorGetPlaysDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, int week, Option<string> team, Option<string> offense, Option<string> defense, Option<string> offenseConference, Option<string> defenseConference, Option<string> conference, Option<string> playType, Option<SeasonType> seasonType, Option<DivisionClassification> classification)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlays(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, week, team, offense, defense, offenseConference, defenseConference, conference, playType, seasonType, classification);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="team"></param>
        /// <param name="offense"></param>
        /// <param name="defense"></param>
        /// <param name="offenseConference"></param>
        /// <param name="defenseConference"></param>
        /// <param name="conference"></param>
        /// <param name="playType"></param>
        /// <param name="seasonType"></param>
        /// <param name="classification"></param>
        partial void OnErrorGetPlays(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, int week, Option<string> team, Option<string> offense, Option<string> defense, Option<string> offenseConference, Option<string> defenseConference, Option<string> conference, Option<string> playType, Option<SeasonType> seasonType, Option<DivisionClassification> classification);

        /// <summary>
        ///  Retrieves historical play data
        /// </summary>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Required week filter</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="offense">Optional offensive team filter (optional)</param>
        /// <param name="defense">Optional defensive team filter (optional)</param>
        /// <param name="offenseConference">Optional offensive conference filter (optional)</param>
        /// <param name="defenseConference">Optional defensive conference filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="playType">Optoinal play type abbreviation filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlaysApiResponse"/>&gt;</returns>
        public async Task<IGetPlaysApiResponse?> GetPlaysOrDefaultAsync(int year, int week, Option<string> team = default, Option<string> offense = default, Option<string> defense = default, Option<string> offenseConference = default, Option<string> defenseConference = default, Option<string> conference = default, Option<string> playType = default, Option<SeasonType> seasonType = default, Option<DivisionClassification> classification = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlaysAsync(year, week, team, offense, defense, offenseConference, defenseConference, conference, playType, seasonType, classification, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves historical play data
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Required week filter</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="offense">Optional offensive team filter (optional)</param>
        /// <param name="defense">Optional defensive team filter (optional)</param>
        /// <param name="offenseConference">Optional offensive conference filter (optional)</param>
        /// <param name="defenseConference">Optional defensive conference filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="playType">Optoinal play type abbreviation filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="classification">Optional division classification filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlaysApiResponse"/>&gt;</returns>
        public async Task<IGetPlaysApiResponse> GetPlaysAsync(int year, int week, Option<string> team = default, Option<string> offense = default, Option<string> defense = default, Option<string> offenseConference = default, Option<string> defenseConference = default, Option<string> conference = default, Option<string> playType = default, Option<SeasonType> seasonType = default, Option<DivisionClassification> classification = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPlays(team, offense, defense, offenseConference, defenseConference, conference, playType);

                FormatGetPlays(ref year, ref week, ref team, ref offense, ref defense, ref offenseConference, ref defenseConference, ref conference, ref playType, ref seasonType, ref classification);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/plays";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);
                    parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (offense.IsSet)
                        parseQueryStringLocalVar["offense"] = ClientUtils.ParameterToString(offense.Value);

                    if (defense.IsSet)
                        parseQueryStringLocalVar["defense"] = ClientUtils.ParameterToString(defense.Value);

                    if (offenseConference.IsSet)
                        parseQueryStringLocalVar["offenseConference"] = ClientUtils.ParameterToString(offenseConference.Value);

                    if (defenseConference.IsSet)
                        parseQueryStringLocalVar["defenseConference"] = ClientUtils.ParameterToString(defenseConference.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (playType.IsSet)
                        parseQueryStringLocalVar["playType"] = ClientUtils.ParameterToString(playType.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (classification.IsSet)
                        parseQueryStringLocalVar["classification"] = ClientUtils.ParameterToString(classification.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlaysApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlaysApiResponse>();

                        GetPlaysApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/plays", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlaysDefaultImplementation(apiResponseLocalVar, year, week, team, offense, defense, offenseConference, defenseConference, conference, playType, seasonType, classification);

                        Events.ExecuteOnGetPlays(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlaysDefaultImplementation(e, "/plays", uriBuilderLocalVar.Path, year, week, team, offense, defense, offenseConference, defenseConference, conference, playType, seasonType, classification);
                Events.ExecuteOnErrorGetPlays(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlaysApiResponse"/>
        /// </summary>
        public partial class GetPlaysApiResponse : CollegeFootballData.Client.ApiResponse, IGetPlaysApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlaysApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlaysApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlaysApiResponse(ILogger<GetPlaysApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Play>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Play>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Play>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
