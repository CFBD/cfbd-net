// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.19
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CollegeFootballData.Client;
using CollegeFootballData.Model;
using System.Diagnostics.CodeAnalysis;

namespace CollegeFootballData.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IRecruitingApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        RecruitingApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated recruiting statistics by team and position grouping
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="recruitType">Optional recruit type filter, defaults to HighSchool (optional)</param>
        /// <param name="startYear">Optional start year range, defaults to 2000 (optional)</param>
        /// <param name="endYear">Optional end year range, defaults to current year (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAggregatedTeamRecruitingRatingsApiResponse"/>&gt;</returns>
        Task<IGetAggregatedTeamRecruitingRatingsApiResponse> GetAggregatedTeamRecruitingRatingsAsync(Option<string> team = default, Option<string> conference = default, Option<RecruitClassification> recruitType = default, Option<int> startYear = default, Option<int> endYear = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated recruiting statistics by team and position grouping
        /// </remarks>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="recruitType">Optional recruit type filter, defaults to HighSchool (optional)</param>
        /// <param name="startYear">Optional start year range, defaults to 2000 (optional)</param>
        /// <param name="endYear">Optional end year range, defaults to current year (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAggregatedTeamRecruitingRatingsApiResponse"/>?&gt;</returns>
        Task<IGetAggregatedTeamRecruitingRatingsApiResponse?> GetAggregatedTeamRecruitingRatingsOrDefaultAsync(Option<string> team = default, Option<string> conference = default, Option<RecruitClassification> recruitType = default, Option<int> startYear = default, Option<int> endYear = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player recruiting rankings
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required when no team specified (optional)</param>
        /// <param name="team">Team filter, required when no team specified (optional)</param>
        /// <param name="position">Optional position categorization filter (optional)</param>
        /// <param name="state">Optional state/province filter (optional)</param>
        /// <param name="classification">Optional recruit type classification filter, defaults to HighSchool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecruitsApiResponse"/>&gt;</returns>
        Task<IGetRecruitsApiResponse> GetRecruitsAsync(Option<int> year = default, Option<string> team = default, Option<string> position = default, Option<string> state = default, Option<RecruitClassification> classification = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player recruiting rankings
        /// </remarks>
        /// <param name="year">Year filter, required when no team specified (optional)</param>
        /// <param name="team">Team filter, required when no team specified (optional)</param>
        /// <param name="position">Optional position categorization filter (optional)</param>
        /// <param name="state">Optional state/province filter (optional)</param>
        /// <param name="classification">Optional recruit type classification filter, defaults to HighSchool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecruitsApiResponse"/>?&gt;</returns>
        Task<IGetRecruitsApiResponse?> GetRecruitsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> position = default, Option<string> state = default, Option<RecruitClassification> classification = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves team recruiting rankings
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTeamRecruitingRankingsApiResponse"/>&gt;</returns>
        Task<IGetTeamRecruitingRankingsApiResponse> GetTeamRecruitingRankingsAsync(Option<int> year = default, Option<string> team = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves team recruiting rankings
        /// </remarks>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTeamRecruitingRankingsApiResponse"/>?&gt;</returns>
        Task<IGetTeamRecruitingRankingsApiResponse?> GetTeamRecruitingRankingsOrDefaultAsync(Option<int> year = default, Option<string> team = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAggregatedTeamRecruitingRatingsApiResponse"/>
    /// </summary>
    public interface IGetAggregatedTeamRecruitingRatingsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<AggregatedTeamRecruiting>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetRecruitsApiResponse"/>
    /// </summary>
    public interface IGetRecruitsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<Recruit>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTeamRecruitingRankingsApiResponse"/>
    /// </summary>
    public interface IGetTeamRecruitingRankingsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<TeamRecruitingRanking>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RecruitingApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAggregatedTeamRecruitingRatings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAggregatedTeamRecruitingRatings;

        internal void ExecuteOnGetAggregatedTeamRecruitingRatings(RecruitingApi.GetAggregatedTeamRecruitingRatingsApiResponse apiResponse)
        {
            OnGetAggregatedTeamRecruitingRatings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAggregatedTeamRecruitingRatings(Exception exception)
        {
            OnErrorGetAggregatedTeamRecruitingRatings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRecruits;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRecruits;

        internal void ExecuteOnGetRecruits(RecruitingApi.GetRecruitsApiResponse apiResponse)
        {
            OnGetRecruits?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRecruits(Exception exception)
        {
            OnErrorGetRecruits?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTeamRecruitingRankings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTeamRecruitingRankings;

        internal void ExecuteOnGetTeamRecruitingRankings(RecruitingApi.GetTeamRecruitingRankingsApiResponse apiResponse)
        {
            OnGetTeamRecruitingRankings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTeamRecruitingRankings(Exception exception)
        {
            OnErrorGetTeamRecruitingRankings?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class RecruitingApi : IRecruitingApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<RecruitingApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public RecruitingApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecruitingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecruitingApi(ILogger<RecruitingApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, RecruitingApiEvents recruitingApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<RecruitingApi>();
            HttpClient = httpClient;
            Events = recruitingApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetAggregatedTeamRecruitingRatings(ref Option<string> team, ref Option<string> conference, ref Option<RecruitClassification> recruitType, ref Option<int> startYear, ref Option<int> endYear);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetAggregatedTeamRecruitingRatings(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="recruitType"></param>
        /// <param name="startYear"></param>
        /// <param name="endYear"></param>
        private void AfterGetAggregatedTeamRecruitingRatingsDefaultImplementation(IGetAggregatedTeamRecruitingRatingsApiResponse apiResponseLocalVar, Option<string> team, Option<string> conference, Option<RecruitClassification> recruitType, Option<int> startYear, Option<int> endYear)
        {
            bool suppressDefaultLog = false;
            AfterGetAggregatedTeamRecruitingRatings(ref suppressDefaultLog, apiResponseLocalVar, team, conference, recruitType, startYear, endYear);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="recruitType"></param>
        /// <param name="startYear"></param>
        /// <param name="endYear"></param>
        partial void AfterGetAggregatedTeamRecruitingRatings(ref bool suppressDefaultLog, IGetAggregatedTeamRecruitingRatingsApiResponse apiResponseLocalVar, Option<string> team, Option<string> conference, Option<RecruitClassification> recruitType, Option<int> startYear, Option<int> endYear);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="recruitType"></param>
        /// <param name="startYear"></param>
        /// <param name="endYear"></param>
        private void OnErrorGetAggregatedTeamRecruitingRatingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> team, Option<string> conference, Option<RecruitClassification> recruitType, Option<int> startYear, Option<int> endYear)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAggregatedTeamRecruitingRatings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, team, conference, recruitType, startYear, endYear);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="recruitType"></param>
        /// <param name="startYear"></param>
        /// <param name="endYear"></param>
        partial void OnErrorGetAggregatedTeamRecruitingRatings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> team, Option<string> conference, Option<RecruitClassification> recruitType, Option<int> startYear, Option<int> endYear);

        /// <summary>
        ///  Retrieves aggregated recruiting statistics by team and position grouping
        /// </summary>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="recruitType">Optional recruit type filter, defaults to HighSchool (optional)</param>
        /// <param name="startYear">Optional start year range, defaults to 2000 (optional)</param>
        /// <param name="endYear">Optional end year range, defaults to current year (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAggregatedTeamRecruitingRatingsApiResponse"/>&gt;</returns>
        public async Task<IGetAggregatedTeamRecruitingRatingsApiResponse?> GetAggregatedTeamRecruitingRatingsOrDefaultAsync(Option<string> team = default, Option<string> conference = default, Option<RecruitClassification> recruitType = default, Option<int> startYear = default, Option<int> endYear = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAggregatedTeamRecruitingRatingsAsync(team, conference, recruitType, startYear, endYear, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves aggregated recruiting statistics by team and position grouping
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="recruitType">Optional recruit type filter, defaults to HighSchool (optional)</param>
        /// <param name="startYear">Optional start year range, defaults to 2000 (optional)</param>
        /// <param name="endYear">Optional end year range, defaults to current year (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAggregatedTeamRecruitingRatingsApiResponse"/>&gt;</returns>
        public async Task<IGetAggregatedTeamRecruitingRatingsApiResponse> GetAggregatedTeamRecruitingRatingsAsync(Option<string> team = default, Option<string> conference = default, Option<RecruitClassification> recruitType = default, Option<int> startYear = default, Option<int> endYear = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAggregatedTeamRecruitingRatings(team, conference);

                FormatGetAggregatedTeamRecruitingRatings(ref team, ref conference, ref recruitType, ref startYear, ref endYear);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/recruiting/groups";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (recruitType.IsSet)
                        parseQueryStringLocalVar["recruitType"] = ClientUtils.ParameterToString(recruitType.Value);

                    if (startYear.IsSet)
                        parseQueryStringLocalVar["startYear"] = ClientUtils.ParameterToString(startYear.Value);

                    if (endYear.IsSet)
                        parseQueryStringLocalVar["endYear"] = ClientUtils.ParameterToString(endYear.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAggregatedTeamRecruitingRatingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAggregatedTeamRecruitingRatingsApiResponse>();

                        GetAggregatedTeamRecruitingRatingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/recruiting/groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAggregatedTeamRecruitingRatingsDefaultImplementation(apiResponseLocalVar, team, conference, recruitType, startYear, endYear);

                        Events.ExecuteOnGetAggregatedTeamRecruitingRatings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAggregatedTeamRecruitingRatingsDefaultImplementation(e, "/recruiting/groups", uriBuilderLocalVar.Path, team, conference, recruitType, startYear, endYear);
                Events.ExecuteOnErrorGetAggregatedTeamRecruitingRatings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAggregatedTeamRecruitingRatingsApiResponse"/>
        /// </summary>
        public partial class GetAggregatedTeamRecruitingRatingsApiResponse : CollegeFootballData.Client.ApiResponse, IGetAggregatedTeamRecruitingRatingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAggregatedTeamRecruitingRatingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAggregatedTeamRecruitingRatingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAggregatedTeamRecruitingRatingsApiResponse(ILogger<GetAggregatedTeamRecruitingRatingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AggregatedTeamRecruiting>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AggregatedTeamRecruiting>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AggregatedTeamRecruiting>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRecruits(ref Option<int> year, ref Option<string> team, ref Option<string> position, ref Option<string> state, ref Option<RecruitClassification> classification);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="state"></param>
        /// <returns></returns>
        private void ValidateGetRecruits(Option<string> team, Option<string> position, Option<string> state)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position));

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="state"></param>
        /// <param name="classification"></param>
        private void AfterGetRecruitsDefaultImplementation(IGetRecruitsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> position, Option<string> state, Option<RecruitClassification> classification)
        {
            bool suppressDefaultLog = false;
            AfterGetRecruits(ref suppressDefaultLog, apiResponseLocalVar, year, team, position, state, classification);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="state"></param>
        /// <param name="classification"></param>
        partial void AfterGetRecruits(ref bool suppressDefaultLog, IGetRecruitsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> position, Option<string> state, Option<RecruitClassification> classification);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="state"></param>
        /// <param name="classification"></param>
        private void OnErrorGetRecruitsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> position, Option<string> state, Option<RecruitClassification> classification)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRecruits(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, position, state, classification);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="state"></param>
        /// <param name="classification"></param>
        partial void OnErrorGetRecruits(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> position, Option<string> state, Option<RecruitClassification> classification);

        /// <summary>
        ///  Retrieves player recruiting rankings
        /// </summary>
        /// <param name="year">Year filter, required when no team specified (optional)</param>
        /// <param name="team">Team filter, required when no team specified (optional)</param>
        /// <param name="position">Optional position categorization filter (optional)</param>
        /// <param name="state">Optional state/province filter (optional)</param>
        /// <param name="classification">Optional recruit type classification filter, defaults to HighSchool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecruitsApiResponse"/>&gt;</returns>
        public async Task<IGetRecruitsApiResponse?> GetRecruitsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> position = default, Option<string> state = default, Option<RecruitClassification> classification = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRecruitsAsync(year, team, position, state, classification, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves player recruiting rankings
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required when no team specified (optional)</param>
        /// <param name="team">Team filter, required when no team specified (optional)</param>
        /// <param name="position">Optional position categorization filter (optional)</param>
        /// <param name="state">Optional state/province filter (optional)</param>
        /// <param name="classification">Optional recruit type classification filter, defaults to HighSchool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecruitsApiResponse"/>&gt;</returns>
        public async Task<IGetRecruitsApiResponse> GetRecruitsAsync(Option<int> year = default, Option<string> team = default, Option<string> position = default, Option<string> state = default, Option<RecruitClassification> classification = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRecruits(team, position, state);

                FormatGetRecruits(ref year, ref team, ref position, ref state, ref classification);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/recruiting/players";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (position.IsSet)
                        parseQueryStringLocalVar["position"] = ClientUtils.ParameterToString(position.Value);

                    if (state.IsSet)
                        parseQueryStringLocalVar["state"] = ClientUtils.ParameterToString(state.Value);

                    if (classification.IsSet)
                        parseQueryStringLocalVar["classification"] = ClientUtils.ParameterToString(classification.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRecruitsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRecruitsApiResponse>();

                        GetRecruitsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/recruiting/players", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRecruitsDefaultImplementation(apiResponseLocalVar, year, team, position, state, classification);

                        Events.ExecuteOnGetRecruits(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRecruitsDefaultImplementation(e, "/recruiting/players", uriBuilderLocalVar.Path, year, team, position, state, classification);
                Events.ExecuteOnErrorGetRecruits(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRecruitsApiResponse"/>
        /// </summary>
        public partial class GetRecruitsApiResponse : CollegeFootballData.Client.ApiResponse, IGetRecruitsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRecruitsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRecruitsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRecruitsApiResponse(ILogger<GetRecruitsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Recruit>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Recruit>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Recruit>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTeamRecruitingRankings(ref Option<int> year, ref Option<string> team);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <returns></returns>
        private void ValidateGetTeamRecruitingRankings(Option<string> team)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        private void AfterGetTeamRecruitingRankingsDefaultImplementation(IGetTeamRecruitingRankingsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team)
        {
            bool suppressDefaultLog = false;
            AfterGetTeamRecruitingRankings(ref suppressDefaultLog, apiResponseLocalVar, year, team);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        partial void AfterGetTeamRecruitingRankings(ref bool suppressDefaultLog, IGetTeamRecruitingRankingsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        private void OnErrorGetTeamRecruitingRankingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTeamRecruitingRankings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        partial void OnErrorGetTeamRecruitingRankings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team);

        /// <summary>
        ///  Retrieves team recruiting rankings
        /// </summary>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTeamRecruitingRankingsApiResponse"/>&gt;</returns>
        public async Task<IGetTeamRecruitingRankingsApiResponse?> GetTeamRecruitingRankingsOrDefaultAsync(Option<int> year = default, Option<string> team = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTeamRecruitingRankingsAsync(year, team, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves team recruiting rankings
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTeamRecruitingRankingsApiResponse"/>&gt;</returns>
        public async Task<IGetTeamRecruitingRankingsApiResponse> GetTeamRecruitingRankingsAsync(Option<int> year = default, Option<string> team = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTeamRecruitingRankings(team);

                FormatGetTeamRecruitingRankings(ref year, ref team);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/recruiting/teams";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTeamRecruitingRankingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTeamRecruitingRankingsApiResponse>();

                        GetTeamRecruitingRankingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/recruiting/teams", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTeamRecruitingRankingsDefaultImplementation(apiResponseLocalVar, year, team);

                        Events.ExecuteOnGetTeamRecruitingRankings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTeamRecruitingRankingsDefaultImplementation(e, "/recruiting/teams", uriBuilderLocalVar.Path, year, team);
                Events.ExecuteOnErrorGetTeamRecruitingRankings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTeamRecruitingRankingsApiResponse"/>
        /// </summary>
        public partial class GetTeamRecruitingRankingsApiResponse : CollegeFootballData.Client.ApiResponse, IGetTeamRecruitingRankingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTeamRecruitingRankingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTeamRecruitingRankingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTeamRecruitingRankingsApiResponse(ILogger<GetTeamRecruitingRankingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TeamRecruitingRanking>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TeamRecruitingRanking>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TeamRecruitingRanking>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
