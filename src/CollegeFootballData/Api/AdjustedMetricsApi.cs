// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.14
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CollegeFootballData.Client;
using CollegeFootballData.Model;
using System.Diagnostics.CodeAnalysis;

namespace CollegeFootballData.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAdjustedMetricsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AdjustedMetricsApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve opponent-adjusted player passing statistics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedPlayerPassingStatsApiResponse"/>&gt;</returns>
        Task<IGetAdjustedPlayerPassingStatsApiResponse> GetAdjustedPlayerPassingStatsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve opponent-adjusted player passing statistics
        /// </remarks>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedPlayerPassingStatsApiResponse"/>?&gt;</returns>
        Task<IGetAdjustedPlayerPassingStatsApiResponse?> GetAdjustedPlayerPassingStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve opponent-adjusted player rushing statistics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedPlayerRushingStatsApiResponse"/>&gt;</returns>
        Task<IGetAdjustedPlayerRushingStatsApiResponse> GetAdjustedPlayerRushingStatsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve opponent-adjusted player rushing statistics
        /// </remarks>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedPlayerRushingStatsApiResponse"/>?&gt;</returns>
        Task<IGetAdjustedPlayerRushingStatsApiResponse?> GetAdjustedPlayerRushingStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve opponent-adjusted team season statistics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedTeamSeasonStatsApiResponse"/>&gt;</returns>
        Task<IGetAdjustedTeamSeasonStatsApiResponse> GetAdjustedTeamSeasonStatsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve opponent-adjusted team season statistics
        /// </remarks>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedTeamSeasonStatsApiResponse"/>?&gt;</returns>
        Task<IGetAdjustedTeamSeasonStatsApiResponse?> GetAdjustedTeamSeasonStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Points Added Above Replacement (PAAR) ratings for kickers
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKickerPaarApiResponse"/>&gt;</returns>
        Task<IGetKickerPaarApiResponse> GetKickerPaarAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Points Added Above Replacement (PAAR) ratings for kickers
        /// </remarks>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKickerPaarApiResponse"/>?&gt;</returns>
        Task<IGetKickerPaarApiResponse?> GetKickerPaarOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAdjustedPlayerPassingStatsApiResponse"/>
    /// </summary>
    public interface IGetAdjustedPlayerPassingStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayerWeightedEPA>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAdjustedPlayerRushingStatsApiResponse"/>
    /// </summary>
    public interface IGetAdjustedPlayerRushingStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayerWeightedEPA>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAdjustedTeamSeasonStatsApiResponse"/>
    /// </summary>
    public interface IGetAdjustedTeamSeasonStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<AdjustedTeamMetrics>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetKickerPaarApiResponse"/>
    /// </summary>
    public interface IGetKickerPaarApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<KickerPAAR>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AdjustedMetricsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAdjustedPlayerPassingStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAdjustedPlayerPassingStats;

        internal void ExecuteOnGetAdjustedPlayerPassingStats(AdjustedMetricsApi.GetAdjustedPlayerPassingStatsApiResponse apiResponse)
        {
            OnGetAdjustedPlayerPassingStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAdjustedPlayerPassingStats(Exception exception)
        {
            OnErrorGetAdjustedPlayerPassingStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAdjustedPlayerRushingStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAdjustedPlayerRushingStats;

        internal void ExecuteOnGetAdjustedPlayerRushingStats(AdjustedMetricsApi.GetAdjustedPlayerRushingStatsApiResponse apiResponse)
        {
            OnGetAdjustedPlayerRushingStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAdjustedPlayerRushingStats(Exception exception)
        {
            OnErrorGetAdjustedPlayerRushingStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAdjustedTeamSeasonStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAdjustedTeamSeasonStats;

        internal void ExecuteOnGetAdjustedTeamSeasonStats(AdjustedMetricsApi.GetAdjustedTeamSeasonStatsApiResponse apiResponse)
        {
            OnGetAdjustedTeamSeasonStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAdjustedTeamSeasonStats(Exception exception)
        {
            OnErrorGetAdjustedTeamSeasonStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetKickerPaar;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetKickerPaar;

        internal void ExecuteOnGetKickerPaar(AdjustedMetricsApi.GetKickerPaarApiResponse apiResponse)
        {
            OnGetKickerPaar?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetKickerPaar(Exception exception)
        {
            OnErrorGetKickerPaar?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AdjustedMetricsApi : IAdjustedMetricsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AdjustedMetricsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AdjustedMetricsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdjustedMetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdjustedMetricsApi(ILogger<AdjustedMetricsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AdjustedMetricsApiEvents adjustedMetricsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AdjustedMetricsApi>();
            HttpClient = httpClient;
            Events = adjustedMetricsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetAdjustedPlayerPassingStats(ref Option<int> year, ref Option<string> team, ref Option<string> conference, ref Option<string> position);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        /// <returns></returns>
        private void ValidateGetAdjustedPlayerPassingStats(Option<string> team, Option<string> conference, Option<string> position)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        private void AfterGetAdjustedPlayerPassingStatsDefaultImplementation(IGetAdjustedPlayerPassingStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<string> position)
        {
            bool suppressDefaultLog = false;
            AfterGetAdjustedPlayerPassingStats(ref suppressDefaultLog, apiResponseLocalVar, year, team, conference, position);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        partial void AfterGetAdjustedPlayerPassingStats(ref bool suppressDefaultLog, IGetAdjustedPlayerPassingStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<string> position);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        private void OnErrorGetAdjustedPlayerPassingStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<string> position)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAdjustedPlayerPassingStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, conference, position);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        partial void OnErrorGetAdjustedPlayerPassingStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<string> position);

        /// <summary>
        ///  Retrieve opponent-adjusted player passing statistics
        /// </summary>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedPlayerPassingStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdjustedPlayerPassingStatsApiResponse?> GetAdjustedPlayerPassingStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAdjustedPlayerPassingStatsAsync(year, team, conference, position, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve opponent-adjusted player passing statistics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedPlayerPassingStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdjustedPlayerPassingStatsApiResponse> GetAdjustedPlayerPassingStatsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAdjustedPlayerPassingStats(team, conference, position);

                FormatGetAdjustedPlayerPassingStats(ref year, ref team, ref conference, ref position);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/wepa/players/passing";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (position.IsSet)
                        parseQueryStringLocalVar["position"] = ClientUtils.ParameterToString(position.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAdjustedPlayerPassingStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAdjustedPlayerPassingStatsApiResponse>();

                        GetAdjustedPlayerPassingStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/wepa/players/passing", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAdjustedPlayerPassingStatsDefaultImplementation(apiResponseLocalVar, year, team, conference, position);

                        Events.ExecuteOnGetAdjustedPlayerPassingStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAdjustedPlayerPassingStatsDefaultImplementation(e, "/wepa/players/passing", uriBuilderLocalVar.Path, year, team, conference, position);
                Events.ExecuteOnErrorGetAdjustedPlayerPassingStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAdjustedPlayerPassingStatsApiResponse"/>
        /// </summary>
        public partial class GetAdjustedPlayerPassingStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetAdjustedPlayerPassingStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAdjustedPlayerPassingStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAdjustedPlayerPassingStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAdjustedPlayerPassingStatsApiResponse(ILogger<GetAdjustedPlayerPassingStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayerWeightedEPA>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayerWeightedEPA>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayerWeightedEPA>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAdjustedPlayerRushingStats(ref Option<int> year, ref Option<string> team, ref Option<string> conference, ref Option<string> position);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        /// <returns></returns>
        private void ValidateGetAdjustedPlayerRushingStats(Option<string> team, Option<string> conference, Option<string> position)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        private void AfterGetAdjustedPlayerRushingStatsDefaultImplementation(IGetAdjustedPlayerRushingStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<string> position)
        {
            bool suppressDefaultLog = false;
            AfterGetAdjustedPlayerRushingStats(ref suppressDefaultLog, apiResponseLocalVar, year, team, conference, position);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        partial void AfterGetAdjustedPlayerRushingStats(ref bool suppressDefaultLog, IGetAdjustedPlayerRushingStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<string> position);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        private void OnErrorGetAdjustedPlayerRushingStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<string> position)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAdjustedPlayerRushingStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, conference, position);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        partial void OnErrorGetAdjustedPlayerRushingStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<string> position);

        /// <summary>
        ///  Retrieve opponent-adjusted player rushing statistics
        /// </summary>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedPlayerRushingStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdjustedPlayerRushingStatsApiResponse?> GetAdjustedPlayerRushingStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAdjustedPlayerRushingStatsAsync(year, team, conference, position, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve opponent-adjusted player rushing statistics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedPlayerRushingStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdjustedPlayerRushingStatsApiResponse> GetAdjustedPlayerRushingStatsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAdjustedPlayerRushingStats(team, conference, position);

                FormatGetAdjustedPlayerRushingStats(ref year, ref team, ref conference, ref position);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/wepa/players/rushing";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (position.IsSet)
                        parseQueryStringLocalVar["position"] = ClientUtils.ParameterToString(position.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAdjustedPlayerRushingStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAdjustedPlayerRushingStatsApiResponse>();

                        GetAdjustedPlayerRushingStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/wepa/players/rushing", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAdjustedPlayerRushingStatsDefaultImplementation(apiResponseLocalVar, year, team, conference, position);

                        Events.ExecuteOnGetAdjustedPlayerRushingStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAdjustedPlayerRushingStatsDefaultImplementation(e, "/wepa/players/rushing", uriBuilderLocalVar.Path, year, team, conference, position);
                Events.ExecuteOnErrorGetAdjustedPlayerRushingStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAdjustedPlayerRushingStatsApiResponse"/>
        /// </summary>
        public partial class GetAdjustedPlayerRushingStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetAdjustedPlayerRushingStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAdjustedPlayerRushingStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAdjustedPlayerRushingStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAdjustedPlayerRushingStatsApiResponse(ILogger<GetAdjustedPlayerRushingStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayerWeightedEPA>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayerWeightedEPA>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayerWeightedEPA>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAdjustedTeamSeasonStats(ref Option<int> year, ref Option<string> team, ref Option<string> conference);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetAdjustedTeamSeasonStats(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        private void AfterGetAdjustedTeamSeasonStatsDefaultImplementation(IGetAdjustedTeamSeasonStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference)
        {
            bool suppressDefaultLog = false;
            AfterGetAdjustedTeamSeasonStats(ref suppressDefaultLog, apiResponseLocalVar, year, team, conference);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        partial void AfterGetAdjustedTeamSeasonStats(ref bool suppressDefaultLog, IGetAdjustedTeamSeasonStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        private void OnErrorGetAdjustedTeamSeasonStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAdjustedTeamSeasonStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, conference);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        partial void OnErrorGetAdjustedTeamSeasonStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference);

        /// <summary>
        ///  Retrieve opponent-adjusted team season statistics
        /// </summary>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedTeamSeasonStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdjustedTeamSeasonStatsApiResponse?> GetAdjustedTeamSeasonStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAdjustedTeamSeasonStatsAsync(year, team, conference, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve opponent-adjusted team season statistics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdjustedTeamSeasonStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdjustedTeamSeasonStatsApiResponse> GetAdjustedTeamSeasonStatsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAdjustedTeamSeasonStats(team, conference);

                FormatGetAdjustedTeamSeasonStats(ref year, ref team, ref conference);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/wepa/team/season";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAdjustedTeamSeasonStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAdjustedTeamSeasonStatsApiResponse>();

                        GetAdjustedTeamSeasonStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/wepa/team/season", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAdjustedTeamSeasonStatsDefaultImplementation(apiResponseLocalVar, year, team, conference);

                        Events.ExecuteOnGetAdjustedTeamSeasonStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAdjustedTeamSeasonStatsDefaultImplementation(e, "/wepa/team/season", uriBuilderLocalVar.Path, year, team, conference);
                Events.ExecuteOnErrorGetAdjustedTeamSeasonStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAdjustedTeamSeasonStatsApiResponse"/>
        /// </summary>
        public partial class GetAdjustedTeamSeasonStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetAdjustedTeamSeasonStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAdjustedTeamSeasonStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAdjustedTeamSeasonStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAdjustedTeamSeasonStatsApiResponse(ILogger<GetAdjustedTeamSeasonStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AdjustedTeamMetrics>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AdjustedTeamMetrics>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AdjustedTeamMetrics>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetKickerPaar(ref Option<int> year, ref Option<string> team, ref Option<string> conference);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetKickerPaar(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        private void AfterGetKickerPaarDefaultImplementation(IGetKickerPaarApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference)
        {
            bool suppressDefaultLog = false;
            AfterGetKickerPaar(ref suppressDefaultLog, apiResponseLocalVar, year, team, conference);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        partial void AfterGetKickerPaar(ref bool suppressDefaultLog, IGetKickerPaarApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        private void OnErrorGetKickerPaarDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetKickerPaar(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, conference);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        partial void OnErrorGetKickerPaar(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference);

        /// <summary>
        ///  Retrieve Points Added Above Replacement (PAAR) ratings for kickers
        /// </summary>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKickerPaarApiResponse"/>&gt;</returns>
        public async Task<IGetKickerPaarApiResponse?> GetKickerPaarOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetKickerPaarAsync(year, team, conference, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve Points Added Above Replacement (PAAR) ratings for kickers
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKickerPaarApiResponse"/>&gt;</returns>
        public async Task<IGetKickerPaarApiResponse> GetKickerPaarAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetKickerPaar(team, conference);

                FormatGetKickerPaar(ref year, ref team, ref conference);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/wepa/players/kicking";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetKickerPaarApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetKickerPaarApiResponse>();

                        GetKickerPaarApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/wepa/players/kicking", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetKickerPaarDefaultImplementation(apiResponseLocalVar, year, team, conference);

                        Events.ExecuteOnGetKickerPaar(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetKickerPaarDefaultImplementation(e, "/wepa/players/kicking", uriBuilderLocalVar.Path, year, team, conference);
                Events.ExecuteOnErrorGetKickerPaar(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetKickerPaarApiResponse"/>
        /// </summary>
        public partial class GetKickerPaarApiResponse : CollegeFootballData.Client.ApiResponse, IGetKickerPaarApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetKickerPaarApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetKickerPaarApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetKickerPaarApiResponse(ILogger<GetKickerPaarApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<KickerPAAR>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<KickerPAAR>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<KickerPAAR>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
