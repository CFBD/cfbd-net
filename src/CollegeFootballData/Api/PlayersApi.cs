/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CollegeFootballData.Client;
using CollegeFootballData.Model;

namespace CollegeFootballData.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player usage data for a given season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerUsage&gt;</returns>
        List<PlayerUsage> GetPlayerUsage(int year, string? conference = default(string?), string? position = default(string?), string? team = default(string?), int? playerId = default(int?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player usage data for a given season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerUsage&gt;</returns>
        ApiResponse<List<PlayerUsage>> GetPlayerUsageWithHttpInfo(int year, string? conference = default(string?), string? position = default(string?), string? team = default(string?), int? playerId = default(int?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves returning production data. Either a year or team filter must be specified.
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ReturningProduction&gt;</returns>
        List<ReturningProduction> GetReturningProduction(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves returning production data. Either a year or team filter must be specified.
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ReturningProduction&gt;</returns>
        ApiResponse<List<ReturningProduction>> GetReturningProductionWithHttpInfo(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves transfer portal data for a given year
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerTransfer&gt;</returns>
        List<PlayerTransfer> GetTransferPortal(int year, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves transfer portal data for a given year
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerTransfer&gt;</returns>
        ApiResponse<List<PlayerTransfer>> GetTransferPortalWithHttpInfo(int year, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for players (lists top 100 results)
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerSearchResult&gt;</returns>
        List<PlayerSearchResult> SearchPlayers(string searchTerm, int? year = default(int?), string? team = default(string?), string? position = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for players (lists top 100 results)
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerSearchResult&gt;</returns>
        ApiResponse<List<PlayerSearchResult>> SearchPlayersWithHttpInfo(string searchTerm, int? year = default(int?), string? team = default(string?), string? position = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player usage data for a given season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerUsage&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerUsage>> GetPlayerUsageAsync(int year, string? conference = default(string?), string? position = default(string?), string? team = default(string?), int? playerId = default(int?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player usage data for a given season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerUsage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerUsage>>> GetPlayerUsageWithHttpInfoAsync(int year, string? conference = default(string?), string? position = default(string?), string? team = default(string?), int? playerId = default(int?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves returning production data. Either a year or team filter must be specified.
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ReturningProduction&gt;</returns>
        System.Threading.Tasks.Task<List<ReturningProduction>> GetReturningProductionAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves returning production data. Either a year or team filter must be specified.
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ReturningProduction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReturningProduction>>> GetReturningProductionWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves transfer portal data for a given year
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerTransfer&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerTransfer>> GetTransferPortalAsync(int year, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves transfer portal data for a given year
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerTransfer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerTransfer>>> GetTransferPortalWithHttpInfoAsync(int year, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for players (lists top 100 results)
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerSearchResult>> SearchPlayersAsync(string searchTerm, int? year = default(int?), string? team = default(string?), string? position = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for players (lists top 100 results)
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerSearchResult>>> SearchPlayersWithHttpInfoAsync(string searchTerm, int? year = default(int?), string? team = default(string?), string? position = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApi : IPlayersApiSync, IPlayersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayersApi : IPlayersApi
    {
        private CollegeFootballData.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi(string basePath)
        {
            this.Configuration = CollegeFootballData.Client.Configuration.MergeConfigurations(
                CollegeFootballData.Client.GlobalConfiguration.Instance,
                new CollegeFootballData.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayersApi(CollegeFootballData.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CollegeFootballData.Client.Configuration.MergeConfigurations(
                CollegeFootballData.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlayersApi(CollegeFootballData.Client.ISynchronousClient client, CollegeFootballData.Client.IAsynchronousClient asyncClient, CollegeFootballData.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CollegeFootballData.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CollegeFootballData.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CollegeFootballData.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CollegeFootballData.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieves player usage data for a given season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerUsage&gt;</returns>
        public List<PlayerUsage> GetPlayerUsage(int year, string? conference = default(string?), string? position = default(string?), string? team = default(string?), int? playerId = default(int?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerUsage>> localVarResponse = GetPlayerUsageWithHttpInfo(year, conference, position, team, playerId, excludeGarbageTime);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves player usage data for a given season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerUsage&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PlayerUsage>> GetPlayerUsageWithHttpInfo(int year, string? conference = default(string?), string? position = default(string?), string? team = default(string?), int? playerId = default(int?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "playerId", playerId));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "PlayersApi.GetPlayerUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayerUsage>>("/player/usage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves player usage data for a given season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerUsage&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerUsage>> GetPlayerUsageAsync(int year, string? conference = default(string?), string? position = default(string?), string? team = default(string?), int? playerId = default(int?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerUsage>> localVarResponse = await GetPlayerUsageWithHttpInfoAsync(year, conference, position, team, playerId, excludeGarbageTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves player usage data for a given season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerUsage&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PlayerUsage>>> GetPlayerUsageWithHttpInfoAsync(int year, string? conference = default(string?), string? position = default(string?), string? team = default(string?), int? playerId = default(int?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "playerId", playerId));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "PlayersApi.GetPlayerUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayerUsage>>("/player/usage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves returning production data. Either a year or team filter must be specified.
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ReturningProduction&gt;</returns>
        public List<ReturningProduction> GetReturningProduction(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<ReturningProduction>> localVarResponse = GetReturningProductionWithHttpInfo(year, team, conference);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves returning production data. Either a year or team filter must be specified.
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ReturningProduction&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<ReturningProduction>> GetReturningProductionWithHttpInfo(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }

            localVarRequestOptions.Operation = "PlayersApi.GetReturningProduction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ReturningProduction>>("/player/returning", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReturningProduction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves returning production data. Either a year or team filter must be specified.
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ReturningProduction&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReturningProduction>> GetReturningProductionAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<ReturningProduction>> localVarResponse = await GetReturningProductionWithHttpInfoAsync(year, team, conference, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves returning production data. Either a year or team filter must be specified.
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ReturningProduction&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<ReturningProduction>>> GetReturningProductionWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }

            localVarRequestOptions.Operation = "PlayersApi.GetReturningProduction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReturningProduction>>("/player/returning", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReturningProduction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves transfer portal data for a given year
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerTransfer&gt;</returns>
        public List<PlayerTransfer> GetTransferPortal(int year, int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerTransfer>> localVarResponse = GetTransferPortalWithHttpInfo(year);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves transfer portal data for a given year
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerTransfer&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PlayerTransfer>> GetTransferPortalWithHttpInfo(int year, int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));

            localVarRequestOptions.Operation = "PlayersApi.GetTransferPortal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayerTransfer>>("/player/portal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransferPortal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves transfer portal data for a given year
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerTransfer&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerTransfer>> GetTransferPortalAsync(int year, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerTransfer>> localVarResponse = await GetTransferPortalWithHttpInfoAsync(year, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves transfer portal data for a given year
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerTransfer&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PlayerTransfer>>> GetTransferPortalWithHttpInfoAsync(int year, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));

            localVarRequestOptions.Operation = "PlayersApi.GetTransferPortal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayerTransfer>>("/player/portal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransferPortal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for players (lists top 100 results)
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerSearchResult&gt;</returns>
        public List<PlayerSearchResult> SearchPlayers(string searchTerm, int? year = default(int?), string? team = default(string?), string? position = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerSearchResult>> localVarResponse = SearchPlayersWithHttpInfo(searchTerm, year, team, position);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for players (lists top 100 results)
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerSearchResult&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PlayerSearchResult>> SearchPlayersWithHttpInfo(string searchTerm, int? year = default(int?), string? team = default(string?), string? position = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
            {
                throw new CollegeFootballData.Client.ApiException(400, "Missing required parameter 'searchTerm' when calling PlayersApi->SearchPlayers");
            }

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }

            localVarRequestOptions.Operation = "PlayersApi.SearchPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayerSearchResult>>("/player/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for players (lists top 100 results)
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerSearchResult>> SearchPlayersAsync(string searchTerm, int? year = default(int?), string? team = default(string?), string? position = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerSearchResult>> localVarResponse = await SearchPlayersWithHttpInfoAsync(searchTerm, year, team, position, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for players (lists top 100 results)
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PlayerSearchResult>>> SearchPlayersWithHttpInfoAsync(string searchTerm, int? year = default(int?), string? team = default(string?), string? position = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
            {
                throw new CollegeFootballData.Client.ApiException(400, "Missing required parameter 'searchTerm' when calling PlayersApi->SearchPlayers");
            }


            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }

            localVarRequestOptions.Operation = "PlayersApi.SearchPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayerSearchResult>>("/player/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
