// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CollegeFootballData.Client;
using CollegeFootballData.Model;
using System.Diagnostics.CodeAnalysis;

namespace CollegeFootballData.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPlayersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PlayersApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player usage data for a given season
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerUsageApiResponse"/>&gt;</returns>
        Task<IGetPlayerUsageApiResponse> GetPlayerUsageAsync(int year, Option<string> conference = default, Option<string> position = default, Option<string> team = default, Option<int> playerId = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves player usage data for a given season
        /// </remarks>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerUsageApiResponse"/>?&gt;</returns>
        Task<IGetPlayerUsageApiResponse?> GetPlayerUsageOrDefaultAsync(int year, Option<string> conference = default, Option<string> position = default, Option<string> team = default, Option<int> playerId = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves returning production data. Either a year or team filter must be specified.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReturningProductionApiResponse"/>&gt;</returns>
        Task<IGetReturningProductionApiResponse> GetReturningProductionAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves returning production data. Either a year or team filter must be specified.
        /// </remarks>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReturningProductionApiResponse"/>?&gt;</returns>
        Task<IGetReturningProductionApiResponse?> GetReturningProductionOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves transfer portal data for a given year
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransferPortalApiResponse"/>&gt;</returns>
        Task<IGetTransferPortalApiResponse> GetTransferPortalAsync(int year, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves transfer portal data for a given year
        /// </remarks>
        /// <param name="year">Required year filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransferPortalApiResponse"/>?&gt;</returns>
        Task<IGetTransferPortalApiResponse?> GetTransferPortalOrDefaultAsync(int year, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for players (lists top 100 results)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchPlayersApiResponse"/>&gt;</returns>
        Task<ISearchPlayersApiResponse> SearchPlayersAsync(string searchTerm, Option<int> year = default, Option<string> team = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for players (lists top 100 results)
        /// </remarks>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchPlayersApiResponse"/>?&gt;</returns>
        Task<ISearchPlayersApiResponse?> SearchPlayersOrDefaultAsync(string searchTerm, Option<int> year = default, Option<string> team = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetPlayerUsageApiResponse"/>
    /// </summary>
    public interface IGetPlayerUsageApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayerUsage>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetReturningProductionApiResponse"/>
    /// </summary>
    public interface IGetReturningProductionApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<ReturningProduction>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTransferPortalApiResponse"/>
    /// </summary>
    public interface IGetTransferPortalApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayerTransfer>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISearchPlayersApiResponse"/>
    /// </summary>
    public interface ISearchPlayersApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayerSearchResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PlayersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPlayerUsage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPlayerUsage;

        internal void ExecuteOnGetPlayerUsage(PlayersApi.GetPlayerUsageApiResponse apiResponse)
        {
            OnGetPlayerUsage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayerUsage(Exception exception)
        {
            OnErrorGetPlayerUsage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetReturningProduction;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetReturningProduction;

        internal void ExecuteOnGetReturningProduction(PlayersApi.GetReturningProductionApiResponse apiResponse)
        {
            OnGetReturningProduction?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetReturningProduction(Exception exception)
        {
            OnErrorGetReturningProduction?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTransferPortal;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTransferPortal;

        internal void ExecuteOnGetTransferPortal(PlayersApi.GetTransferPortalApiResponse apiResponse)
        {
            OnGetTransferPortal?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTransferPortal(Exception exception)
        {
            OnErrorGetTransferPortal?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSearchPlayers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSearchPlayers;

        internal void ExecuteOnSearchPlayers(PlayersApi.SearchPlayersApiResponse apiResponse)
        {
            OnSearchPlayers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSearchPlayers(Exception exception)
        {
            OnErrorSearchPlayers?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PlayersApi : IPlayersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PlayersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PlayersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi(ILogger<PlayersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PlayersApiEvents playersApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PlayersApi>();
            HttpClient = httpClient;
            Events = playersApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetPlayerUsage(ref int year, ref Option<string> conference, ref Option<string> position, ref Option<string> team, ref Option<int> playerId, ref Option<bool> excludeGarbageTime);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        /// <param name="team"></param>
        /// <returns></returns>
        private void ValidateGetPlayerUsage(Option<string> conference, Option<string> position, Option<string> team)
        {
            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position));

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        /// <param name="team"></param>
        /// <param name="playerId"></param>
        /// <param name="excludeGarbageTime"></param>
        private void AfterGetPlayerUsageDefaultImplementation(IGetPlayerUsageApiResponse apiResponseLocalVar, int year, Option<string> conference, Option<string> position, Option<string> team, Option<int> playerId, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayerUsage(ref suppressDefaultLog, apiResponseLocalVar, year, conference, position, team, playerId, excludeGarbageTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        /// <param name="team"></param>
        /// <param name="playerId"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void AfterGetPlayerUsage(ref bool suppressDefaultLog, IGetPlayerUsageApiResponse apiResponseLocalVar, int year, Option<string> conference, Option<string> position, Option<string> team, Option<int> playerId, Option<bool> excludeGarbageTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        /// <param name="team"></param>
        /// <param name="playerId"></param>
        /// <param name="excludeGarbageTime"></param>
        private void OnErrorGetPlayerUsageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<string> conference, Option<string> position, Option<string> team, Option<int> playerId, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlayerUsage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, conference, position, team, playerId, excludeGarbageTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="position"></param>
        /// <param name="team"></param>
        /// <param name="playerId"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void OnErrorGetPlayerUsage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<string> conference, Option<string> position, Option<string> team, Option<int> playerId, Option<bool> excludeGarbageTime);

        /// <summary>
        ///  Retrieves player usage data for a given season
        /// </summary>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerUsageApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerUsageApiResponse?> GetPlayerUsageOrDefaultAsync(int year, Option<string> conference = default, Option<string> position = default, Option<string> team = default, Option<int> playerId = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayerUsageAsync(year, conference, position, team, playerId, excludeGarbageTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves player usage data for a given season
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="position">Optional position abbreivation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="playerId">Optional player id filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional exclude garbage time flag, defaults to false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerUsageApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerUsageApiResponse> GetPlayerUsageAsync(int year, Option<string> conference = default, Option<string> position = default, Option<string> team = default, Option<int> playerId = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPlayerUsage(conference, position, team);

                FormatGetPlayerUsage(ref year, ref conference, ref position, ref team, ref playerId, ref excludeGarbageTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/player/usage";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (position.IsSet)
                        parseQueryStringLocalVar["position"] = ClientUtils.ParameterToString(position.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (playerId.IsSet)
                        parseQueryStringLocalVar["playerId"] = ClientUtils.ParameterToString(playerId.Value);

                    if (excludeGarbageTime.IsSet)
                        parseQueryStringLocalVar["excludeGarbageTime"] = ClientUtils.ParameterToString(excludeGarbageTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayerUsageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayerUsageApiResponse>();

                        GetPlayerUsageApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/player/usage", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayerUsageDefaultImplementation(apiResponseLocalVar, year, conference, position, team, playerId, excludeGarbageTime);

                        Events.ExecuteOnGetPlayerUsage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayerUsageDefaultImplementation(e, "/player/usage", uriBuilderLocalVar.Path, year, conference, position, team, playerId, excludeGarbageTime);
                Events.ExecuteOnErrorGetPlayerUsage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayerUsageApiResponse"/>
        /// </summary>
        public partial class GetPlayerUsageApiResponse : CollegeFootballData.Client.ApiResponse, IGetPlayerUsageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayerUsageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayerUsageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayerUsageApiResponse(ILogger<GetPlayerUsageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayerUsage>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayerUsage>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayerUsage>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetReturningProduction(ref Option<int> year, ref Option<string> team, ref Option<string> conference);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetReturningProduction(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        private void AfterGetReturningProductionDefaultImplementation(IGetReturningProductionApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference)
        {
            bool suppressDefaultLog = false;
            AfterGetReturningProduction(ref suppressDefaultLog, apiResponseLocalVar, year, team, conference);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        partial void AfterGetReturningProduction(ref bool suppressDefaultLog, IGetReturningProductionApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        private void OnErrorGetReturningProductionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetReturningProduction(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, conference);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        partial void OnErrorGetReturningProduction(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference);

        /// <summary>
        ///  Retrieves returning production data. Either a year or team filter must be specified.
        /// </summary>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReturningProductionApiResponse"/>&gt;</returns>
        public async Task<IGetReturningProductionApiResponse?> GetReturningProductionOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReturningProductionAsync(year, team, conference, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves returning production data. Either a year or team filter must be specified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReturningProductionApiResponse"/>&gt;</returns>
        public async Task<IGetReturningProductionApiResponse> GetReturningProductionAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetReturningProduction(team, conference);

                FormatGetReturningProduction(ref year, ref team, ref conference);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/player/returning";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetReturningProductionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReturningProductionApiResponse>();

                        GetReturningProductionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/player/returning", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetReturningProductionDefaultImplementation(apiResponseLocalVar, year, team, conference);

                        Events.ExecuteOnGetReturningProduction(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReturningProductionDefaultImplementation(e, "/player/returning", uriBuilderLocalVar.Path, year, team, conference);
                Events.ExecuteOnErrorGetReturningProduction(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReturningProductionApiResponse"/>
        /// </summary>
        public partial class GetReturningProductionApiResponse : CollegeFootballData.Client.ApiResponse, IGetReturningProductionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReturningProductionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReturningProductionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReturningProductionApiResponse(ILogger<GetReturningProductionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ReturningProduction>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ReturningProduction>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ReturningProduction>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTransferPortal(ref int year);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        private void AfterGetTransferPortalDefaultImplementation(IGetTransferPortalApiResponse apiResponseLocalVar, int year)
        {
            bool suppressDefaultLog = false;
            AfterGetTransferPortal(ref suppressDefaultLog, apiResponseLocalVar, year);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        partial void AfterGetTransferPortal(ref bool suppressDefaultLog, IGetTransferPortalApiResponse apiResponseLocalVar, int year);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        private void OnErrorGetTransferPortalDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTransferPortal(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        partial void OnErrorGetTransferPortal(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year);

        /// <summary>
        ///  Retrieves transfer portal data for a given year
        /// </summary>
        /// <param name="year">Required year filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransferPortalApiResponse"/>&gt;</returns>
        public async Task<IGetTransferPortalApiResponse?> GetTransferPortalOrDefaultAsync(int year, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTransferPortalAsync(year, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves transfer portal data for a given year
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransferPortalApiResponse"/>&gt;</returns>
        public async Task<IGetTransferPortalApiResponse> GetTransferPortalAsync(int year, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTransferPortal(ref year);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/player/portal";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTransferPortalApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTransferPortalApiResponse>();

                        GetTransferPortalApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/player/portal", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTransferPortalDefaultImplementation(apiResponseLocalVar, year);

                        Events.ExecuteOnGetTransferPortal(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTransferPortalDefaultImplementation(e, "/player/portal", uriBuilderLocalVar.Path, year);
                Events.ExecuteOnErrorGetTransferPortal(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTransferPortalApiResponse"/>
        /// </summary>
        public partial class GetTransferPortalApiResponse : CollegeFootballData.Client.ApiResponse, IGetTransferPortalApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTransferPortalApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTransferPortalApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTransferPortalApiResponse(ILogger<GetTransferPortalApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayerTransfer>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayerTransfer>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayerTransfer>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSearchPlayers(ref string searchTerm, ref Option<int> year, ref Option<string> team, ref Option<string> position);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="searchTerm"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <returns></returns>
        private void ValidateSearchPlayers(string searchTerm, Option<string> team, Option<string> position)
        {
            if (searchTerm == null)
                throw new ArgumentNullException(nameof(searchTerm));

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="searchTerm"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        private void AfterSearchPlayersDefaultImplementation(ISearchPlayersApiResponse apiResponseLocalVar, string searchTerm, Option<int> year, Option<string> team, Option<string> position)
        {
            bool suppressDefaultLog = false;
            AfterSearchPlayers(ref suppressDefaultLog, apiResponseLocalVar, searchTerm, year, team, position);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="searchTerm"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        partial void AfterSearchPlayers(ref bool suppressDefaultLog, ISearchPlayersApiResponse apiResponseLocalVar, string searchTerm, Option<int> year, Option<string> team, Option<string> position);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="searchTerm"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        private void OnErrorSearchPlayersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string searchTerm, Option<int> year, Option<string> team, Option<string> position)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSearchPlayers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, searchTerm, year, team, position);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="searchTerm"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        partial void OnErrorSearchPlayers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string searchTerm, Option<int> year, Option<string> team, Option<string> position);

        /// <summary>
        ///  Search for players (lists top 100 results)
        /// </summary>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchPlayersApiResponse"/>&gt;</returns>
        public async Task<ISearchPlayersApiResponse?> SearchPlayersOrDefaultAsync(string searchTerm, Option<int> year = default, Option<string> team = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SearchPlayersAsync(searchTerm, year, team, position, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Search for players (lists top 100 results)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term for matching player name</param>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchPlayersApiResponse"/>&gt;</returns>
        public async Task<ISearchPlayersApiResponse> SearchPlayersAsync(string searchTerm, Option<int> year = default, Option<string> team = default, Option<string> position = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSearchPlayers(searchTerm, team, position);

                FormatSearchPlayers(ref searchTerm, ref year, ref team, ref position);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/player/search";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["searchTerm"] = ClientUtils.ParameterToString(searchTerm);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (position.IsSet)
                        parseQueryStringLocalVar["position"] = ClientUtils.ParameterToString(position.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SearchPlayersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SearchPlayersApiResponse>();

                        SearchPlayersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/player/search", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSearchPlayersDefaultImplementation(apiResponseLocalVar, searchTerm, year, team, position);

                        Events.ExecuteOnSearchPlayers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSearchPlayersDefaultImplementation(e, "/player/search", uriBuilderLocalVar.Path, searchTerm, year, team, position);
                Events.ExecuteOnErrorSearchPlayers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SearchPlayersApiResponse"/>
        /// </summary>
        public partial class SearchPlayersApiResponse : CollegeFootballData.Client.ApiResponse, ISearchPlayersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SearchPlayersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SearchPlayersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SearchPlayersApiResponse(ILogger<SearchPlayersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayerSearchResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayerSearchResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayerSearchResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
