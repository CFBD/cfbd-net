/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CollegeFootballData.Client;
using CollegeFootballData.Model;

namespace CollegeFootballData.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries field goal expected points values
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FieldGoalEP&gt;</returns>
        List<FieldGoalEP> GetFieldGoalExpectedPoints(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries field goal expected points values
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FieldGoalEP&gt;</returns>
        ApiResponse<List<FieldGoalEP>> GetFieldGoalExpectedPointsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query Predicted Points values by down and distance
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PredictedPointsValue&gt;</returns>
        List<PredictedPointsValue> GetPredictedPoints(int down, int distance, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query Predicted Points values by down and distance
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PredictedPointsValue&gt;</returns>
        ApiResponse<List<PredictedPointsValue>> GetPredictedPointsWithHttpInfo(int down, int distance, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamGamePredictedPointsAdded&gt;</returns>
        List<TeamGamePredictedPointsAdded> GetPredictedPointsAddedByGame(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamGamePredictedPointsAdded&gt;</returns>
        ApiResponse<List<TeamGamePredictedPointsAdded>> GetPredictedPointsAddedByGameWithHttpInfo(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerGamePredictedPointsAdded&gt;</returns>
        List<PlayerGamePredictedPointsAdded> GetPredictedPointsAddedByPlayerGame(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerGamePredictedPointsAdded&gt;</returns>
        ApiResponse<List<PlayerGamePredictedPointsAdded>> GetPredictedPointsAddedByPlayerGameWithHttpInfo(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerSeasonPredictedPointsAdded&gt;</returns>
        List<PlayerSeasonPredictedPointsAdded> GetPredictedPointsAddedByPlayerSeason(int? year = default(int?), string? conference = default(string?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerSeasonPredictedPointsAdded&gt;</returns>
        ApiResponse<List<PlayerSeasonPredictedPointsAdded>> GetPredictedPointsAddedByPlayerSeasonWithHttpInfo(int? year = default(int?), string? conference = default(string?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamSeasonPredictedPointsAdded&gt;</returns>
        List<TeamSeasonPredictedPointsAdded> GetPredictedPointsAddedByTeam(int? year = default(int?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamSeasonPredictedPointsAdded&gt;</returns>
        ApiResponse<List<TeamSeasonPredictedPointsAdded>> GetPredictedPointsAddedByTeamWithHttpInfo(int? year = default(int?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries pregame win probabilities
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PregameWinProbability&gt;</returns>
        List<PregameWinProbability> GetPregameWinProbabilities(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries pregame win probabilities
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PregameWinProbability&gt;</returns>
        ApiResponse<List<PregameWinProbability>> GetPregameWinProbabilitiesWithHttpInfo(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query play win probabilities by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayWinProbability&gt;</returns>
        List<PlayWinProbability> GetWinProbability(int gameId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query play win probabilities by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayWinProbability&gt;</returns>
        ApiResponse<List<PlayWinProbability>> GetWinProbabilityWithHttpInfo(int gameId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries field goal expected points values
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FieldGoalEP&gt;</returns>
        System.Threading.Tasks.Task<List<FieldGoalEP>> GetFieldGoalExpectedPointsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries field goal expected points values
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FieldGoalEP&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldGoalEP>>> GetFieldGoalExpectedPointsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query Predicted Points values by down and distance
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PredictedPointsValue&gt;</returns>
        System.Threading.Tasks.Task<List<PredictedPointsValue>> GetPredictedPointsAsync(int down, int distance, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query Predicted Points values by down and distance
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PredictedPointsValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PredictedPointsValue>>> GetPredictedPointsWithHttpInfoAsync(int down, int distance, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamGamePredictedPointsAdded&gt;</returns>
        System.Threading.Tasks.Task<List<TeamGamePredictedPointsAdded>> GetPredictedPointsAddedByGameAsync(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamGamePredictedPointsAdded&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamGamePredictedPointsAdded>>> GetPredictedPointsAddedByGameWithHttpInfoAsync(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerGamePredictedPointsAdded&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerGamePredictedPointsAdded>> GetPredictedPointsAddedByPlayerGameAsync(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerGamePredictedPointsAdded&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerGamePredictedPointsAdded>>> GetPredictedPointsAddedByPlayerGameWithHttpInfoAsync(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerSeasonPredictedPointsAdded&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerSeasonPredictedPointsAdded>> GetPredictedPointsAddedByPlayerSeasonAsync(int? year = default(int?), string? conference = default(string?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerSeasonPredictedPointsAdded&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerSeasonPredictedPointsAdded>>> GetPredictedPointsAddedByPlayerSeasonWithHttpInfoAsync(int? year = default(int?), string? conference = default(string?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamSeasonPredictedPointsAdded&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSeasonPredictedPointsAdded>> GetPredictedPointsAddedByTeamAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSeasonPredictedPointsAdded&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSeasonPredictedPointsAdded>>> GetPredictedPointsAddedByTeamWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries pregame win probabilities
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PregameWinProbability&gt;</returns>
        System.Threading.Tasks.Task<List<PregameWinProbability>> GetPregameWinProbabilitiesAsync(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries pregame win probabilities
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PregameWinProbability&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PregameWinProbability>>> GetPregameWinProbabilitiesWithHttpInfoAsync(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query play win probabilities by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayWinProbability&gt;</returns>
        System.Threading.Tasks.Task<List<PlayWinProbability>> GetWinProbabilityAsync(int gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query play win probabilities by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayWinProbability&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayWinProbability>>> GetWinProbabilityWithHttpInfoAsync(int gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApi : IMetricsApiSync, IMetricsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetricsApi : IMetricsApi
    {
        private CollegeFootballData.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsApi(string basePath)
        {
            this.Configuration = CollegeFootballData.Client.Configuration.MergeConfigurations(
                CollegeFootballData.Client.GlobalConfiguration.Instance,
                new CollegeFootballData.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetricsApi(CollegeFootballData.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CollegeFootballData.Client.Configuration.MergeConfigurations(
                CollegeFootballData.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetricsApi(CollegeFootballData.Client.ISynchronousClient client, CollegeFootballData.Client.IAsynchronousClient asyncClient, CollegeFootballData.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CollegeFootballData.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CollegeFootballData.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CollegeFootballData.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CollegeFootballData.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Queries field goal expected points values
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FieldGoalEP&gt;</returns>
        public List<FieldGoalEP> GetFieldGoalExpectedPoints(int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<FieldGoalEP>> localVarResponse = GetFieldGoalExpectedPointsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries field goal expected points values
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FieldGoalEP&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<FieldGoalEP>> GetFieldGoalExpectedPointsWithHttpInfo(int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetricsApi.GetFieldGoalExpectedPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FieldGoalEP>>("/metrics/fg/ep", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldGoalExpectedPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries field goal expected points values
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FieldGoalEP&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldGoalEP>> GetFieldGoalExpectedPointsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<FieldGoalEP>> localVarResponse = await GetFieldGoalExpectedPointsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries field goal expected points values
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FieldGoalEP&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<FieldGoalEP>>> GetFieldGoalExpectedPointsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetricsApi.GetFieldGoalExpectedPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FieldGoalEP>>("/metrics/fg/ep", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldGoalExpectedPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Query Predicted Points values by down and distance
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PredictedPointsValue&gt;</returns>
        public List<PredictedPointsValue> GetPredictedPoints(int down, int distance, int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PredictedPointsValue>> localVarResponse = GetPredictedPointsWithHttpInfo(down, distance);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Query Predicted Points values by down and distance
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PredictedPointsValue&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PredictedPointsValue>> GetPredictedPointsWithHttpInfo(int down, int distance, int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "down", down));
            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PredictedPointsValue>>("/ppa/predicted", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Query Predicted Points values by down and distance
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PredictedPointsValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<PredictedPointsValue>> GetPredictedPointsAsync(int down, int distance, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PredictedPointsValue>> localVarResponse = await GetPredictedPointsWithHttpInfoAsync(down, distance, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Query Predicted Points values by down and distance
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PredictedPointsValue&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PredictedPointsValue>>> GetPredictedPointsWithHttpInfoAsync(int down, int distance, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "down", down));
            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PredictedPointsValue>>("/ppa/predicted", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamGamePredictedPointsAdded&gt;</returns>
        public List<TeamGamePredictedPointsAdded> GetPredictedPointsAddedByGame(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<TeamGamePredictedPointsAdded>> localVarResponse = GetPredictedPointsAddedByGameWithHttpInfo(year, week, seasonType, team, conference, excludeGarbageTime);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamGamePredictedPointsAdded&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<TeamGamePredictedPointsAdded>> GetPredictedPointsAddedByGameWithHttpInfo(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPointsAddedByGame";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamGamePredictedPointsAdded>>("/ppa/games", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPointsAddedByGame", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamGamePredictedPointsAdded&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamGamePredictedPointsAdded>> GetPredictedPointsAddedByGameAsync(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<TeamGamePredictedPointsAdded>> localVarResponse = await GetPredictedPointsAddedByGameWithHttpInfoAsync(year, week, seasonType, team, conference, excludeGarbageTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamGamePredictedPointsAdded&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<TeamGamePredictedPointsAdded>>> GetPredictedPointsAddedByGameWithHttpInfoAsync(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPointsAddedByGame";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamGamePredictedPointsAdded>>("/ppa/games", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPointsAddedByGame", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries player PPA statistics by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerGamePredictedPointsAdded&gt;</returns>
        public List<PlayerGamePredictedPointsAdded> GetPredictedPointsAddedByPlayerGame(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerGamePredictedPointsAdded>> localVarResponse = GetPredictedPointsAddedByPlayerGameWithHttpInfo(year, week, seasonType, team, position, playerId, threshold, excludeGarbageTime);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries player PPA statistics by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerGamePredictedPointsAdded&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PlayerGamePredictedPointsAdded>> GetPredictedPointsAddedByPlayerGameWithHttpInfo(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "playerId", playerId));
            }
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPointsAddedByPlayerGame";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayerGamePredictedPointsAdded>>("/ppa/players/games", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPointsAddedByPlayerGame", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries player PPA statistics by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerGamePredictedPointsAdded&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerGamePredictedPointsAdded>> GetPredictedPointsAddedByPlayerGameAsync(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerGamePredictedPointsAdded>> localVarResponse = await GetPredictedPointsAddedByPlayerGameWithHttpInfoAsync(year, week, seasonType, team, position, playerId, threshold, excludeGarbageTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries player PPA statistics by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerGamePredictedPointsAdded&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PlayerGamePredictedPointsAdded>>> GetPredictedPointsAddedByPlayerGameWithHttpInfoAsync(int year, int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "playerId", playerId));
            }
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPointsAddedByPlayerGame";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayerGamePredictedPointsAdded>>("/ppa/players/games", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPointsAddedByPlayerGame", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries player PPA statistics by season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerSeasonPredictedPointsAdded&gt;</returns>
        public List<PlayerSeasonPredictedPointsAdded> GetPredictedPointsAddedByPlayerSeason(int? year = default(int?), string? conference = default(string?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerSeasonPredictedPointsAdded>> localVarResponse = GetPredictedPointsAddedByPlayerSeasonWithHttpInfo(year, conference, team, position, playerId, threshold, excludeGarbageTime);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries player PPA statistics by season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerSeasonPredictedPointsAdded&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PlayerSeasonPredictedPointsAdded>> GetPredictedPointsAddedByPlayerSeasonWithHttpInfo(int? year = default(int?), string? conference = default(string?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "playerId", playerId));
            }
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPointsAddedByPlayerSeason";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayerSeasonPredictedPointsAdded>>("/ppa/players/season", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPointsAddedByPlayerSeason", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries player PPA statistics by season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerSeasonPredictedPointsAdded&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerSeasonPredictedPointsAdded>> GetPredictedPointsAddedByPlayerSeasonAsync(int? year = default(int?), string? conference = default(string?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerSeasonPredictedPointsAdded>> localVarResponse = await GetPredictedPointsAddedByPlayerSeasonWithHttpInfoAsync(year, conference, team, position, playerId, threshold, excludeGarbageTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries player PPA statistics by season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerSeasonPredictedPointsAdded&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PlayerSeasonPredictedPointsAdded>>> GetPredictedPointsAddedByPlayerSeasonWithHttpInfoAsync(int? year = default(int?), string? conference = default(string?), string? team = default(string?), string? position = default(string?), string? playerId = default(string?), double? threshold = default(double?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "playerId", playerId));
            }
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPointsAddedByPlayerSeason";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayerSeasonPredictedPointsAdded>>("/ppa/players/season", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPointsAddedByPlayerSeason", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamSeasonPredictedPointsAdded&gt;</returns>
        public List<TeamSeasonPredictedPointsAdded> GetPredictedPointsAddedByTeam(int? year = default(int?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<TeamSeasonPredictedPointsAdded>> localVarResponse = GetPredictedPointsAddedByTeamWithHttpInfo(year, team, conference, excludeGarbageTime);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamSeasonPredictedPointsAdded&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<TeamSeasonPredictedPointsAdded>> GetPredictedPointsAddedByTeamWithHttpInfo(int? year = default(int?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPointsAddedByTeam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamSeasonPredictedPointsAdded>>("/ppa/teams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPointsAddedByTeam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamSeasonPredictedPointsAdded&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSeasonPredictedPointsAdded>> GetPredictedPointsAddedByTeamAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<TeamSeasonPredictedPointsAdded>> localVarResponse = await GetPredictedPointsAddedByTeamWithHttpInfoAsync(year, team, conference, excludeGarbageTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSeasonPredictedPointsAdded&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<TeamSeasonPredictedPointsAdded>>> GetPredictedPointsAddedByTeamWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), bool? excludeGarbageTime = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPredictedPointsAddedByTeam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSeasonPredictedPointsAdded>>("/ppa/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPredictedPointsAddedByTeam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries pregame win probabilities
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PregameWinProbability&gt;</returns>
        public List<PregameWinProbability> GetPregameWinProbabilities(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PregameWinProbability>> localVarResponse = GetPregameWinProbabilitiesWithHttpInfo(year, week, seasonType, team);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries pregame win probabilities
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PregameWinProbability&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PregameWinProbability>> GetPregameWinProbabilitiesWithHttpInfo(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPregameWinProbabilities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PregameWinProbability>>("/metrics/wp/pregame", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPregameWinProbabilities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries pregame win probabilities
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PregameWinProbability&gt;</returns>
        public async System.Threading.Tasks.Task<List<PregameWinProbability>> GetPregameWinProbabilitiesAsync(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PregameWinProbability>> localVarResponse = await GetPregameWinProbabilitiesWithHttpInfoAsync(year, week, seasonType, team, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries pregame win probabilities
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PregameWinProbability&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PregameWinProbability>>> GetPregameWinProbabilitiesWithHttpInfoAsync(int? year = default(int?), int? week = default(int?), SeasonType? seasonType = default(SeasonType?), string? team = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }

            localVarRequestOptions.Operation = "MetricsApi.GetPregameWinProbabilities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PregameWinProbability>>("/metrics/wp/pregame", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPregameWinProbabilities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Query play win probabilities by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayWinProbability&gt;</returns>
        public List<PlayWinProbability> GetWinProbability(int gameId, int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PlayWinProbability>> localVarResponse = GetWinProbabilityWithHttpInfo(gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Query play win probabilities by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayWinProbability&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PlayWinProbability>> GetWinProbabilityWithHttpInfo(int gameId, int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "gameId", gameId));

            localVarRequestOptions.Operation = "MetricsApi.GetWinProbability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayWinProbability>>("/metrics/wp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWinProbability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Query play win probabilities by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayWinProbability&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayWinProbability>> GetWinProbabilityAsync(int gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PlayWinProbability>> localVarResponse = await GetWinProbabilityWithHttpInfoAsync(gameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Query play win probabilities by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayWinProbability&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PlayWinProbability>>> GetWinProbabilityWithHttpInfoAsync(int gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "gameId", gameId));

            localVarRequestOptions.Operation = "MetricsApi.GetWinProbability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayWinProbability>>("/metrics/wp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWinProbability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
