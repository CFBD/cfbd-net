// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.20
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CollegeFootballData.Client;
using CollegeFootballData.Model;
using System.Diagnostics.CodeAnalysis;

namespace CollegeFootballData.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMetricsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MetricsApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries field goal expected points values
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldGoalExpectedPointsApiResponse"/>&gt;</returns>
        Task<IGetFieldGoalExpectedPointsApiResponse> GetFieldGoalExpectedPointsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries field goal expected points values
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldGoalExpectedPointsApiResponse"/>?&gt;</returns>
        Task<IGetFieldGoalExpectedPointsApiResponse?> GetFieldGoalExpectedPointsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query Predicted Points values by down and distance
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsApiResponse"/>&gt;</returns>
        Task<IGetPredictedPointsApiResponse> GetPredictedPointsAsync(int down, int distance, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query Predicted Points values by down and distance
        /// </remarks>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsApiResponse"/>?&gt;</returns>
        Task<IGetPredictedPointsApiResponse?> GetPredictedPointsOrDefaultAsync(int down, int distance, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by game
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByGameApiResponse"/>&gt;</returns>
        Task<IGetPredictedPointsAddedByGameApiResponse> GetPredictedPointsAddedByGameAsync(int year, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, Option<string> conference = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by game
        /// </remarks>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByGameApiResponse"/>?&gt;</returns>
        Task<IGetPredictedPointsAddedByGameApiResponse?> GetPredictedPointsAddedByGameOrDefaultAsync(int year, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, Option<string> conference = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by game
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByPlayerGameApiResponse"/>&gt;</returns>
        Task<IGetPredictedPointsAddedByPlayerGameApiResponse> GetPredictedPointsAddedByPlayerGameAsync(int year, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, Option<string> position = default, Option<string> playerId = default, Option<double> threshold = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by game
        /// </remarks>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByPlayerGameApiResponse"/>?&gt;</returns>
        Task<IGetPredictedPointsAddedByPlayerGameApiResponse?> GetPredictedPointsAddedByPlayerGameOrDefaultAsync(int year, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, Option<string> position = default, Option<string> playerId = default, Option<double> threshold = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by season
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByPlayerSeasonApiResponse"/>&gt;</returns>
        Task<IGetPredictedPointsAddedByPlayerSeasonApiResponse> GetPredictedPointsAddedByPlayerSeasonAsync(Option<int> year = default, Option<string> conference = default, Option<string> team = default, Option<string> position = default, Option<string> playerId = default, Option<double> threshold = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries player PPA statistics by season
        /// </remarks>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByPlayerSeasonApiResponse"/>?&gt;</returns>
        Task<IGetPredictedPointsAddedByPlayerSeasonApiResponse?> GetPredictedPointsAddedByPlayerSeasonOrDefaultAsync(Option<int> year = default, Option<string> conference = default, Option<string> team = default, Option<string> position = default, Option<string> playerId = default, Option<double> threshold = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by season
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByTeamApiResponse"/>&gt;</returns>
        Task<IGetPredictedPointsAddedByTeamApiResponse> GetPredictedPointsAddedByTeamAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves historical team PPA metrics by season
        /// </remarks>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByTeamApiResponse"/>?&gt;</returns>
        Task<IGetPredictedPointsAddedByTeamApiResponse?> GetPredictedPointsAddedByTeamOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries pregame win probabilities
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPregameWinProbabilitiesApiResponse"/>&gt;</returns>
        Task<IGetPregameWinProbabilitiesApiResponse> GetPregameWinProbabilitiesAsync(Option<int> year = default, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries pregame win probabilities
        /// </remarks>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPregameWinProbabilitiesApiResponse"/>?&gt;</returns>
        Task<IGetPregameWinProbabilitiesApiResponse?> GetPregameWinProbabilitiesOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query play win probabilities by game
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWinProbabilityApiResponse"/>&gt;</returns>
        Task<IGetWinProbabilityApiResponse> GetWinProbabilityAsync(int gameId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query play win probabilities by game
        /// </remarks>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWinProbabilityApiResponse"/>?&gt;</returns>
        Task<IGetWinProbabilityApiResponse?> GetWinProbabilityOrDefaultAsync(int gameId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetFieldGoalExpectedPointsApiResponse"/>
    /// </summary>
    public interface IGetFieldGoalExpectedPointsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<FieldGoalEP>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPredictedPointsApiResponse"/>
    /// </summary>
    public interface IGetPredictedPointsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PredictedPointsValue>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPredictedPointsAddedByGameApiResponse"/>
    /// </summary>
    public interface IGetPredictedPointsAddedByGameApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<TeamGamePredictedPointsAdded>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPredictedPointsAddedByPlayerGameApiResponse"/>
    /// </summary>
    public interface IGetPredictedPointsAddedByPlayerGameApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayerGamePredictedPointsAdded>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPredictedPointsAddedByPlayerSeasonApiResponse"/>
    /// </summary>
    public interface IGetPredictedPointsAddedByPlayerSeasonApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayerSeasonPredictedPointsAdded>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPredictedPointsAddedByTeamApiResponse"/>
    /// </summary>
    public interface IGetPredictedPointsAddedByTeamApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<TeamSeasonPredictedPointsAdded>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPregameWinProbabilitiesApiResponse"/>
    /// </summary>
    public interface IGetPregameWinProbabilitiesApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PregameWinProbability>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWinProbabilityApiResponse"/>
    /// </summary>
    public interface IGetWinProbabilityApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayWinProbability>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MetricsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFieldGoalExpectedPoints;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFieldGoalExpectedPoints;

        internal void ExecuteOnGetFieldGoalExpectedPoints(MetricsApi.GetFieldGoalExpectedPointsApiResponse apiResponse)
        {
            OnGetFieldGoalExpectedPoints?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFieldGoalExpectedPoints(Exception exception)
        {
            OnErrorGetFieldGoalExpectedPoints?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPredictedPoints;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPredictedPoints;

        internal void ExecuteOnGetPredictedPoints(MetricsApi.GetPredictedPointsApiResponse apiResponse)
        {
            OnGetPredictedPoints?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPredictedPoints(Exception exception)
        {
            OnErrorGetPredictedPoints?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPredictedPointsAddedByGame;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPredictedPointsAddedByGame;

        internal void ExecuteOnGetPredictedPointsAddedByGame(MetricsApi.GetPredictedPointsAddedByGameApiResponse apiResponse)
        {
            OnGetPredictedPointsAddedByGame?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPredictedPointsAddedByGame(Exception exception)
        {
            OnErrorGetPredictedPointsAddedByGame?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPredictedPointsAddedByPlayerGame;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPredictedPointsAddedByPlayerGame;

        internal void ExecuteOnGetPredictedPointsAddedByPlayerGame(MetricsApi.GetPredictedPointsAddedByPlayerGameApiResponse apiResponse)
        {
            OnGetPredictedPointsAddedByPlayerGame?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPredictedPointsAddedByPlayerGame(Exception exception)
        {
            OnErrorGetPredictedPointsAddedByPlayerGame?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPredictedPointsAddedByPlayerSeason;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPredictedPointsAddedByPlayerSeason;

        internal void ExecuteOnGetPredictedPointsAddedByPlayerSeason(MetricsApi.GetPredictedPointsAddedByPlayerSeasonApiResponse apiResponse)
        {
            OnGetPredictedPointsAddedByPlayerSeason?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPredictedPointsAddedByPlayerSeason(Exception exception)
        {
            OnErrorGetPredictedPointsAddedByPlayerSeason?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPredictedPointsAddedByTeam;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPredictedPointsAddedByTeam;

        internal void ExecuteOnGetPredictedPointsAddedByTeam(MetricsApi.GetPredictedPointsAddedByTeamApiResponse apiResponse)
        {
            OnGetPredictedPointsAddedByTeam?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPredictedPointsAddedByTeam(Exception exception)
        {
            OnErrorGetPredictedPointsAddedByTeam?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPregameWinProbabilities;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPregameWinProbabilities;

        internal void ExecuteOnGetPregameWinProbabilities(MetricsApi.GetPregameWinProbabilitiesApiResponse apiResponse)
        {
            OnGetPregameWinProbabilities?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPregameWinProbabilities(Exception exception)
        {
            OnErrorGetPregameWinProbabilities?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWinProbability;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWinProbability;

        internal void ExecuteOnGetWinProbability(MetricsApi.GetWinProbabilityApiResponse apiResponse)
        {
            OnGetWinProbability?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWinProbability(Exception exception)
        {
            OnErrorGetWinProbability?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MetricsApi : IMetricsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MetricsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MetricsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsApi(ILogger<MetricsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MetricsApiEvents metricsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MetricsApi>();
            HttpClient = httpClient;
            Events = metricsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetFieldGoalExpectedPointsDefaultImplementation(IGetFieldGoalExpectedPointsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetFieldGoalExpectedPoints(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetFieldGoalExpectedPoints(ref bool suppressDefaultLog, IGetFieldGoalExpectedPointsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetFieldGoalExpectedPointsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFieldGoalExpectedPoints(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetFieldGoalExpectedPoints(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Queries field goal expected points values
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldGoalExpectedPointsApiResponse"/>&gt;</returns>
        public async Task<IGetFieldGoalExpectedPointsApiResponse?> GetFieldGoalExpectedPointsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFieldGoalExpectedPointsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Queries field goal expected points values
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldGoalExpectedPointsApiResponse"/>&gt;</returns>
        public async Task<IGetFieldGoalExpectedPointsApiResponse> GetFieldGoalExpectedPointsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/metrics/fg/ep";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFieldGoalExpectedPointsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFieldGoalExpectedPointsApiResponse>();

                        GetFieldGoalExpectedPointsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/metrics/fg/ep", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFieldGoalExpectedPointsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetFieldGoalExpectedPoints(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFieldGoalExpectedPointsDefaultImplementation(e, "/metrics/fg/ep", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetFieldGoalExpectedPoints(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFieldGoalExpectedPointsApiResponse"/>
        /// </summary>
        public partial class GetFieldGoalExpectedPointsApiResponse : CollegeFootballData.Client.ApiResponse, IGetFieldGoalExpectedPointsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFieldGoalExpectedPointsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFieldGoalExpectedPointsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFieldGoalExpectedPointsApiResponse(ILogger<GetFieldGoalExpectedPointsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FieldGoalEP>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FieldGoalEP>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FieldGoalEP>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPredictedPoints(ref int down, ref int distance);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="down"></param>
        /// <param name="distance"></param>
        private void AfterGetPredictedPointsDefaultImplementation(IGetPredictedPointsApiResponse apiResponseLocalVar, int down, int distance)
        {
            bool suppressDefaultLog = false;
            AfterGetPredictedPoints(ref suppressDefaultLog, apiResponseLocalVar, down, distance);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="down"></param>
        /// <param name="distance"></param>
        partial void AfterGetPredictedPoints(ref bool suppressDefaultLog, IGetPredictedPointsApiResponse apiResponseLocalVar, int down, int distance);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="down"></param>
        /// <param name="distance"></param>
        private void OnErrorGetPredictedPointsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int down, int distance)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPredictedPoints(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, down, distance);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="down"></param>
        /// <param name="distance"></param>
        partial void OnErrorGetPredictedPoints(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int down, int distance);

        /// <summary>
        ///  Query Predicted Points values by down and distance
        /// </summary>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsApiResponse?> GetPredictedPointsOrDefaultAsync(int down, int distance, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPredictedPointsAsync(down, distance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Query Predicted Points values by down and distance
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down value</param>
        /// <param name="distance">Distance value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsApiResponse> GetPredictedPointsAsync(int down, int distance, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetPredictedPoints(ref down, ref distance);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ppa/predicted";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["down"] = ClientUtils.ParameterToString(down);
                    parseQueryStringLocalVar["distance"] = ClientUtils.ParameterToString(distance);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPredictedPointsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPredictedPointsApiResponse>();

                        GetPredictedPointsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ppa/predicted", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPredictedPointsDefaultImplementation(apiResponseLocalVar, down, distance);

                        Events.ExecuteOnGetPredictedPoints(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPredictedPointsDefaultImplementation(e, "/ppa/predicted", uriBuilderLocalVar.Path, down, distance);
                Events.ExecuteOnErrorGetPredictedPoints(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPredictedPointsApiResponse"/>
        /// </summary>
        public partial class GetPredictedPointsApiResponse : CollegeFootballData.Client.ApiResponse, IGetPredictedPointsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPredictedPointsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPredictedPointsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPredictedPointsApiResponse(ILogger<GetPredictedPointsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PredictedPointsValue>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PredictedPointsValue>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PredictedPointsValue>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPredictedPointsAddedByGame(ref int year, ref Option<int> week, ref Option<SeasonType> seasonType, ref Option<string> team, ref Option<string> conference, ref Option<bool> excludeGarbageTime);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetPredictedPointsAddedByGame(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="excludeGarbageTime"></param>
        private void AfterGetPredictedPointsAddedByGameDefaultImplementation(IGetPredictedPointsAddedByGameApiResponse apiResponseLocalVar, int year, Option<int> week, Option<SeasonType> seasonType, Option<string> team, Option<string> conference, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLog = false;
            AfterGetPredictedPointsAddedByGame(ref suppressDefaultLog, apiResponseLocalVar, year, week, seasonType, team, conference, excludeGarbageTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void AfterGetPredictedPointsAddedByGame(ref bool suppressDefaultLog, IGetPredictedPointsAddedByGameApiResponse apiResponseLocalVar, int year, Option<int> week, Option<SeasonType> seasonType, Option<string> team, Option<string> conference, Option<bool> excludeGarbageTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="excludeGarbageTime"></param>
        private void OnErrorGetPredictedPointsAddedByGameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<int> week, Option<SeasonType> seasonType, Option<string> team, Option<string> conference, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPredictedPointsAddedByGame(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, week, seasonType, team, conference, excludeGarbageTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void OnErrorGetPredictedPointsAddedByGame(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<int> week, Option<SeasonType> seasonType, Option<string> team, Option<string> conference, Option<bool> excludeGarbageTime);

        /// <summary>
        ///  Retrieves historical team PPA metrics by game
        /// </summary>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByGameApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsAddedByGameApiResponse?> GetPredictedPointsAddedByGameOrDefaultAsync(int year, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, Option<string> conference = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPredictedPointsAddedByGameAsync(year, week, seasonType, team, conference, excludeGarbageTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by game
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByGameApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsAddedByGameApiResponse> GetPredictedPointsAddedByGameAsync(int year, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, Option<string> conference = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPredictedPointsAddedByGame(team, conference);

                FormatGetPredictedPointsAddedByGame(ref year, ref week, ref seasonType, ref team, ref conference, ref excludeGarbageTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ppa/games";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (excludeGarbageTime.IsSet)
                        parseQueryStringLocalVar["excludeGarbageTime"] = ClientUtils.ParameterToString(excludeGarbageTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPredictedPointsAddedByGameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPredictedPointsAddedByGameApiResponse>();

                        GetPredictedPointsAddedByGameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ppa/games", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPredictedPointsAddedByGameDefaultImplementation(apiResponseLocalVar, year, week, seasonType, team, conference, excludeGarbageTime);

                        Events.ExecuteOnGetPredictedPointsAddedByGame(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPredictedPointsAddedByGameDefaultImplementation(e, "/ppa/games", uriBuilderLocalVar.Path, year, week, seasonType, team, conference, excludeGarbageTime);
                Events.ExecuteOnErrorGetPredictedPointsAddedByGame(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPredictedPointsAddedByGameApiResponse"/>
        /// </summary>
        public partial class GetPredictedPointsAddedByGameApiResponse : CollegeFootballData.Client.ApiResponse, IGetPredictedPointsAddedByGameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPredictedPointsAddedByGameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPredictedPointsAddedByGameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPredictedPointsAddedByGameApiResponse(ILogger<GetPredictedPointsAddedByGameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TeamGamePredictedPointsAdded>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TeamGamePredictedPointsAdded>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TeamGamePredictedPointsAdded>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPredictedPointsAddedByPlayerGame(ref int year, ref Option<int> week, ref Option<SeasonType> seasonType, ref Option<string> team, ref Option<string> position, ref Option<string> playerId, ref Option<double> threshold, ref Option<bool> excludeGarbageTime);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <returns></returns>
        private void ValidateGetPredictedPointsAddedByPlayerGame(Option<string> team, Option<string> position, Option<string> playerId)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position));

            if (playerId.IsSet && playerId.Value == null)
                throw new ArgumentNullException(nameof(playerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <param name="threshold"></param>
        /// <param name="excludeGarbageTime"></param>
        private void AfterGetPredictedPointsAddedByPlayerGameDefaultImplementation(IGetPredictedPointsAddedByPlayerGameApiResponse apiResponseLocalVar, int year, Option<int> week, Option<SeasonType> seasonType, Option<string> team, Option<string> position, Option<string> playerId, Option<double> threshold, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLog = false;
            AfterGetPredictedPointsAddedByPlayerGame(ref suppressDefaultLog, apiResponseLocalVar, year, week, seasonType, team, position, playerId, threshold, excludeGarbageTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <param name="threshold"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void AfterGetPredictedPointsAddedByPlayerGame(ref bool suppressDefaultLog, IGetPredictedPointsAddedByPlayerGameApiResponse apiResponseLocalVar, int year, Option<int> week, Option<SeasonType> seasonType, Option<string> team, Option<string> position, Option<string> playerId, Option<double> threshold, Option<bool> excludeGarbageTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <param name="threshold"></param>
        /// <param name="excludeGarbageTime"></param>
        private void OnErrorGetPredictedPointsAddedByPlayerGameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<int> week, Option<SeasonType> seasonType, Option<string> team, Option<string> position, Option<string> playerId, Option<double> threshold, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPredictedPointsAddedByPlayerGame(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, week, seasonType, team, position, playerId, threshold, excludeGarbageTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <param name="threshold"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void OnErrorGetPredictedPointsAddedByPlayerGame(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<int> week, Option<SeasonType> seasonType, Option<string> team, Option<string> position, Option<string> playerId, Option<double> threshold, Option<bool> excludeGarbageTime);

        /// <summary>
        ///  Queries player PPA statistics by game
        /// </summary>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByPlayerGameApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsAddedByPlayerGameApiResponse?> GetPredictedPointsAddedByPlayerGameOrDefaultAsync(int year, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, Option<string> position = default, Option<string> playerId = default, Option<double> threshold = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPredictedPointsAddedByPlayerGameAsync(year, week, seasonType, team, position, playerId, threshold, excludeGarbageTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Queries player PPA statistics by game
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="week">Week filter, required if team not specified (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Team filter, required if week not specified (optional)</param>
        /// <param name="position">Optional player position abbreviation filter (optional)</param>
        /// <param name="playerId">Optional player ID filter (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByPlayerGameApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsAddedByPlayerGameApiResponse> GetPredictedPointsAddedByPlayerGameAsync(int year, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, Option<string> position = default, Option<string> playerId = default, Option<double> threshold = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPredictedPointsAddedByPlayerGame(team, position, playerId);

                FormatGetPredictedPointsAddedByPlayerGame(ref year, ref week, ref seasonType, ref team, ref position, ref playerId, ref threshold, ref excludeGarbageTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ppa/players/games";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (position.IsSet)
                        parseQueryStringLocalVar["position"] = ClientUtils.ParameterToString(position.Value);

                    if (playerId.IsSet)
                        parseQueryStringLocalVar["playerId"] = ClientUtils.ParameterToString(playerId.Value);

                    if (threshold.IsSet)
                        parseQueryStringLocalVar["threshold"] = ClientUtils.ParameterToString(threshold.Value);

                    if (excludeGarbageTime.IsSet)
                        parseQueryStringLocalVar["excludeGarbageTime"] = ClientUtils.ParameterToString(excludeGarbageTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPredictedPointsAddedByPlayerGameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPredictedPointsAddedByPlayerGameApiResponse>();

                        GetPredictedPointsAddedByPlayerGameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ppa/players/games", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPredictedPointsAddedByPlayerGameDefaultImplementation(apiResponseLocalVar, year, week, seasonType, team, position, playerId, threshold, excludeGarbageTime);

                        Events.ExecuteOnGetPredictedPointsAddedByPlayerGame(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPredictedPointsAddedByPlayerGameDefaultImplementation(e, "/ppa/players/games", uriBuilderLocalVar.Path, year, week, seasonType, team, position, playerId, threshold, excludeGarbageTime);
                Events.ExecuteOnErrorGetPredictedPointsAddedByPlayerGame(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPredictedPointsAddedByPlayerGameApiResponse"/>
        /// </summary>
        public partial class GetPredictedPointsAddedByPlayerGameApiResponse : CollegeFootballData.Client.ApiResponse, IGetPredictedPointsAddedByPlayerGameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPredictedPointsAddedByPlayerGameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPredictedPointsAddedByPlayerGameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPredictedPointsAddedByPlayerGameApiResponse(ILogger<GetPredictedPointsAddedByPlayerGameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayerGamePredictedPointsAdded>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayerGamePredictedPointsAdded>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayerGamePredictedPointsAdded>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPredictedPointsAddedByPlayerSeason(ref Option<int> year, ref Option<string> conference, ref Option<string> team, ref Option<string> position, ref Option<string> playerId, ref Option<double> threshold, ref Option<bool> excludeGarbageTime);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <returns></returns>
        private void ValidateGetPredictedPointsAddedByPlayerSeason(Option<string> conference, Option<string> team, Option<string> position, Option<string> playerId)
        {
            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position));

            if (playerId.IsSet && playerId.Value == null)
                throw new ArgumentNullException(nameof(playerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <param name="threshold"></param>
        /// <param name="excludeGarbageTime"></param>
        private void AfterGetPredictedPointsAddedByPlayerSeasonDefaultImplementation(IGetPredictedPointsAddedByPlayerSeasonApiResponse apiResponseLocalVar, Option<int> year, Option<string> conference, Option<string> team, Option<string> position, Option<string> playerId, Option<double> threshold, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLog = false;
            AfterGetPredictedPointsAddedByPlayerSeason(ref suppressDefaultLog, apiResponseLocalVar, year, conference, team, position, playerId, threshold, excludeGarbageTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <param name="threshold"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void AfterGetPredictedPointsAddedByPlayerSeason(ref bool suppressDefaultLog, IGetPredictedPointsAddedByPlayerSeasonApiResponse apiResponseLocalVar, Option<int> year, Option<string> conference, Option<string> team, Option<string> position, Option<string> playerId, Option<double> threshold, Option<bool> excludeGarbageTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <param name="threshold"></param>
        /// <param name="excludeGarbageTime"></param>
        private void OnErrorGetPredictedPointsAddedByPlayerSeasonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> conference, Option<string> team, Option<string> position, Option<string> playerId, Option<double> threshold, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPredictedPointsAddedByPlayerSeason(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, conference, team, position, playerId, threshold, excludeGarbageTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="position"></param>
        /// <param name="playerId"></param>
        /// <param name="threshold"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void OnErrorGetPredictedPointsAddedByPlayerSeason(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> conference, Option<string> team, Option<string> position, Option<string> playerId, Option<double> threshold, Option<bool> excludeGarbageTime);

        /// <summary>
        ///  Queries player PPA statistics by season
        /// </summary>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByPlayerSeasonApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsAddedByPlayerSeasonApiResponse?> GetPredictedPointsAddedByPlayerSeasonOrDefaultAsync(Option<int> year = default, Option<string> conference = default, Option<string> team = default, Option<string> position = default, Option<string> playerId = default, Option<double> threshold = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPredictedPointsAddedByPlayerSeasonAsync(year, conference, team, position, playerId, threshold, excludeGarbageTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Queries player PPA statistics by season
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if playerId not specified (optional)</param>
        /// <param name="conference">Optional conference abbreviation filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="position">Optional position abbreviation filter (optional)</param>
        /// <param name="playerId">Player ID filter, required if year not specified (optional)</param>
        /// <param name="threshold">Threshold value for minimum number of plays (optional)</param>
        /// <param name="excludeGarbageTime">Optional flag to exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByPlayerSeasonApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsAddedByPlayerSeasonApiResponse> GetPredictedPointsAddedByPlayerSeasonAsync(Option<int> year = default, Option<string> conference = default, Option<string> team = default, Option<string> position = default, Option<string> playerId = default, Option<double> threshold = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPredictedPointsAddedByPlayerSeason(conference, team, position, playerId);

                FormatGetPredictedPointsAddedByPlayerSeason(ref year, ref conference, ref team, ref position, ref playerId, ref threshold, ref excludeGarbageTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ppa/players/season";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (position.IsSet)
                        parseQueryStringLocalVar["position"] = ClientUtils.ParameterToString(position.Value);

                    if (playerId.IsSet)
                        parseQueryStringLocalVar["playerId"] = ClientUtils.ParameterToString(playerId.Value);

                    if (threshold.IsSet)
                        parseQueryStringLocalVar["threshold"] = ClientUtils.ParameterToString(threshold.Value);

                    if (excludeGarbageTime.IsSet)
                        parseQueryStringLocalVar["excludeGarbageTime"] = ClientUtils.ParameterToString(excludeGarbageTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPredictedPointsAddedByPlayerSeasonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPredictedPointsAddedByPlayerSeasonApiResponse>();

                        GetPredictedPointsAddedByPlayerSeasonApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ppa/players/season", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPredictedPointsAddedByPlayerSeasonDefaultImplementation(apiResponseLocalVar, year, conference, team, position, playerId, threshold, excludeGarbageTime);

                        Events.ExecuteOnGetPredictedPointsAddedByPlayerSeason(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPredictedPointsAddedByPlayerSeasonDefaultImplementation(e, "/ppa/players/season", uriBuilderLocalVar.Path, year, conference, team, position, playerId, threshold, excludeGarbageTime);
                Events.ExecuteOnErrorGetPredictedPointsAddedByPlayerSeason(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPredictedPointsAddedByPlayerSeasonApiResponse"/>
        /// </summary>
        public partial class GetPredictedPointsAddedByPlayerSeasonApiResponse : CollegeFootballData.Client.ApiResponse, IGetPredictedPointsAddedByPlayerSeasonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPredictedPointsAddedByPlayerSeasonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPredictedPointsAddedByPlayerSeasonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPredictedPointsAddedByPlayerSeasonApiResponse(ILogger<GetPredictedPointsAddedByPlayerSeasonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayerSeasonPredictedPointsAdded>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayerSeasonPredictedPointsAdded>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayerSeasonPredictedPointsAdded>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPredictedPointsAddedByTeam(ref Option<int> year, ref Option<string> team, ref Option<string> conference, ref Option<bool> excludeGarbageTime);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetPredictedPointsAddedByTeam(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="excludeGarbageTime"></param>
        private void AfterGetPredictedPointsAddedByTeamDefaultImplementation(IGetPredictedPointsAddedByTeamApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLog = false;
            AfterGetPredictedPointsAddedByTeam(ref suppressDefaultLog, apiResponseLocalVar, year, team, conference, excludeGarbageTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void AfterGetPredictedPointsAddedByTeam(ref bool suppressDefaultLog, IGetPredictedPointsAddedByTeamApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<bool> excludeGarbageTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="excludeGarbageTime"></param>
        private void OnErrorGetPredictedPointsAddedByTeamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<bool> excludeGarbageTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPredictedPointsAddedByTeam(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, conference, excludeGarbageTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="excludeGarbageTime"></param>
        partial void OnErrorGetPredictedPointsAddedByTeam(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<bool> excludeGarbageTime);

        /// <summary>
        ///  Retrieves historical team PPA metrics by season
        /// </summary>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByTeamApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsAddedByTeamApiResponse?> GetPredictedPointsAddedByTeamOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPredictedPointsAddedByTeamAsync(year, team, conference, excludeGarbageTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves historical team PPA metrics by season
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="excludeGarbageTime">Exclude garbage time plays (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPredictedPointsAddedByTeamApiResponse"/>&gt;</returns>
        public async Task<IGetPredictedPointsAddedByTeamApiResponse> GetPredictedPointsAddedByTeamAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<bool> excludeGarbageTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPredictedPointsAddedByTeam(team, conference);

                FormatGetPredictedPointsAddedByTeam(ref year, ref team, ref conference, ref excludeGarbageTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ppa/teams";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (excludeGarbageTime.IsSet)
                        parseQueryStringLocalVar["excludeGarbageTime"] = ClientUtils.ParameterToString(excludeGarbageTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPredictedPointsAddedByTeamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPredictedPointsAddedByTeamApiResponse>();

                        GetPredictedPointsAddedByTeamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ppa/teams", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPredictedPointsAddedByTeamDefaultImplementation(apiResponseLocalVar, year, team, conference, excludeGarbageTime);

                        Events.ExecuteOnGetPredictedPointsAddedByTeam(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPredictedPointsAddedByTeamDefaultImplementation(e, "/ppa/teams", uriBuilderLocalVar.Path, year, team, conference, excludeGarbageTime);
                Events.ExecuteOnErrorGetPredictedPointsAddedByTeam(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPredictedPointsAddedByTeamApiResponse"/>
        /// </summary>
        public partial class GetPredictedPointsAddedByTeamApiResponse : CollegeFootballData.Client.ApiResponse, IGetPredictedPointsAddedByTeamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPredictedPointsAddedByTeamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPredictedPointsAddedByTeamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPredictedPointsAddedByTeamApiResponse(ILogger<GetPredictedPointsAddedByTeamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TeamSeasonPredictedPointsAdded>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TeamSeasonPredictedPointsAdded>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TeamSeasonPredictedPointsAdded>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPregameWinProbabilities(ref Option<int> year, ref Option<int> week, ref Option<SeasonType> seasonType, ref Option<string> team);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <returns></returns>
        private void ValidateGetPregameWinProbabilities(Option<string> team)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        private void AfterGetPregameWinProbabilitiesDefaultImplementation(IGetPregameWinProbabilitiesApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<SeasonType> seasonType, Option<string> team)
        {
            bool suppressDefaultLog = false;
            AfterGetPregameWinProbabilities(ref suppressDefaultLog, apiResponseLocalVar, year, week, seasonType, team);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        partial void AfterGetPregameWinProbabilities(ref bool suppressDefaultLog, IGetPregameWinProbabilitiesApiResponse apiResponseLocalVar, Option<int> year, Option<int> week, Option<SeasonType> seasonType, Option<string> team);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        private void OnErrorGetPregameWinProbabilitiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<SeasonType> seasonType, Option<string> team)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPregameWinProbabilities(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, week, seasonType, team);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="week"></param>
        /// <param name="seasonType"></param>
        /// <param name="team"></param>
        partial void OnErrorGetPregameWinProbabilities(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<int> week, Option<SeasonType> seasonType, Option<string> team);

        /// <summary>
        ///  Queries pregame win probabilities
        /// </summary>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPregameWinProbabilitiesApiResponse"/>&gt;</returns>
        public async Task<IGetPregameWinProbabilitiesApiResponse?> GetPregameWinProbabilitiesOrDefaultAsync(Option<int> year = default, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPregameWinProbabilitiesAsync(year, week, seasonType, team, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Queries pregame win probabilities
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Optional year filter (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPregameWinProbabilitiesApiResponse"/>&gt;</returns>
        public async Task<IGetPregameWinProbabilitiesApiResponse> GetPregameWinProbabilitiesAsync(Option<int> year = default, Option<int> week = default, Option<SeasonType> seasonType = default, Option<string> team = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPregameWinProbabilities(team);

                FormatGetPregameWinProbabilities(ref year, ref week, ref seasonType, ref team);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/metrics/wp/pregame";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPregameWinProbabilitiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPregameWinProbabilitiesApiResponse>();

                        GetPregameWinProbabilitiesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/metrics/wp/pregame", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPregameWinProbabilitiesDefaultImplementation(apiResponseLocalVar, year, week, seasonType, team);

                        Events.ExecuteOnGetPregameWinProbabilities(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPregameWinProbabilitiesDefaultImplementation(e, "/metrics/wp/pregame", uriBuilderLocalVar.Path, year, week, seasonType, team);
                Events.ExecuteOnErrorGetPregameWinProbabilities(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPregameWinProbabilitiesApiResponse"/>
        /// </summary>
        public partial class GetPregameWinProbabilitiesApiResponse : CollegeFootballData.Client.ApiResponse, IGetPregameWinProbabilitiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPregameWinProbabilitiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPregameWinProbabilitiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPregameWinProbabilitiesApiResponse(ILogger<GetPregameWinProbabilitiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PregameWinProbability>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PregameWinProbability>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PregameWinProbability>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWinProbability(ref int gameId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="gameId"></param>
        private void AfterGetWinProbabilityDefaultImplementation(IGetWinProbabilityApiResponse apiResponseLocalVar, int gameId)
        {
            bool suppressDefaultLog = false;
            AfterGetWinProbability(ref suppressDefaultLog, apiResponseLocalVar, gameId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="gameId"></param>
        partial void AfterGetWinProbability(ref bool suppressDefaultLog, IGetWinProbabilityApiResponse apiResponseLocalVar, int gameId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="gameId"></param>
        private void OnErrorGetWinProbabilityDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int gameId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWinProbability(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, gameId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="gameId"></param>
        partial void OnErrorGetWinProbability(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int gameId);

        /// <summary>
        ///  Query play win probabilities by game
        /// </summary>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWinProbabilityApiResponse"/>&gt;</returns>
        public async Task<IGetWinProbabilityApiResponse?> GetWinProbabilityOrDefaultAsync(int gameId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWinProbabilityAsync(gameId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Query play win probabilities by game
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Required game ID filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWinProbabilityApiResponse"/>&gt;</returns>
        public async Task<IGetWinProbabilityApiResponse> GetWinProbabilityAsync(int gameId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetWinProbability(ref gameId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/metrics/wp";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["gameId"] = ClientUtils.ParameterToString(gameId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWinProbabilityApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWinProbabilityApiResponse>();

                        GetWinProbabilityApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/metrics/wp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWinProbabilityDefaultImplementation(apiResponseLocalVar, gameId);

                        Events.ExecuteOnGetWinProbability(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWinProbabilityDefaultImplementation(e, "/metrics/wp", uriBuilderLocalVar.Path, gameId);
                Events.ExecuteOnErrorGetWinProbability(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWinProbabilityApiResponse"/>
        /// </summary>
        public partial class GetWinProbabilityApiResponse : CollegeFootballData.Client.ApiResponse, IGetWinProbabilityApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWinProbabilityApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWinProbabilityApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWinProbabilityApiResponse(ILogger<GetWinProbabilityApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayWinProbability>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayWinProbability>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayWinProbability>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
