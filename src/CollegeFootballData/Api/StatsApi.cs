// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.7.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CollegeFootballData.Client;
using CollegeFootballData.Model;
using System.Diagnostics.CodeAnalysis;

namespace CollegeFootballData.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStatsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StatsApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced statistics aggregated by game
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedGameStatsApiResponse"/>&gt;</returns>
        Task<IGetAdvancedGameStatsApiResponse> GetAdvancedGameStatsAsync(Option<int> year = default, Option<string> team = default, Option<double> week = default, Option<string> opponent = default, Option<bool> excludeGarbageTime = default, Option<SeasonType> seasonType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced statistics aggregated by game
        /// </remarks>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedGameStatsApiResponse"/>?&gt;</returns>
        Task<IGetAdvancedGameStatsApiResponse?> GetAdvancedGameStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<double> week = default, Option<string> opponent = default, Option<bool> excludeGarbageTime = default, Option<SeasonType> seasonType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced season statistics for teams
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedSeasonStatsApiResponse"/>&gt;</returns>
        Task<IGetAdvancedSeasonStatsApiResponse> GetAdvancedSeasonStatsAsync(Option<int> year = default, Option<string> team = default, Option<bool> excludeGarbageTime = default, Option<int> startWeek = default, Option<int> endWeek = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced season statistics for teams
        /// </remarks>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedSeasonStatsApiResponse"/>?&gt;</returns>
        Task<IGetAdvancedSeasonStatsApiResponse?> GetAdvancedSeasonStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<bool> excludeGarbageTime = default, Option<int> startWeek = default, Option<int> endWeek = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets team statistical categories
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCategoriesApiResponse"/>&gt;</returns>
        Task<IGetCategoriesApiResponse> GetCategoriesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets team statistical categories
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCategoriesApiResponse"/>?&gt;</returns>
        Task<IGetCategoriesApiResponse?> GetCategoriesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated player statistics for a given season
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerSeasonStatsApiResponse"/>&gt;</returns>
        Task<IGetPlayerSeasonStatsApiResponse> GetPlayerSeasonStatsAsync(int year, Option<string> conference = default, Option<string> team = default, Option<int> startWeek = default, Option<int> endWeek = default, Option<SeasonType> seasonType = default, Option<string> category = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated player statistics for a given season
        /// </remarks>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerSeasonStatsApiResponse"/>?&gt;</returns>
        Task<IGetPlayerSeasonStatsApiResponse?> GetPlayerSeasonStatsOrDefaultAsync(int year, Option<string> conference = default, Option<string> team = default, Option<int> startWeek = default, Option<int> endWeek = default, Option<SeasonType> seasonType = default, Option<string> category = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated team season statistics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTeamStatsApiResponse"/>&gt;</returns>
        Task<IGetTeamStatsApiResponse> GetTeamStatsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<int> startWeek = default, Option<int> endWeek = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated team season statistics
        /// </remarks>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTeamStatsApiResponse"/>?&gt;</returns>
        Task<IGetTeamStatsApiResponse?> GetTeamStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<int> startWeek = default, Option<int> endWeek = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAdvancedGameStatsApiResponse"/>
    /// </summary>
    public interface IGetAdvancedGameStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<AdvancedGameStat>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAdvancedSeasonStatsApiResponse"/>
    /// </summary>
    public interface IGetAdvancedSeasonStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<AdvancedSeasonStat>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetCategoriesApiResponse"/>
    /// </summary>
    public interface IGetCategoriesApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlayerSeasonStatsApiResponse"/>
    /// </summary>
    public interface IGetPlayerSeasonStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<PlayerStat>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTeamStatsApiResponse"/>
    /// </summary>
    public interface IGetTeamStatsApiResponse : CollegeFootballData.Client.IApiResponse, IOk<List<TeamStat>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StatsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAdvancedGameStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAdvancedGameStats;

        internal void ExecuteOnGetAdvancedGameStats(StatsApi.GetAdvancedGameStatsApiResponse apiResponse)
        {
            OnGetAdvancedGameStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAdvancedGameStats(Exception exception)
        {
            OnErrorGetAdvancedGameStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAdvancedSeasonStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAdvancedSeasonStats;

        internal void ExecuteOnGetAdvancedSeasonStats(StatsApi.GetAdvancedSeasonStatsApiResponse apiResponse)
        {
            OnGetAdvancedSeasonStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAdvancedSeasonStats(Exception exception)
        {
            OnErrorGetAdvancedSeasonStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCategories;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCategories;

        internal void ExecuteOnGetCategories(StatsApi.GetCategoriesApiResponse apiResponse)
        {
            OnGetCategories?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCategories(Exception exception)
        {
            OnErrorGetCategories?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPlayerSeasonStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPlayerSeasonStats;

        internal void ExecuteOnGetPlayerSeasonStats(StatsApi.GetPlayerSeasonStatsApiResponse apiResponse)
        {
            OnGetPlayerSeasonStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayerSeasonStats(Exception exception)
        {
            OnErrorGetPlayerSeasonStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTeamStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTeamStats;

        internal void ExecuteOnGetTeamStats(StatsApi.GetTeamStatsApiResponse apiResponse)
        {
            OnGetTeamStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTeamStats(Exception exception)
        {
            OnErrorGetTeamStats?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StatsApi : IStatsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StatsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StatsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi(ILogger<StatsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StatsApiEvents statsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StatsApi>();
            HttpClient = httpClient;
            Events = statsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetAdvancedGameStats(ref Option<int> year, ref Option<string> team, ref Option<double> week, ref Option<string> opponent, ref Option<bool> excludeGarbageTime, ref Option<SeasonType> seasonType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="opponent"></param>
        /// <returns></returns>
        private void ValidateGetAdvancedGameStats(Option<string> team, Option<string> opponent)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (opponent.IsSet && opponent.Value == null)
                throw new ArgumentNullException(nameof(opponent));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="week"></param>
        /// <param name="opponent"></param>
        /// <param name="excludeGarbageTime"></param>
        /// <param name="seasonType"></param>
        private void AfterGetAdvancedGameStatsDefaultImplementation(IGetAdvancedGameStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<double> week, Option<string> opponent, Option<bool> excludeGarbageTime, Option<SeasonType> seasonType)
        {
            bool suppressDefaultLog = false;
            AfterGetAdvancedGameStats(ref suppressDefaultLog, apiResponseLocalVar, year, team, week, opponent, excludeGarbageTime, seasonType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="week"></param>
        /// <param name="opponent"></param>
        /// <param name="excludeGarbageTime"></param>
        /// <param name="seasonType"></param>
        partial void AfterGetAdvancedGameStats(ref bool suppressDefaultLog, IGetAdvancedGameStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<double> week, Option<string> opponent, Option<bool> excludeGarbageTime, Option<SeasonType> seasonType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="week"></param>
        /// <param name="opponent"></param>
        /// <param name="excludeGarbageTime"></param>
        /// <param name="seasonType"></param>
        private void OnErrorGetAdvancedGameStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<double> week, Option<string> opponent, Option<bool> excludeGarbageTime, Option<SeasonType> seasonType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAdvancedGameStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, week, opponent, excludeGarbageTime, seasonType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="week"></param>
        /// <param name="opponent"></param>
        /// <param name="excludeGarbageTime"></param>
        /// <param name="seasonType"></param>
        partial void OnErrorGetAdvancedGameStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<double> week, Option<string> opponent, Option<bool> excludeGarbageTime, Option<SeasonType> seasonType);

        /// <summary>
        ///  Retrieves advanced statistics aggregated by game
        /// </summary>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedGameStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdvancedGameStatsApiResponse?> GetAdvancedGameStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<double> week = default, Option<string> opponent = default, Option<bool> excludeGarbageTime = default, Option<SeasonType> seasonType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAdvancedGameStatsAsync(year, team, week, opponent, excludeGarbageTime, seasonType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves advanced statistics aggregated by game
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedGameStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdvancedGameStatsApiResponse> GetAdvancedGameStatsAsync(Option<int> year = default, Option<string> team = default, Option<double> week = default, Option<string> opponent = default, Option<bool> excludeGarbageTime = default, Option<SeasonType> seasonType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAdvancedGameStats(team, opponent);

                FormatGetAdvancedGameStats(ref year, ref team, ref week, ref opponent, ref excludeGarbageTime, ref seasonType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/stats/game/advanced";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (week.IsSet)
                        parseQueryStringLocalVar["week"] = ClientUtils.ParameterToString(week.Value);

                    if (opponent.IsSet)
                        parseQueryStringLocalVar["opponent"] = ClientUtils.ParameterToString(opponent.Value);

                    if (excludeGarbageTime.IsSet)
                        parseQueryStringLocalVar["excludeGarbageTime"] = ClientUtils.ParameterToString(excludeGarbageTime.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAdvancedGameStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAdvancedGameStatsApiResponse>();

                        GetAdvancedGameStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/stats/game/advanced", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAdvancedGameStatsDefaultImplementation(apiResponseLocalVar, year, team, week, opponent, excludeGarbageTime, seasonType);

                        Events.ExecuteOnGetAdvancedGameStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAdvancedGameStatsDefaultImplementation(e, "/stats/game/advanced", uriBuilderLocalVar.Path, year, team, week, opponent, excludeGarbageTime, seasonType);
                Events.ExecuteOnErrorGetAdvancedGameStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAdvancedGameStatsApiResponse"/>
        /// </summary>
        public partial class GetAdvancedGameStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetAdvancedGameStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAdvancedGameStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAdvancedGameStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAdvancedGameStatsApiResponse(ILogger<GetAdvancedGameStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AdvancedGameStat>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AdvancedGameStat>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AdvancedGameStat>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAdvancedSeasonStats(ref Option<int> year, ref Option<string> team, ref Option<bool> excludeGarbageTime, ref Option<int> startWeek, ref Option<int> endWeek);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <returns></returns>
        private void ValidateGetAdvancedSeasonStats(Option<string> team)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="excludeGarbageTime"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        private void AfterGetAdvancedSeasonStatsDefaultImplementation(IGetAdvancedSeasonStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<bool> excludeGarbageTime, Option<int> startWeek, Option<int> endWeek)
        {
            bool suppressDefaultLog = false;
            AfterGetAdvancedSeasonStats(ref suppressDefaultLog, apiResponseLocalVar, year, team, excludeGarbageTime, startWeek, endWeek);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="excludeGarbageTime"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        partial void AfterGetAdvancedSeasonStats(ref bool suppressDefaultLog, IGetAdvancedSeasonStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<bool> excludeGarbageTime, Option<int> startWeek, Option<int> endWeek);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="excludeGarbageTime"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        private void OnErrorGetAdvancedSeasonStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<bool> excludeGarbageTime, Option<int> startWeek, Option<int> endWeek)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAdvancedSeasonStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, excludeGarbageTime, startWeek, endWeek);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="excludeGarbageTime"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        partial void OnErrorGetAdvancedSeasonStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<bool> excludeGarbageTime, Option<int> startWeek, Option<int> endWeek);

        /// <summary>
        ///  Retrieves advanced season statistics for teams
        /// </summary>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedSeasonStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdvancedSeasonStatsApiResponse?> GetAdvancedSeasonStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<bool> excludeGarbageTime = default, Option<int> startWeek = default, Option<int> endWeek = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAdvancedSeasonStatsAsync(year, team, excludeGarbageTime, startWeek, endWeek, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves advanced season statistics for teams
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdvancedSeasonStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAdvancedSeasonStatsApiResponse> GetAdvancedSeasonStatsAsync(Option<int> year = default, Option<string> team = default, Option<bool> excludeGarbageTime = default, Option<int> startWeek = default, Option<int> endWeek = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAdvancedSeasonStats(team);

                FormatGetAdvancedSeasonStats(ref year, ref team, ref excludeGarbageTime, ref startWeek, ref endWeek);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/stats/season/advanced";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (excludeGarbageTime.IsSet)
                        parseQueryStringLocalVar["excludeGarbageTime"] = ClientUtils.ParameterToString(excludeGarbageTime.Value);

                    if (startWeek.IsSet)
                        parseQueryStringLocalVar["startWeek"] = ClientUtils.ParameterToString(startWeek.Value);

                    if (endWeek.IsSet)
                        parseQueryStringLocalVar["endWeek"] = ClientUtils.ParameterToString(endWeek.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAdvancedSeasonStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAdvancedSeasonStatsApiResponse>();

                        GetAdvancedSeasonStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/stats/season/advanced", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAdvancedSeasonStatsDefaultImplementation(apiResponseLocalVar, year, team, excludeGarbageTime, startWeek, endWeek);

                        Events.ExecuteOnGetAdvancedSeasonStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAdvancedSeasonStatsDefaultImplementation(e, "/stats/season/advanced", uriBuilderLocalVar.Path, year, team, excludeGarbageTime, startWeek, endWeek);
                Events.ExecuteOnErrorGetAdvancedSeasonStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAdvancedSeasonStatsApiResponse"/>
        /// </summary>
        public partial class GetAdvancedSeasonStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetAdvancedSeasonStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAdvancedSeasonStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAdvancedSeasonStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAdvancedSeasonStatsApiResponse(ILogger<GetAdvancedSeasonStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AdvancedSeasonStat>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AdvancedSeasonStat>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AdvancedSeasonStat>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetCategoriesDefaultImplementation(IGetCategoriesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetCategories(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetCategories(ref bool suppressDefaultLog, IGetCategoriesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetCategoriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCategories(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetCategories(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Gets team statistical categories
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCategoriesApiResponse"/>&gt;</returns>
        public async Task<IGetCategoriesApiResponse?> GetCategoriesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCategoriesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Gets team statistical categories
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCategoriesApiResponse"/>&gt;</returns>
        public async Task<IGetCategoriesApiResponse> GetCategoriesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/stats/categories";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCategoriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCategoriesApiResponse>();

                        GetCategoriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/stats/categories", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCategoriesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetCategories(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCategoriesDefaultImplementation(e, "/stats/categories", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetCategories(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCategoriesApiResponse"/>
        /// </summary>
        public partial class GetCategoriesApiResponse : CollegeFootballData.Client.ApiResponse, IGetCategoriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCategoriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCategoriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCategoriesApiResponse(ILogger<GetCategoriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPlayerSeasonStats(ref int year, ref Option<string> conference, ref Option<string> team, ref Option<int> startWeek, ref Option<int> endWeek, ref Option<SeasonType> seasonType, ref Option<string> category);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="category"></param>
        /// <returns></returns>
        private void ValidateGetPlayerSeasonStats(Option<string> conference, Option<string> team, Option<string> category)
        {
            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        /// <param name="seasonType"></param>
        /// <param name="category"></param>
        private void AfterGetPlayerSeasonStatsDefaultImplementation(IGetPlayerSeasonStatsApiResponse apiResponseLocalVar, int year, Option<string> conference, Option<string> team, Option<int> startWeek, Option<int> endWeek, Option<SeasonType> seasonType, Option<string> category)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayerSeasonStats(ref suppressDefaultLog, apiResponseLocalVar, year, conference, team, startWeek, endWeek, seasonType, category);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        /// <param name="seasonType"></param>
        /// <param name="category"></param>
        partial void AfterGetPlayerSeasonStats(ref bool suppressDefaultLog, IGetPlayerSeasonStatsApiResponse apiResponseLocalVar, int year, Option<string> conference, Option<string> team, Option<int> startWeek, Option<int> endWeek, Option<SeasonType> seasonType, Option<string> category);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        /// <param name="seasonType"></param>
        /// <param name="category"></param>
        private void OnErrorGetPlayerSeasonStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<string> conference, Option<string> team, Option<int> startWeek, Option<int> endWeek, Option<SeasonType> seasonType, Option<string> category)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlayerSeasonStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, conference, team, startWeek, endWeek, seasonType, category);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="conference"></param>
        /// <param name="team"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        /// <param name="seasonType"></param>
        /// <param name="category"></param>
        partial void OnErrorGetPlayerSeasonStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int year, Option<string> conference, Option<string> team, Option<int> startWeek, Option<int> endWeek, Option<SeasonType> seasonType, Option<string> category);

        /// <summary>
        ///  Retrieves aggregated player statistics for a given season
        /// </summary>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerSeasonStatsApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerSeasonStatsApiResponse?> GetPlayerSeasonStatsOrDefaultAsync(int year, Option<string> conference = default, Option<string> team = default, Option<int> startWeek = default, Option<int> endWeek = default, Option<SeasonType> seasonType = default, Option<string> category = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayerSeasonStatsAsync(year, conference, team, startWeek, endWeek, seasonType, category, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves aggregated player statistics for a given season
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerSeasonStatsApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerSeasonStatsApiResponse> GetPlayerSeasonStatsAsync(int year, Option<string> conference = default, Option<string> team = default, Option<int> startWeek = default, Option<int> endWeek = default, Option<SeasonType> seasonType = default, Option<string> category = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPlayerSeasonStats(conference, team, category);

                FormatGetPlayerSeasonStats(ref year, ref conference, ref team, ref startWeek, ref endWeek, ref seasonType, ref category);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/stats/player/season";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (startWeek.IsSet)
                        parseQueryStringLocalVar["startWeek"] = ClientUtils.ParameterToString(startWeek.Value);

                    if (endWeek.IsSet)
                        parseQueryStringLocalVar["endWeek"] = ClientUtils.ParameterToString(endWeek.Value);

                    if (seasonType.IsSet)
                        parseQueryStringLocalVar["seasonType"] = ClientUtils.ParameterToString(seasonType.Value);

                    if (category.IsSet)
                        parseQueryStringLocalVar["category"] = ClientUtils.ParameterToString(category.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayerSeasonStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayerSeasonStatsApiResponse>();

                        GetPlayerSeasonStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/stats/player/season", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayerSeasonStatsDefaultImplementation(apiResponseLocalVar, year, conference, team, startWeek, endWeek, seasonType, category);

                        Events.ExecuteOnGetPlayerSeasonStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayerSeasonStatsDefaultImplementation(e, "/stats/player/season", uriBuilderLocalVar.Path, year, conference, team, startWeek, endWeek, seasonType, category);
                Events.ExecuteOnErrorGetPlayerSeasonStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayerSeasonStatsApiResponse"/>
        /// </summary>
        public partial class GetPlayerSeasonStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetPlayerSeasonStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayerSeasonStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayerSeasonStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayerSeasonStatsApiResponse(ILogger<GetPlayerSeasonStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PlayerStat>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PlayerStat>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PlayerStat>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTeamStats(ref Option<int> year, ref Option<string> team, ref Option<string> conference, ref Option<int> startWeek, ref Option<int> endWeek);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <returns></returns>
        private void ValidateGetTeamStats(Option<string> team, Option<string> conference)
        {
            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team));

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        private void AfterGetTeamStatsDefaultImplementation(IGetTeamStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<int> startWeek, Option<int> endWeek)
        {
            bool suppressDefaultLog = false;
            AfterGetTeamStats(ref suppressDefaultLog, apiResponseLocalVar, year, team, conference, startWeek, endWeek);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        partial void AfterGetTeamStats(ref bool suppressDefaultLog, IGetTeamStatsApiResponse apiResponseLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<int> startWeek, Option<int> endWeek);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        private void OnErrorGetTeamStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<int> startWeek, Option<int> endWeek)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTeamStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, year, team, conference, startWeek, endWeek);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="year"></param>
        /// <param name="team"></param>
        /// <param name="conference"></param>
        /// <param name="startWeek"></param>
        /// <param name="endWeek"></param>
        partial void OnErrorGetTeamStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> year, Option<string> team, Option<string> conference, Option<int> startWeek, Option<int> endWeek);

        /// <summary>
        ///  Retrieves aggregated team season statistics
        /// </summary>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTeamStatsApiResponse"/>&gt;</returns>
        public async Task<IGetTeamStatsApiResponse?> GetTeamStatsOrDefaultAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<int> startWeek = default, Option<int> endWeek = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTeamStatsAsync(year, team, conference, startWeek, endWeek, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves aggregated team season statistics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTeamStatsApiResponse"/>&gt;</returns>
        public async Task<IGetTeamStatsApiResponse> GetTeamStatsAsync(Option<int> year = default, Option<string> team = default, Option<string> conference = default, Option<int> startWeek = default, Option<int> endWeek = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTeamStats(team, conference);

                FormatGetTeamStats(ref year, ref team, ref conference, ref startWeek, ref endWeek);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/stats/season";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (year.IsSet)
                        parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year.Value);

                    if (team.IsSet)
                        parseQueryStringLocalVar["team"] = ClientUtils.ParameterToString(team.Value);

                    if (conference.IsSet)
                        parseQueryStringLocalVar["conference"] = ClientUtils.ParameterToString(conference.Value);

                    if (startWeek.IsSet)
                        parseQueryStringLocalVar["startWeek"] = ClientUtils.ParameterToString(startWeek.Value);

                    if (endWeek.IsSet)
                        parseQueryStringLocalVar["endWeek"] = ClientUtils.ParameterToString(endWeek.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTeamStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTeamStatsApiResponse>();

                        GetTeamStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/stats/season", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTeamStatsDefaultImplementation(apiResponseLocalVar, year, team, conference, startWeek, endWeek);

                        Events.ExecuteOnGetTeamStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTeamStatsDefaultImplementation(e, "/stats/season", uriBuilderLocalVar.Path, year, team, conference, startWeek, endWeek);
                Events.ExecuteOnErrorGetTeamStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTeamStatsApiResponse"/>
        /// </summary>
        public partial class GetTeamStatsApiResponse : CollegeFootballData.Client.ApiResponse, IGetTeamStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTeamStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTeamStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTeamStatsApiResponse(ILogger<GetTeamStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TeamStat>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TeamStat>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TeamStat>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
