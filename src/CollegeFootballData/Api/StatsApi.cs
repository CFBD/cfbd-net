/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CollegeFootballData.Client;
using CollegeFootballData.Model;

namespace CollegeFootballData.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced statistics aggregated by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AdvancedGameStat&gt;</returns>
        List<AdvancedGameStat> GetAdvancedGameStats(int? year = default(int?), string? team = default(string?), double? week = default(double?), string? opponent = default(string?), bool? excludeGarbageTime = default(bool?), SeasonType? seasonType = default(SeasonType?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced statistics aggregated by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AdvancedGameStat&gt;</returns>
        ApiResponse<List<AdvancedGameStat>> GetAdvancedGameStatsWithHttpInfo(int? year = default(int?), string? team = default(string?), double? week = default(double?), string? opponent = default(string?), bool? excludeGarbageTime = default(bool?), SeasonType? seasonType = default(SeasonType?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced season statistics for teams
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AdvancedSeasonStat&gt;</returns>
        List<AdvancedSeasonStat> GetAdvancedSeasonStats(int? year = default(int?), string? team = default(string?), bool? excludeGarbageTime = default(bool?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced season statistics for teams
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AdvancedSeasonStat&gt;</returns>
        ApiResponse<List<AdvancedSeasonStat>> GetAdvancedSeasonStatsWithHttpInfo(int? year = default(int?), string? team = default(string?), bool? excludeGarbageTime = default(bool?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets team statistical categories
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetCategories(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets team statistical categories
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetCategoriesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated player statistics for a given season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerStat&gt;</returns>
        List<PlayerStat> GetPlayerSeasonStats(int year, string? conference = default(string?), string? team = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated player statistics for a given season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerStat&gt;</returns>
        ApiResponse<List<PlayerStat>> GetPlayerSeasonStatsWithHttpInfo(int year, string? conference = default(string?), string? team = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated team season statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamStat&gt;</returns>
        List<TeamStat> GetTeamStats(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated team season statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamStat&gt;</returns>
        ApiResponse<List<TeamStat>> GetTeamStatsWithHttpInfo(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced statistics aggregated by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AdvancedGameStat&gt;</returns>
        System.Threading.Tasks.Task<List<AdvancedGameStat>> GetAdvancedGameStatsAsync(int? year = default(int?), string? team = default(string?), double? week = default(double?), string? opponent = default(string?), bool? excludeGarbageTime = default(bool?), SeasonType? seasonType = default(SeasonType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced statistics aggregated by game
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AdvancedGameStat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdvancedGameStat>>> GetAdvancedGameStatsWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), double? week = default(double?), string? opponent = default(string?), bool? excludeGarbageTime = default(bool?), SeasonType? seasonType = default(SeasonType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced season statistics for teams
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AdvancedSeasonStat&gt;</returns>
        System.Threading.Tasks.Task<List<AdvancedSeasonStat>> GetAdvancedSeasonStatsAsync(int? year = default(int?), string? team = default(string?), bool? excludeGarbageTime = default(bool?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves advanced season statistics for teams
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AdvancedSeasonStat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AdvancedSeasonStat>>> GetAdvancedSeasonStatsWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), bool? excludeGarbageTime = default(bool?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets team statistical categories
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetCategoriesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets team statistical categories
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetCategoriesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated player statistics for a given season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerStat&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerStat>> GetPlayerSeasonStatsAsync(int year, string? conference = default(string?), string? team = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated player statistics for a given season
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerStat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerStat>>> GetPlayerSeasonStatsWithHttpInfoAsync(int year, string? conference = default(string?), string? team = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated team season statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamStat&gt;</returns>
        System.Threading.Tasks.Task<List<TeamStat>> GetTeamStatsAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves aggregated team season statistics
        /// </remarks>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamStat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamStat>>> GetTeamStatsWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApi : IStatsApiSync, IStatsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatsApi : IStatsApi
    {
        private CollegeFootballData.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi(string basePath)
        {
            this.Configuration = CollegeFootballData.Client.Configuration.MergeConfigurations(
                CollegeFootballData.Client.GlobalConfiguration.Instance,
                new CollegeFootballData.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatsApi(CollegeFootballData.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CollegeFootballData.Client.Configuration.MergeConfigurations(
                CollegeFootballData.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CollegeFootballData.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatsApi(CollegeFootballData.Client.ISynchronousClient client, CollegeFootballData.Client.IAsynchronousClient asyncClient, CollegeFootballData.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CollegeFootballData.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CollegeFootballData.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CollegeFootballData.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CollegeFootballData.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CollegeFootballData.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieves advanced statistics aggregated by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AdvancedGameStat&gt;</returns>
        public List<AdvancedGameStat> GetAdvancedGameStats(int? year = default(int?), string? team = default(string?), double? week = default(double?), string? opponent = default(string?), bool? excludeGarbageTime = default(bool?), SeasonType? seasonType = default(SeasonType?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<AdvancedGameStat>> localVarResponse = GetAdvancedGameStatsWithHttpInfo(year, team, week, opponent, excludeGarbageTime, seasonType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves advanced statistics aggregated by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AdvancedGameStat&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<AdvancedGameStat>> GetAdvancedGameStatsWithHttpInfo(int? year = default(int?), string? team = default(string?), double? week = default(double?), string? opponent = default(string?), bool? excludeGarbageTime = default(bool?), SeasonType? seasonType = default(SeasonType?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (opponent != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "opponent", opponent));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }

            localVarRequestOptions.Operation = "StatsApi.GetAdvancedGameStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AdvancedGameStat>>("/stats/game/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdvancedGameStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves advanced statistics aggregated by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AdvancedGameStat&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdvancedGameStat>> GetAdvancedGameStatsAsync(int? year = default(int?), string? team = default(string?), double? week = default(double?), string? opponent = default(string?), bool? excludeGarbageTime = default(bool?), SeasonType? seasonType = default(SeasonType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<AdvancedGameStat>> localVarResponse = await GetAdvancedGameStatsWithHttpInfoAsync(year, team, week, opponent, excludeGarbageTime, seasonType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves advanced statistics aggregated by game
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="week">Optional week filter (optional)</param>
        /// <param name="opponent">Optional opponent filter (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AdvancedGameStat&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<AdvancedGameStat>>> GetAdvancedGameStatsWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), double? week = default(double?), string? opponent = default(string?), bool? excludeGarbageTime = default(bool?), SeasonType? seasonType = default(SeasonType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (week != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "week", week));
            }
            if (opponent != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "opponent", opponent));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }

            localVarRequestOptions.Operation = "StatsApi.GetAdvancedGameStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AdvancedGameStat>>("/stats/game/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdvancedGameStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves advanced season statistics for teams
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AdvancedSeasonStat&gt;</returns>
        public List<AdvancedSeasonStat> GetAdvancedSeasonStats(int? year = default(int?), string? team = default(string?), bool? excludeGarbageTime = default(bool?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<AdvancedSeasonStat>> localVarResponse = GetAdvancedSeasonStatsWithHttpInfo(year, team, excludeGarbageTime, startWeek, endWeek);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves advanced season statistics for teams
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AdvancedSeasonStat&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<AdvancedSeasonStat>> GetAdvancedSeasonStatsWithHttpInfo(int? year = default(int?), string? team = default(string?), bool? excludeGarbageTime = default(bool?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }
            if (startWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "startWeek", startWeek));
            }
            if (endWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "endWeek", endWeek));
            }

            localVarRequestOptions.Operation = "StatsApi.GetAdvancedSeasonStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AdvancedSeasonStat>>("/stats/season/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdvancedSeasonStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves advanced season statistics for teams
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AdvancedSeasonStat&gt;</returns>
        public async System.Threading.Tasks.Task<List<AdvancedSeasonStat>> GetAdvancedSeasonStatsAsync(int? year = default(int?), string? team = default(string?), bool? excludeGarbageTime = default(bool?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<AdvancedSeasonStat>> localVarResponse = await GetAdvancedSeasonStatsWithHttpInfoAsync(year, team, excludeGarbageTime, startWeek, endWeek, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves advanced season statistics for teams
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="excludeGarbageTime">Garbage time exclusion filter, defaults to false (optional)</param>
        /// <param name="startWeek">Optional start week range filter (optional)</param>
        /// <param name="endWeek">Optional end week range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AdvancedSeasonStat&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<AdvancedSeasonStat>>> GetAdvancedSeasonStatsWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), bool? excludeGarbageTime = default(bool?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (excludeGarbageTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "excludeGarbageTime", excludeGarbageTime));
            }
            if (startWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "startWeek", startWeek));
            }
            if (endWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "endWeek", endWeek));
            }

            localVarRequestOptions.Operation = "StatsApi.GetAdvancedSeasonStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AdvancedSeasonStat>>("/stats/season/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdvancedSeasonStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets team statistical categories
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetCategories(int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<string>> localVarResponse = GetCategoriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets team statistical categories
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<string>> GetCategoriesWithHttpInfo(int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "StatsApi.GetCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/stats/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets team statistical categories
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetCategoriesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<string>> localVarResponse = await GetCategoriesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets team statistical categories
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<string>>> GetCategoriesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "StatsApi.GetCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/stats/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves aggregated player statistics for a given season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerStat&gt;</returns>
        public List<PlayerStat> GetPlayerSeasonStats(int year, string? conference = default(string?), string? team = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerStat>> localVarResponse = GetPlayerSeasonStatsWithHttpInfo(year, conference, team, startWeek, endWeek, seasonType, category);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves aggregated player statistics for a given season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerStat&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<PlayerStat>> GetPlayerSeasonStatsWithHttpInfo(int year, string? conference = default(string?), string? team = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (startWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "startWeek", startWeek));
            }
            if (endWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "endWeek", endWeek));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }

            localVarRequestOptions.Operation = "StatsApi.GetPlayerSeasonStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayerStat>>("/stats/player/season", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerSeasonStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves aggregated player statistics for a given season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerStat&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerStat>> GetPlayerSeasonStatsAsync(int year, string? conference = default(string?), string? team = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<PlayerStat>> localVarResponse = await GetPlayerSeasonStatsWithHttpInfoAsync(year, conference, team, startWeek, endWeek, seasonType, category, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves aggregated player statistics for a given season
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Required year filter</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="team">Optional team filter (optional)</param>
        /// <param name="startWeek">Optional starting week range (optional)</param>
        /// <param name="endWeek">Optional ending week range (optional)</param>
        /// <param name="seasonType">Optional season type filter (optional)</param>
        /// <param name="category">Optional category filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerStat&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<PlayerStat>>> GetPlayerSeasonStatsWithHttpInfoAsync(int year, string? conference = default(string?), string? team = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), SeasonType? seasonType = default(SeasonType?), string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (startWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "startWeek", startWeek));
            }
            if (endWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "endWeek", endWeek));
            }
            if (seasonType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "seasonType", seasonType));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }

            localVarRequestOptions.Operation = "StatsApi.GetPlayerSeasonStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayerStat>>("/stats/player/season", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerSeasonStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves aggregated team season statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamStat&gt;</returns>
        public List<TeamStat> GetTeamStats(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.ApiResponse<List<TeamStat>> localVarResponse = GetTeamStatsWithHttpInfo(year, team, conference, startWeek, endWeek);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves aggregated team season statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamStat&gt;</returns>
        public CollegeFootballData.Client.ApiResponse<List<TeamStat>> GetTeamStatsWithHttpInfo(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0)
        {
            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (startWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "startWeek", startWeek));
            }
            if (endWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "endWeek", endWeek));
            }

            localVarRequestOptions.Operation = "StatsApi.GetTeamStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamStat>>("/stats/season", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves aggregated team season statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamStat&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamStat>> GetTeamStatsAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            CollegeFootballData.Client.ApiResponse<List<TeamStat>> localVarResponse = await GetTeamStatsWithHttpInfoAsync(year, team, conference, startWeek, endWeek, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves aggregated team season statistics
        /// </summary>
        /// <exception cref="CollegeFootballData.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter, required if team not specified (optional)</param>
        /// <param name="team">Team filter, required if year not specified (optional)</param>
        /// <param name="conference">Optional conference filter (optional)</param>
        /// <param name="startWeek">Optional week start range filter (optional)</param>
        /// <param name="endWeek">Optional week end range filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamStat&gt;)</returns>
        public async System.Threading.Tasks.Task<CollegeFootballData.Client.ApiResponse<List<TeamStat>>> GetTeamStatsWithHttpInfoAsync(int? year = default(int?), string? team = default(string?), string? conference = default(string?), int? startWeek = default(int?), int? endWeek = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CollegeFootballData.Client.RequestOptions localVarRequestOptions = new CollegeFootballData.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CollegeFootballData.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CollegeFootballData.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (conference != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "conference", conference));
            }
            if (startWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "startWeek", startWeek));
            }
            if (endWeek != null)
            {
                localVarRequestOptions.QueryParameters.Add(CollegeFootballData.Client.ClientUtils.ParameterToMultiMap("", "endWeek", endWeek));
            }

            localVarRequestOptions.Operation = "StatsApi.GetTeamStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamStat>>("/stats/season", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
