// <auto-generated/>
#pragma warning disable CS0618
using CollegeFootballData.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace CollegeFootballData.Stats.Game.Advanced
{
    /// <summary>
    /// Builds and executes requests for operations under \stats\game\advanced
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AdvancedRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AdvancedRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/stats/game/advanced{?excludeGarbageTime*,opponent*,seasonType*,team*,week*,year*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AdvancedRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/stats/game/advanced{?excludeGarbageTime*,opponent*,seasonType*,team*,week*,year*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves advanced statistics aggregated by game
        /// </summary>
        /// <returns>A List&lt;global::CollegeFootballData.Models.AdvancedGameStat&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::CollegeFootballData.Models.AdvancedGameStat>?> GetAsync(Action<RequestConfiguration<global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder.AdvancedRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::CollegeFootballData.Models.AdvancedGameStat>> GetAsync(Action<RequestConfiguration<global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder.AdvancedRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::CollegeFootballData.Models.AdvancedGameStat>(requestInfo, global::CollegeFootballData.Models.AdvancedGameStat.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Retrieves advanced statistics aggregated by game
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder.AdvancedRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder.AdvancedRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder WithUrl(string rawUrl)
        {
            return new global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves advanced statistics aggregated by game
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AdvancedRequestBuilderGetQueryParameters 
        {
            /// <summary>Garbage time exclusion filter, defaults to false</summary>
            [QueryParameter("excludeGarbageTime")]
            public bool? ExcludeGarbageTime { get; set; }
            /// <summary>Optional opponent filter</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("opponent")]
            public string? Opponent { get; set; }
#nullable restore
#else
            [QueryParameter("opponent")]
            public string Opponent { get; set; }
#endif
            /// <summary>Optional season type filter</summary>
            [Obsolete("This property is deprecated, use SeasonTypeAsSeasonType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("seasonType")]
            public string? SeasonType { get; set; }
#nullable restore
#else
            [QueryParameter("seasonType")]
            public string SeasonType { get; set; }
#endif
            /// <summary>Optional season type filter</summary>
            [QueryParameter("seasonType")]
            public global::CollegeFootballData.Models.SeasonType? SeasonTypeAsSeasonType { get; set; }
            /// <summary>Team filter, required if year not specified</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("team")]
            public string? Team { get; set; }
#nullable restore
#else
            [QueryParameter("team")]
            public string Team { get; set; }
#endif
            /// <summary>Optional week filter</summary>
            [QueryParameter("week")]
            public double? Week { get; set; }
            /// <summary>Year filter, required if team not specified</summary>
            [QueryParameter("year")]
            public int? Year { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AdvancedRequestBuilderGetRequestConfiguration : RequestConfiguration<global::CollegeFootballData.Stats.Game.Advanced.AdvancedRequestBuilder.AdvancedRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
