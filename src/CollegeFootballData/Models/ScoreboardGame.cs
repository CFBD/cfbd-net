// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ScoreboardGame : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The awayTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.ScoreboardGame_awayTeam? AwayTeam { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.ScoreboardGame_awayTeam AwayTeam { get; set; }
#endif
        /// <summary>The betting property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.ScoreboardGame_betting? Betting { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.ScoreboardGame_betting Betting { get; set; }
#endif
        /// <summary>The clock property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Clock { get; set; }
#nullable restore
#else
        public string Clock { get; set; }
#endif
        /// <summary>The conferenceGame property</summary>
        public bool? ConferenceGame { get; set; }
        /// <summary>The homeTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.ScoreboardGame_homeTeam? HomeTeam { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.ScoreboardGame_homeTeam HomeTeam { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The lastPlay property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastPlay { get; set; }
#nullable restore
#else
        public string LastPlay { get; set; }
#endif
        /// <summary>The neutralSite property</summary>
        public bool? NeutralSite { get; set; }
        /// <summary>The period property</summary>
        public int? Period { get; set; }
        /// <summary>The possession property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Possession { get; set; }
#nullable restore
#else
        public string Possession { get; set; }
#endif
        /// <summary>The situation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Situation { get; set; }
#nullable restore
#else
        public string Situation { get; set; }
#endif
        /// <summary>The startDate property</summary>
        public DateTimeOffset? StartDate { get; set; }
        /// <summary>The startTimeTBD property</summary>
        public bool? StartTimeTBD { get; set; }
        /// <summary>The status property</summary>
        public global::CollegeFootballData.Models.GameStatus? Status { get; set; }
        /// <summary>The tv property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tv { get; set; }
#nullable restore
#else
        public string Tv { get; set; }
#endif
        /// <summary>The venue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.ScoreboardGame_venue? Venue { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.ScoreboardGame_venue Venue { get; set; }
#endif
        /// <summary>The weather property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.ScoreboardGame_weather? Weather { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.ScoreboardGame_weather Weather { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.ScoreboardGame"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.ScoreboardGame CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.ScoreboardGame();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awayTeam", n => { AwayTeam = n.GetObjectValue<global::CollegeFootballData.Models.ScoreboardGame_awayTeam>(global::CollegeFootballData.Models.ScoreboardGame_awayTeam.CreateFromDiscriminatorValue); } },
                { "betting", n => { Betting = n.GetObjectValue<global::CollegeFootballData.Models.ScoreboardGame_betting>(global::CollegeFootballData.Models.ScoreboardGame_betting.CreateFromDiscriminatorValue); } },
                { "clock", n => { Clock = n.GetStringValue(); } },
                { "conferenceGame", n => { ConferenceGame = n.GetBoolValue(); } },
                { "homeTeam", n => { HomeTeam = n.GetObjectValue<global::CollegeFootballData.Models.ScoreboardGame_homeTeam>(global::CollegeFootballData.Models.ScoreboardGame_homeTeam.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "lastPlay", n => { LastPlay = n.GetStringValue(); } },
                { "neutralSite", n => { NeutralSite = n.GetBoolValue(); } },
                { "period", n => { Period = n.GetIntValue(); } },
                { "possession", n => { Possession = n.GetStringValue(); } },
                { "situation", n => { Situation = n.GetStringValue(); } },
                { "startDate", n => { StartDate = n.GetDateTimeOffsetValue(); } },
                { "startTimeTBD", n => { StartTimeTBD = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::CollegeFootballData.Models.GameStatus>(); } },
                { "tv", n => { Tv = n.GetStringValue(); } },
                { "venue", n => { Venue = n.GetObjectValue<global::CollegeFootballData.Models.ScoreboardGame_venue>(global::CollegeFootballData.Models.ScoreboardGame_venue.CreateFromDiscriminatorValue); } },
                { "weather", n => { Weather = n.GetObjectValue<global::CollegeFootballData.Models.ScoreboardGame_weather>(global::CollegeFootballData.Models.ScoreboardGame_weather.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::CollegeFootballData.Models.ScoreboardGame_awayTeam>("awayTeam", AwayTeam);
            writer.WriteObjectValue<global::CollegeFootballData.Models.ScoreboardGame_betting>("betting", Betting);
            writer.WriteStringValue("clock", Clock);
            writer.WriteBoolValue("conferenceGame", ConferenceGame);
            writer.WriteObjectValue<global::CollegeFootballData.Models.ScoreboardGame_homeTeam>("homeTeam", HomeTeam);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("lastPlay", LastPlay);
            writer.WriteBoolValue("neutralSite", NeutralSite);
            writer.WriteIntValue("period", Period);
            writer.WriteStringValue("possession", Possession);
            writer.WriteStringValue("situation", Situation);
            writer.WriteDateTimeOffsetValue("startDate", StartDate);
            writer.WriteBoolValue("startTimeTBD", StartTimeTBD);
            writer.WriteEnumValue<global::CollegeFootballData.Models.GameStatus>("status", Status);
            writer.WriteStringValue("tv", Tv);
            writer.WriteObjectValue<global::CollegeFootballData.Models.ScoreboardGame_venue>("venue", Venue);
            writer.WriteObjectValue<global::CollegeFootballData.Models.ScoreboardGame_weather>("weather", Weather);
        }
    }
}
#pragma warning restore CS0618
