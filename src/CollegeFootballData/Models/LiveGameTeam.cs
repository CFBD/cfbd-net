// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LiveGameTeam : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The drives property</summary>
        public int? Drives { get; set; }
        /// <summary>The epaPerPass property</summary>
        public double? EpaPerPass { get; set; }
        /// <summary>The epaPerPlay property</summary>
        public double? EpaPerPlay { get; set; }
        /// <summary>The epaPerRush property</summary>
        public double? EpaPerRush { get; set; }
        /// <summary>The explosiveness property</summary>
        public double? Explosiveness { get; set; }
        /// <summary>The homeAway property</summary>
        public global::CollegeFootballData.Models.LiveGameTeam_homeAway? HomeAway { get; set; }
        /// <summary>The lineScores property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? LineScores { get; set; }
#nullable restore
#else
        public List<int?> LineScores { get; set; }
#endif
        /// <summary>The lineYards property</summary>
        public double? LineYards { get; set; }
        /// <summary>The lineYardsPerRush property</summary>
        public double? LineYardsPerRush { get; set; }
        /// <summary>The openFieldYards property</summary>
        public double? OpenFieldYards { get; set; }
        /// <summary>The openFieldYardsPerRush property</summary>
        public double? OpenFieldYardsPerRush { get; set; }
        /// <summary>The passingDownSuccessRate property</summary>
        public double? PassingDownSuccessRate { get; set; }
        /// <summary>The passingEpa property</summary>
        public double? PassingEpa { get; set; }
        /// <summary>The plays property</summary>
        public int? Plays { get; set; }
        /// <summary>The points property</summary>
        public int? Points { get; set; }
        /// <summary>The pointsPerOpportunity property</summary>
        public double? PointsPerOpportunity { get; set; }
        /// <summary>The rushingEpa property</summary>
        public double? RushingEpa { get; set; }
        /// <summary>The scoringOpportunities property</summary>
        public int? ScoringOpportunities { get; set; }
        /// <summary>The secondLevelYards property</summary>
        public double? SecondLevelYards { get; set; }
        /// <summary>The secondLevelYardsPerRush property</summary>
        public double? SecondLevelYardsPerRush { get; set; }
        /// <summary>The standardDownSuccessRate property</summary>
        public double? StandardDownSuccessRate { get; set; }
        /// <summary>The successRate property</summary>
        public double? SuccessRate { get; set; }
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team { get; set; }
#nullable restore
#else
        public string Team { get; set; }
#endif
        /// <summary>The teamId property</summary>
        public int? TeamId { get; set; }
        /// <summary>The totalEpa property</summary>
        public double? TotalEpa { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.LiveGameTeam"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.LiveGameTeam CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.LiveGameTeam();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "drives", n => { Drives = n.GetIntValue(); } },
                { "epaPerPass", n => { EpaPerPass = n.GetDoubleValue(); } },
                { "epaPerPlay", n => { EpaPerPlay = n.GetDoubleValue(); } },
                { "epaPerRush", n => { EpaPerRush = n.GetDoubleValue(); } },
                { "explosiveness", n => { Explosiveness = n.GetDoubleValue(); } },
                { "homeAway", n => { HomeAway = n.GetEnumValue<global::CollegeFootballData.Models.LiveGameTeam_homeAway>(); } },
                { "lineScores", n => { LineScores = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "lineYards", n => { LineYards = n.GetDoubleValue(); } },
                { "lineYardsPerRush", n => { LineYardsPerRush = n.GetDoubleValue(); } },
                { "openFieldYards", n => { OpenFieldYards = n.GetDoubleValue(); } },
                { "openFieldYardsPerRush", n => { OpenFieldYardsPerRush = n.GetDoubleValue(); } },
                { "passingDownSuccessRate", n => { PassingDownSuccessRate = n.GetDoubleValue(); } },
                { "passingEpa", n => { PassingEpa = n.GetDoubleValue(); } },
                { "plays", n => { Plays = n.GetIntValue(); } },
                { "points", n => { Points = n.GetIntValue(); } },
                { "pointsPerOpportunity", n => { PointsPerOpportunity = n.GetDoubleValue(); } },
                { "rushingEpa", n => { RushingEpa = n.GetDoubleValue(); } },
                { "scoringOpportunities", n => { ScoringOpportunities = n.GetIntValue(); } },
                { "secondLevelYards", n => { SecondLevelYards = n.GetDoubleValue(); } },
                { "secondLevelYardsPerRush", n => { SecondLevelYardsPerRush = n.GetDoubleValue(); } },
                { "standardDownSuccessRate", n => { StandardDownSuccessRate = n.GetDoubleValue(); } },
                { "successRate", n => { SuccessRate = n.GetDoubleValue(); } },
                { "team", n => { Team = n.GetStringValue(); } },
                { "teamId", n => { TeamId = n.GetIntValue(); } },
                { "totalEpa", n => { TotalEpa = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("drives", Drives);
            writer.WriteDoubleValue("epaPerPass", EpaPerPass);
            writer.WriteDoubleValue("epaPerPlay", EpaPerPlay);
            writer.WriteDoubleValue("epaPerRush", EpaPerRush);
            writer.WriteDoubleValue("explosiveness", Explosiveness);
            writer.WriteEnumValue<global::CollegeFootballData.Models.LiveGameTeam_homeAway>("homeAway", HomeAway);
            writer.WriteCollectionOfPrimitiveValues<int?>("lineScores", LineScores);
            writer.WriteDoubleValue("lineYards", LineYards);
            writer.WriteDoubleValue("lineYardsPerRush", LineYardsPerRush);
            writer.WriteDoubleValue("openFieldYards", OpenFieldYards);
            writer.WriteDoubleValue("openFieldYardsPerRush", OpenFieldYardsPerRush);
            writer.WriteDoubleValue("passingDownSuccessRate", PassingDownSuccessRate);
            writer.WriteDoubleValue("passingEpa", PassingEpa);
            writer.WriteIntValue("plays", Plays);
            writer.WriteIntValue("points", Points);
            writer.WriteDoubleValue("pointsPerOpportunity", PointsPerOpportunity);
            writer.WriteDoubleValue("rushingEpa", RushingEpa);
            writer.WriteIntValue("scoringOpportunities", ScoringOpportunities);
            writer.WriteDoubleValue("secondLevelYards", SecondLevelYards);
            writer.WriteDoubleValue("secondLevelYardsPerRush", SecondLevelYardsPerRush);
            writer.WriteDoubleValue("standardDownSuccessRate", StandardDownSuccessRate);
            writer.WriteDoubleValue("successRate", SuccessRate);
            writer.WriteStringValue("team", Team);
            writer.WriteIntValue("teamId", TeamId);
            writer.WriteDoubleValue("totalEpa", TotalEpa);
        }
    }
}
#pragma warning restore CS0618
