// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlayStat : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The athleteId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AthleteId { get; set; }
#nullable restore
#else
        public string AthleteId { get; set; }
#endif
        /// <summary>The athleteName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AthleteName { get; set; }
#nullable restore
#else
        public string AthleteName { get; set; }
#endif
        /// <summary>The clock property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::CollegeFootballData.Models.PlayStat_clock? Clock { get; set; }
#nullable restore
#else
        public global::CollegeFootballData.Models.PlayStat_clock Clock { get; set; }
#endif
        /// <summary>The conference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conference { get; set; }
#nullable restore
#else
        public string Conference { get; set; }
#endif
        /// <summary>The distance property</summary>
        public double? Distance { get; set; }
        /// <summary>The down property</summary>
        public double? Down { get; set; }
        /// <summary>The driveId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DriveId { get; set; }
#nullable restore
#else
        public string DriveId { get; set; }
#endif
        /// <summary>The gameId property</summary>
        public double? GameId { get; set; }
        /// <summary>The opponent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Opponent { get; set; }
#nullable restore
#else
        public string Opponent { get; set; }
#endif
        /// <summary>The opponentScore property</summary>
        public double? OpponentScore { get; set; }
        /// <summary>The period property</summary>
        public double? Period { get; set; }
        /// <summary>The playId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayId { get; set; }
#nullable restore
#else
        public string PlayId { get; set; }
#endif
        /// <summary>The season property</summary>
        public double? Season { get; set; }
        /// <summary>The stat property</summary>
        public double? Stat { get; set; }
        /// <summary>The statType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatType { get; set; }
#nullable restore
#else
        public string StatType { get; set; }
#endif
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team { get; set; }
#nullable restore
#else
        public string Team { get; set; }
#endif
        /// <summary>The teamScore property</summary>
        public double? TeamScore { get; set; }
        /// <summary>The week property</summary>
        public double? Week { get; set; }
        /// <summary>The yardsToGoal property</summary>
        public double? YardsToGoal { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.PlayStat"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.PlayStat CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.PlayStat();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "athleteId", n => { AthleteId = n.GetStringValue(); } },
                { "athleteName", n => { AthleteName = n.GetStringValue(); } },
                { "clock", n => { Clock = n.GetObjectValue<global::CollegeFootballData.Models.PlayStat_clock>(global::CollegeFootballData.Models.PlayStat_clock.CreateFromDiscriminatorValue); } },
                { "conference", n => { Conference = n.GetStringValue(); } },
                { "distance", n => { Distance = n.GetDoubleValue(); } },
                { "down", n => { Down = n.GetDoubleValue(); } },
                { "driveId", n => { DriveId = n.GetStringValue(); } },
                { "gameId", n => { GameId = n.GetDoubleValue(); } },
                { "opponent", n => { Opponent = n.GetStringValue(); } },
                { "opponentScore", n => { OpponentScore = n.GetDoubleValue(); } },
                { "period", n => { Period = n.GetDoubleValue(); } },
                { "playId", n => { PlayId = n.GetStringValue(); } },
                { "season", n => { Season = n.GetDoubleValue(); } },
                { "stat", n => { Stat = n.GetDoubleValue(); } },
                { "statType", n => { StatType = n.GetStringValue(); } },
                { "team", n => { Team = n.GetStringValue(); } },
                { "teamScore", n => { TeamScore = n.GetDoubleValue(); } },
                { "week", n => { Week = n.GetDoubleValue(); } },
                { "yardsToGoal", n => { YardsToGoal = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("athleteId", AthleteId);
            writer.WriteStringValue("athleteName", AthleteName);
            writer.WriteObjectValue<global::CollegeFootballData.Models.PlayStat_clock>("clock", Clock);
            writer.WriteStringValue("conference", Conference);
            writer.WriteDoubleValue("distance", Distance);
            writer.WriteDoubleValue("down", Down);
            writer.WriteStringValue("driveId", DriveId);
            writer.WriteDoubleValue("gameId", GameId);
            writer.WriteStringValue("opponent", Opponent);
            writer.WriteDoubleValue("opponentScore", OpponentScore);
            writer.WriteDoubleValue("period", Period);
            writer.WriteStringValue("playId", PlayId);
            writer.WriteDoubleValue("season", Season);
            writer.WriteDoubleValue("stat", Stat);
            writer.WriteStringValue("statType", StatType);
            writer.WriteStringValue("team", Team);
            writer.WriteDoubleValue("teamScore", TeamScore);
            writer.WriteDoubleValue("week", Week);
            writer.WriteDoubleValue("yardsToGoal", YardsToGoal);
        }
    }
}
#pragma warning restore CS0618
