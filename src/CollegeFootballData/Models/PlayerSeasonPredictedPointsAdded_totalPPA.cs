// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlayerSeasonPredictedPointsAdded_totalPPA : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The all property</summary>
        public double? All { get; set; }
        /// <summary>The firstDown property</summary>
        public double? FirstDown { get; set; }
        /// <summary>The pass property</summary>
        public double? Pass { get; set; }
        /// <summary>The passingDowns property</summary>
        public double? PassingDowns { get; set; }
        /// <summary>The rush property</summary>
        public double? Rush { get; set; }
        /// <summary>The secondDown property</summary>
        public double? SecondDown { get; set; }
        /// <summary>The standardDowns property</summary>
        public double? StandardDowns { get; set; }
        /// <summary>The thirdDown property</summary>
        public double? ThirdDown { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Models.PlayerSeasonPredictedPointsAdded_totalPPA"/> and sets the default values.
        /// </summary>
        public PlayerSeasonPredictedPointsAdded_totalPPA()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.PlayerSeasonPredictedPointsAdded_totalPPA"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.PlayerSeasonPredictedPointsAdded_totalPPA CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.PlayerSeasonPredictedPointsAdded_totalPPA();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "all", n => { All = n.GetDoubleValue(); } },
                { "firstDown", n => { FirstDown = n.GetDoubleValue(); } },
                { "pass", n => { Pass = n.GetDoubleValue(); } },
                { "passingDowns", n => { PassingDowns = n.GetDoubleValue(); } },
                { "rush", n => { Rush = n.GetDoubleValue(); } },
                { "secondDown", n => { SecondDown = n.GetDoubleValue(); } },
                { "standardDowns", n => { StandardDowns = n.GetDoubleValue(); } },
                { "thirdDown", n => { ThirdDown = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("all", All);
            writer.WriteDoubleValue("firstDown", FirstDown);
            writer.WriteDoubleValue("pass", Pass);
            writer.WriteDoubleValue("passingDowns", PassingDowns);
            writer.WriteDoubleValue("rush", Rush);
            writer.WriteDoubleValue("secondDown", SecondDown);
            writer.WriteDoubleValue("standardDowns", StandardDowns);
            writer.WriteDoubleValue("thirdDown", ThirdDown);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
