// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MatchupGame : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The awayScore property</summary>
        public int? AwayScore { get; set; }
        /// <summary>The awayTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AwayTeam { get; set; }
#nullable restore
#else
        public string AwayTeam { get; set; }
#endif
        /// <summary>The date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>The homeScore property</summary>
        public int? HomeScore { get; set; }
        /// <summary>The homeTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeTeam { get; set; }
#nullable restore
#else
        public string HomeTeam { get; set; }
#endif
        /// <summary>The neutralSite property</summary>
        public bool? NeutralSite { get; set; }
        /// <summary>The season property</summary>
        public int? Season { get; set; }
        /// <summary>The seasonType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SeasonType { get; set; }
#nullable restore
#else
        public string SeasonType { get; set; }
#endif
        /// <summary>The venue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Venue { get; set; }
#nullable restore
#else
        public string Venue { get; set; }
#endif
        /// <summary>The week property</summary>
        public int? Week { get; set; }
        /// <summary>The winner property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Winner { get; set; }
#nullable restore
#else
        public string Winner { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.MatchupGame"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.MatchupGame CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.MatchupGame();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awayScore", n => { AwayScore = n.GetIntValue(); } },
                { "awayTeam", n => { AwayTeam = n.GetStringValue(); } },
                { "date", n => { Date = n.GetStringValue(); } },
                { "homeScore", n => { HomeScore = n.GetIntValue(); } },
                { "homeTeam", n => { HomeTeam = n.GetStringValue(); } },
                { "neutralSite", n => { NeutralSite = n.GetBoolValue(); } },
                { "season", n => { Season = n.GetIntValue(); } },
                { "seasonType", n => { SeasonType = n.GetStringValue(); } },
                { "venue", n => { Venue = n.GetStringValue(); } },
                { "week", n => { Week = n.GetIntValue(); } },
                { "winner", n => { Winner = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("awayScore", AwayScore);
            writer.WriteStringValue("awayTeam", AwayTeam);
            writer.WriteStringValue("date", Date);
            writer.WriteIntValue("homeScore", HomeScore);
            writer.WriteStringValue("homeTeam", HomeTeam);
            writer.WriteBoolValue("neutralSite", NeutralSite);
            writer.WriteIntValue("season", Season);
            writer.WriteStringValue("seasonType", SeasonType);
            writer.WriteStringValue("venue", Venue);
            writer.WriteIntValue("week", Week);
            writer.WriteStringValue("winner", Winner);
        }
    }
}
#pragma warning restore CS0618
