// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RosterPlayer : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The firstName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The height property</summary>
        public int? Height { get; set; }
        /// <summary>The homeCity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeCity { get; set; }
#nullable restore
#else
        public string HomeCity { get; set; }
#endif
        /// <summary>The homeCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeCountry { get; set; }
#nullable restore
#else
        public string HomeCountry { get; set; }
#endif
        /// <summary>The homeCountyFIPS property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeCountyFIPS { get; set; }
#nullable restore
#else
        public string HomeCountyFIPS { get; set; }
#endif
        /// <summary>The homeLatitude property</summary>
        public double? HomeLatitude { get; set; }
        /// <summary>The homeLongitude property</summary>
        public double? HomeLongitude { get; set; }
        /// <summary>The homeState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeState { get; set; }
#nullable restore
#else
        public string HomeState { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The jersey property</summary>
        public int? Jersey { get; set; }
        /// <summary>The lastName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>The position property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Position { get; set; }
#nullable restore
#else
        public string Position { get; set; }
#endif
        /// <summary>The recruitIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RecruitIds { get; set; }
#nullable restore
#else
        public List<string> RecruitIds { get; set; }
#endif
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Team { get; set; }
#nullable restore
#else
        public string Team { get; set; }
#endif
        /// <summary>The weight property</summary>
        public int? Weight { get; set; }
        /// <summary>The year property</summary>
        [Obsolete("")]
        public int? Year { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.RosterPlayer"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.RosterPlayer CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.RosterPlayer();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "firstName", n => { FirstName = n.GetStringValue(); } },
                { "height", n => { Height = n.GetIntValue(); } },
                { "homeCity", n => { HomeCity = n.GetStringValue(); } },
                { "homeCountry", n => { HomeCountry = n.GetStringValue(); } },
                { "homeCountyFIPS", n => { HomeCountyFIPS = n.GetStringValue(); } },
                { "homeLatitude", n => { HomeLatitude = n.GetDoubleValue(); } },
                { "homeLongitude", n => { HomeLongitude = n.GetDoubleValue(); } },
                { "homeState", n => { HomeState = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "jersey", n => { Jersey = n.GetIntValue(); } },
                { "lastName", n => { LastName = n.GetStringValue(); } },
                { "position", n => { Position = n.GetStringValue(); } },
                { "recruitIds", n => { RecruitIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "team", n => { Team = n.GetStringValue(); } },
                { "weight", n => { Weight = n.GetIntValue(); } },
                { "year", n => { Year = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteIntValue("height", Height);
            writer.WriteStringValue("homeCity", HomeCity);
            writer.WriteStringValue("homeCountry", HomeCountry);
            writer.WriteStringValue("homeCountyFIPS", HomeCountyFIPS);
            writer.WriteDoubleValue("homeLatitude", HomeLatitude);
            writer.WriteDoubleValue("homeLongitude", HomeLongitude);
            writer.WriteStringValue("homeState", HomeState);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("jersey", Jersey);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteStringValue("position", Position);
            writer.WriteCollectionOfPrimitiveValues<string>("recruitIds", RecruitIds);
            writer.WriteStringValue("team", Team);
            writer.WriteIntValue("weight", Weight);
            writer.WriteIntValue("year", Year);
        }
    }
}
#pragma warning restore CS0618
