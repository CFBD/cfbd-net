// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ScoreboardGame_betting : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The awayMoneyline property</summary>
        public double? AwayMoneyline { get; set; }
        /// <summary>The homeMoneyline property</summary>
        public double? HomeMoneyline { get; set; }
        /// <summary>The overUnder property</summary>
        public double? OverUnder { get; set; }
        /// <summary>The spread property</summary>
        public double? Spread { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Models.ScoreboardGame_betting"/> and sets the default values.
        /// </summary>
        public ScoreboardGame_betting()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.ScoreboardGame_betting"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.ScoreboardGame_betting CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.ScoreboardGame_betting();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awayMoneyline", n => { AwayMoneyline = n.GetDoubleValue(); } },
                { "homeMoneyline", n => { HomeMoneyline = n.GetDoubleValue(); } },
                { "overUnder", n => { OverUnder = n.GetDoubleValue(); } },
                { "spread", n => { Spread = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("awayMoneyline", AwayMoneyline);
            writer.WriteDoubleValue("homeMoneyline", HomeMoneyline);
            writer.WriteDoubleValue("overUnder", OverUnder);
            writer.WriteDoubleValue("spread", Spread);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
