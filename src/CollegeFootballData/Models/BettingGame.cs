// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BettingGame : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The awayClassification property</summary>
        public global::CollegeFootballData.Models.DivisionClassification? AwayClassification { get; set; }
        /// <summary>The awayConference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AwayConference { get; set; }
#nullable restore
#else
        public string AwayConference { get; set; }
#endif
        /// <summary>The awayScore property</summary>
        public int? AwayScore { get; set; }
        /// <summary>The awayTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AwayTeam { get; set; }
#nullable restore
#else
        public string AwayTeam { get; set; }
#endif
        /// <summary>The homeClassification property</summary>
        public global::CollegeFootballData.Models.DivisionClassification? HomeClassification { get; set; }
        /// <summary>The homeConference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeConference { get; set; }
#nullable restore
#else
        public string HomeConference { get; set; }
#endif
        /// <summary>The homeScore property</summary>
        public int? HomeScore { get; set; }
        /// <summary>The homeTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeTeam { get; set; }
#nullable restore
#else
        public string HomeTeam { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The lines property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::CollegeFootballData.Models.GameLine>? Lines { get; set; }
#nullable restore
#else
        public List<global::CollegeFootballData.Models.GameLine> Lines { get; set; }
#endif
        /// <summary>The season property</summary>
        public int? Season { get; set; }
        /// <summary>The seasonType property</summary>
        public global::CollegeFootballData.Models.SeasonType? SeasonType { get; set; }
        /// <summary>The startDate property</summary>
        public DateTimeOffset? StartDate { get; set; }
        /// <summary>The week property</summary>
        public int? Week { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.BettingGame"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.BettingGame CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.BettingGame();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awayClassification", n => { AwayClassification = n.GetEnumValue<global::CollegeFootballData.Models.DivisionClassification>(); } },
                { "awayConference", n => { AwayConference = n.GetStringValue(); } },
                { "awayScore", n => { AwayScore = n.GetIntValue(); } },
                { "awayTeam", n => { AwayTeam = n.GetStringValue(); } },
                { "homeClassification", n => { HomeClassification = n.GetEnumValue<global::CollegeFootballData.Models.DivisionClassification>(); } },
                { "homeConference", n => { HomeConference = n.GetStringValue(); } },
                { "homeScore", n => { HomeScore = n.GetIntValue(); } },
                { "homeTeam", n => { HomeTeam = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "lines", n => { Lines = n.GetCollectionOfObjectValues<global::CollegeFootballData.Models.GameLine>(global::CollegeFootballData.Models.GameLine.CreateFromDiscriminatorValue)?.AsList(); } },
                { "season", n => { Season = n.GetIntValue(); } },
                { "seasonType", n => { SeasonType = n.GetEnumValue<global::CollegeFootballData.Models.SeasonType>(); } },
                { "startDate", n => { StartDate = n.GetDateTimeOffsetValue(); } },
                { "week", n => { Week = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::CollegeFootballData.Models.DivisionClassification>("awayClassification", AwayClassification);
            writer.WriteStringValue("awayConference", AwayConference);
            writer.WriteIntValue("awayScore", AwayScore);
            writer.WriteStringValue("awayTeam", AwayTeam);
            writer.WriteEnumValue<global::CollegeFootballData.Models.DivisionClassification>("homeClassification", HomeClassification);
            writer.WriteStringValue("homeConference", HomeConference);
            writer.WriteIntValue("homeScore", HomeScore);
            writer.WriteStringValue("homeTeam", HomeTeam);
            writer.WriteIntValue("id", Id);
            writer.WriteCollectionOfObjectValues<global::CollegeFootballData.Models.GameLine>("lines", Lines);
            writer.WriteIntValue("season", Season);
            writer.WriteEnumValue<global::CollegeFootballData.Models.SeasonType>("seasonType", SeasonType);
            writer.WriteDateTimeOffsetValue("startDate", StartDate);
            writer.WriteIntValue("week", Week);
        }
    }
}
#pragma warning restore CS0618
