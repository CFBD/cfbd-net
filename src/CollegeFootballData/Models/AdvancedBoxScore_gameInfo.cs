// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CollegeFootballData.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AdvancedBoxScore_gameInfo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The awayPoints property</summary>
        public int? AwayPoints { get; set; }
        /// <summary>The awayTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AwayTeam { get; set; }
#nullable restore
#else
        public string AwayTeam { get; set; }
#endif
        /// <summary>The awayWinProb property</summary>
        public double? AwayWinProb { get; set; }
        /// <summary>The excitement property</summary>
        public double? Excitement { get; set; }
        /// <summary>The homePoints property</summary>
        public int? HomePoints { get; set; }
        /// <summary>The homeTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeTeam { get; set; }
#nullable restore
#else
        public string HomeTeam { get; set; }
#endif
        /// <summary>The homeWinner property</summary>
        public bool? HomeWinner { get; set; }
        /// <summary>The homeWinProb property</summary>
        public double? HomeWinProb { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::CollegeFootballData.Models.AdvancedBoxScore_gameInfo"/> and sets the default values.
        /// </summary>
        public AdvancedBoxScore_gameInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CollegeFootballData.Models.AdvancedBoxScore_gameInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CollegeFootballData.Models.AdvancedBoxScore_gameInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CollegeFootballData.Models.AdvancedBoxScore_gameInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awayPoints", n => { AwayPoints = n.GetIntValue(); } },
                { "awayTeam", n => { AwayTeam = n.GetStringValue(); } },
                { "awayWinProb", n => { AwayWinProb = n.GetDoubleValue(); } },
                { "excitement", n => { Excitement = n.GetDoubleValue(); } },
                { "homePoints", n => { HomePoints = n.GetIntValue(); } },
                { "homeTeam", n => { HomeTeam = n.GetStringValue(); } },
                { "homeWinProb", n => { HomeWinProb = n.GetDoubleValue(); } },
                { "homeWinner", n => { HomeWinner = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("awayPoints", AwayPoints);
            writer.WriteStringValue("awayTeam", AwayTeam);
            writer.WriteDoubleValue("awayWinProb", AwayWinProb);
            writer.WriteDoubleValue("excitement", Excitement);
            writer.WriteIntValue("homePoints", HomePoints);
            writer.WriteStringValue("homeTeam", HomeTeam);
            writer.WriteBoolValue("homeWinner", HomeWinner);
            writer.WriteDoubleValue("homeWinProb", HomeWinProb);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
