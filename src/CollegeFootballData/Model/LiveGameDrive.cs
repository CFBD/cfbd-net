/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// LiveGameDrive
    /// </summary>
    [DataContract(Name = "LiveGameDrive")]
    public partial class LiveGameDrive : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveGameDrive" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LiveGameDrive() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveGameDrive" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="offenseId">offenseId (required).</param>
        /// <param name="offense">offense (required).</param>
        /// <param name="defenseId">defenseId (required).</param>
        /// <param name="defense">defense (required).</param>
        /// <param name="playCount">playCount (required).</param>
        /// <param name="yards">yards (required).</param>
        /// <param name="startPeriod">startPeriod (required).</param>
        /// <param name="startClock">startClock (required).</param>
        /// <param name="startYardsToGoal">startYardsToGoal (required).</param>
        /// <param name="endPeriod">endPeriod (required).</param>
        /// <param name="endClock">endClock (required).</param>
        /// <param name="endYardsToGoal">endYardsToGoal (required).</param>
        /// <param name="duration">duration (required).</param>
        /// <param name="scoringOpportunity">scoringOpportunity (required).</param>
        /// <param name="result">result (required).</param>
        /// <param name="pointsGained">pointsGained (required).</param>
        /// <param name="plays">plays (required).</param>
        public LiveGameDrive(string id = default(string), int offenseId = default(int), string offense = default(string), int defenseId = default(int), string defense = default(string), int playCount = default(int), int yards = default(int), int startPeriod = default(int), string startClock = default(string), int startYardsToGoal = default(int), int? endPeriod = default(int?), string endClock = default(string), int? endYardsToGoal = default(int?), string duration = default(string), bool scoringOpportunity = default(bool), string result = default(string), int pointsGained = default(int), List<LiveGamePlay> plays = default(List<LiveGamePlay>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for LiveGameDrive and cannot be null");
            }
            this.Id = id;
            this.OffenseId = offenseId;
            // to ensure "offense" is required (not null)
            if (offense == null)
            {
                throw new ArgumentNullException("offense is a required property for LiveGameDrive and cannot be null");
            }
            this.Offense = offense;
            this.DefenseId = defenseId;
            // to ensure "defense" is required (not null)
            if (defense == null)
            {
                throw new ArgumentNullException("defense is a required property for LiveGameDrive and cannot be null");
            }
            this.Defense = defense;
            this.PlayCount = playCount;
            this.Yards = yards;
            this.StartPeriod = startPeriod;
            // to ensure "startClock" is required (not null)
            if (startClock == null)
            {
                throw new ArgumentNullException("startClock is a required property for LiveGameDrive and cannot be null");
            }
            this.StartClock = startClock;
            this.StartYardsToGoal = startYardsToGoal;
            // to ensure "endPeriod" is required (not null)
            if (endPeriod == null)
            {
                throw new ArgumentNullException("endPeriod is a required property for LiveGameDrive and cannot be null");
            }
            this.EndPeriod = endPeriod;
            // to ensure "endClock" is required (not null)
            if (endClock == null)
            {
                throw new ArgumentNullException("endClock is a required property for LiveGameDrive and cannot be null");
            }
            this.EndClock = endClock;
            // to ensure "endYardsToGoal" is required (not null)
            if (endYardsToGoal == null)
            {
                throw new ArgumentNullException("endYardsToGoal is a required property for LiveGameDrive and cannot be null");
            }
            this.EndYardsToGoal = endYardsToGoal;
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new ArgumentNullException("duration is a required property for LiveGameDrive and cannot be null");
            }
            this.Duration = duration;
            this.ScoringOpportunity = scoringOpportunity;
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new ArgumentNullException("result is a required property for LiveGameDrive and cannot be null");
            }
            this.Result = result;
            this.PointsGained = pointsGained;
            // to ensure "plays" is required (not null)
            if (plays == null)
            {
                throw new ArgumentNullException("plays is a required property for LiveGameDrive and cannot be null");
            }
            this.Plays = plays;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets OffenseId
        /// </summary>
        [DataMember(Name = "offenseId", IsRequired = true, EmitDefaultValue = true)]
        public int OffenseId { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [DataMember(Name = "offense", IsRequired = true, EmitDefaultValue = true)]
        public string Offense { get; set; }

        /// <summary>
        /// Gets or Sets DefenseId
        /// </summary>
        [DataMember(Name = "defenseId", IsRequired = true, EmitDefaultValue = true)]
        public int DefenseId { get; set; }

        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [DataMember(Name = "defense", IsRequired = true, EmitDefaultValue = true)]
        public string Defense { get; set; }

        /// <summary>
        /// Gets or Sets PlayCount
        /// </summary>
        [DataMember(Name = "playCount", IsRequired = true, EmitDefaultValue = true)]
        public int PlayCount { get; set; }

        /// <summary>
        /// Gets or Sets Yards
        /// </summary>
        [DataMember(Name = "yards", IsRequired = true, EmitDefaultValue = true)]
        public int Yards { get; set; }

        /// <summary>
        /// Gets or Sets StartPeriod
        /// </summary>
        [DataMember(Name = "startPeriod", IsRequired = true, EmitDefaultValue = true)]
        public int StartPeriod { get; set; }

        /// <summary>
        /// Gets or Sets StartClock
        /// </summary>
        [DataMember(Name = "startClock", IsRequired = true, EmitDefaultValue = true)]
        public string StartClock { get; set; }

        /// <summary>
        /// Gets or Sets StartYardsToGoal
        /// </summary>
        [DataMember(Name = "startYardsToGoal", IsRequired = true, EmitDefaultValue = true)]
        public int StartYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [DataMember(Name = "endPeriod", IsRequired = true, EmitDefaultValue = true)]
        public int? EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EndClock
        /// </summary>
        [DataMember(Name = "endClock", IsRequired = true, EmitDefaultValue = true)]
        public string EndClock { get; set; }

        /// <summary>
        /// Gets or Sets EndYardsToGoal
        /// </summary>
        [DataMember(Name = "endYardsToGoal", IsRequired = true, EmitDefaultValue = true)]
        public int? EndYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets ScoringOpportunity
        /// </summary>
        [DataMember(Name = "scoringOpportunity", IsRequired = true, EmitDefaultValue = true)]
        public bool ScoringOpportunity { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", IsRequired = true, EmitDefaultValue = true)]
        public string Result { get; set; }

        /// <summary>
        /// Gets or Sets PointsGained
        /// </summary>
        [DataMember(Name = "pointsGained", IsRequired = true, EmitDefaultValue = true)]
        public int PointsGained { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [DataMember(Name = "plays", IsRequired = true, EmitDefaultValue = true)]
        public List<LiveGamePlay> Plays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveGameDrive {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OffenseId: ").Append(OffenseId).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  DefenseId: ").Append(DefenseId).Append("\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  PlayCount: ").Append(PlayCount).Append("\n");
            sb.Append("  Yards: ").Append(Yards).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  StartClock: ").Append(StartClock).Append("\n");
            sb.Append("  StartYardsToGoal: ").Append(StartYardsToGoal).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  EndClock: ").Append(EndClock).Append("\n");
            sb.Append("  EndYardsToGoal: ").Append(EndYardsToGoal).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ScoringOpportunity: ").Append(ScoringOpportunity).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  PointsGained: ").Append(PointsGained).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
