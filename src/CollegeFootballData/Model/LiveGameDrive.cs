// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.7.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// LiveGameDrive
    /// </summary>
    public partial class LiveGameDrive : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveGameDrive" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="offenseId">offenseId</param>
        /// <param name="offense">offense</param>
        /// <param name="defenseId">defenseId</param>
        /// <param name="defense">defense</param>
        /// <param name="playCount">playCount</param>
        /// <param name="yards">yards</param>
        /// <param name="startPeriod">startPeriod</param>
        /// <param name="startYardsToGoal">startYardsToGoal</param>
        /// <param name="scoringOpportunity">scoringOpportunity</param>
        /// <param name="result">result</param>
        /// <param name="pointsGained">pointsGained</param>
        /// <param name="plays">plays</param>
        /// <param name="startClock">startClock</param>
        /// <param name="endPeriod">endPeriod</param>
        /// <param name="endClock">endClock</param>
        /// <param name="endYardsToGoal">endYardsToGoal</param>
        /// <param name="duration">duration</param>
        [JsonConstructor]
        public LiveGameDrive(string id, int offenseId, string offense, int defenseId, string defense, int playCount, int yards, int startPeriod, int startYardsToGoal, bool scoringOpportunity, string result, int pointsGained, List<LiveGamePlay> plays, string? startClock = default, int? endPeriod = default, string? endClock = default, int? endYardsToGoal = default, string? duration = default)
        {
            Id = id;
            OffenseId = offenseId;
            Offense = offense;
            DefenseId = defenseId;
            Defense = defense;
            PlayCount = playCount;
            Yards = yards;
            StartPeriod = startPeriod;
            StartYardsToGoal = startYardsToGoal;
            ScoringOpportunity = scoringOpportunity;
            Result = result;
            PointsGained = pointsGained;
            Plays = plays;
            StartClock = startClock;
            EndPeriod = endPeriod;
            EndClock = endClock;
            EndYardsToGoal = endYardsToGoal;
            Duration = duration;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets OffenseId
        /// </summary>
        [JsonPropertyName("offenseId")]
        public int OffenseId { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [JsonPropertyName("offense")]
        public string Offense { get; set; }

        /// <summary>
        /// Gets or Sets DefenseId
        /// </summary>
        [JsonPropertyName("defenseId")]
        public int DefenseId { get; set; }

        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [JsonPropertyName("defense")]
        public string Defense { get; set; }

        /// <summary>
        /// Gets or Sets PlayCount
        /// </summary>
        [JsonPropertyName("playCount")]
        public int PlayCount { get; set; }

        /// <summary>
        /// Gets or Sets Yards
        /// </summary>
        [JsonPropertyName("yards")]
        public int Yards { get; set; }

        /// <summary>
        /// Gets or Sets StartPeriod
        /// </summary>
        [JsonPropertyName("startPeriod")]
        public int StartPeriod { get; set; }

        /// <summary>
        /// Gets or Sets StartYardsToGoal
        /// </summary>
        [JsonPropertyName("startYardsToGoal")]
        public int StartYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets ScoringOpportunity
        /// </summary>
        [JsonPropertyName("scoringOpportunity")]
        public bool ScoringOpportunity { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("result")]
        public string Result { get; set; }

        /// <summary>
        /// Gets or Sets PointsGained
        /// </summary>
        [JsonPropertyName("pointsGained")]
        public int PointsGained { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [JsonPropertyName("plays")]
        public List<LiveGamePlay> Plays { get; set; }

        /// <summary>
        /// Gets or Sets StartClock
        /// </summary>
        [JsonPropertyName("startClock")]
        public string? StartClock { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [JsonPropertyName("endPeriod")]
        public int? EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EndClock
        /// </summary>
        [JsonPropertyName("endClock")]
        public string? EndClock { get; set; }

        /// <summary>
        /// Gets or Sets EndYardsToGoal
        /// </summary>
        [JsonPropertyName("endYardsToGoal")]
        public int? EndYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [JsonPropertyName("duration")]
        public string? Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveGameDrive {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OffenseId: ").Append(OffenseId).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  DefenseId: ").Append(DefenseId).Append("\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  PlayCount: ").Append(PlayCount).Append("\n");
            sb.Append("  Yards: ").Append(Yards).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  StartYardsToGoal: ").Append(StartYardsToGoal).Append("\n");
            sb.Append("  ScoringOpportunity: ").Append(ScoringOpportunity).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  PointsGained: ").Append(PointsGained).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("  StartClock: ").Append(StartClock).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  EndClock: ").Append(EndClock).Append("\n");
            sb.Append("  EndYardsToGoal: ").Append(EndYardsToGoal).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LiveGameDrive" />
    /// </summary>
    public class LiveGameDriveJsonConverter : JsonConverter<LiveGameDrive>
    {
        /// <summary>
        /// Deserializes json to <see cref="LiveGameDrive" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LiveGameDrive Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<int?> offenseId = default;
            Option<string?> offense = default;
            Option<int?> defenseId = default;
            Option<string?> defense = default;
            Option<int?> playCount = default;
            Option<int?> yards = default;
            Option<int?> startPeriod = default;
            Option<int?> startYardsToGoal = default;
            Option<bool?> scoringOpportunity = default;
            Option<string?> result = default;
            Option<int?> pointsGained = default;
            Option<List<LiveGamePlay>?> plays = default;
            Option<string?> startClock = default;
            Option<int?> endPeriod = default;
            Option<string?> endClock = default;
            Option<int?> endYardsToGoal = default;
            Option<string?> duration = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "offenseId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                offenseId = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    offenseId = null;
                            break;
                        case "offense":
                            offense = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "defenseId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                defenseId = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    defenseId = null;
                            break;
                        case "defense":
                            defense = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "playCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                playCount = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    playCount = null;
                            break;
                        case "yards":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                yards = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    yards = null;
                            break;
                        case "startPeriod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startPeriod = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    startPeriod = null;
                            break;
                        case "startYardsToGoal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startYardsToGoal = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    startYardsToGoal = null;
                            break;
                        case "scoringOpportunity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scoringOpportunity = new Option<bool?>(utf8JsonReader.GetBoolean());
                                else
                                    scoringOpportunity = null;
                            break;
                        case "result":
                            result = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pointsGained":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pointsGained = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    pointsGained = null;
                            break;
                        case "plays":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                plays = new Option<List<LiveGamePlay>?>(JsonSerializer.Deserialize<List<LiveGamePlay>>(ref utf8JsonReader, jsonSerializerOptions)!);
                                else
                                    plays = null;
                            break;
                        case "startClock":
                            startClock = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "endPeriod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endPeriod = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    endPeriod = null;
                            break;
                        case "endClock":
                            endClock = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "endYardsToGoal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endYardsToGoal = new Option<int?>(utf8JsonReader.GetInt32());
                                else
                                    endYardsToGoal = null;
                            break;
                        case "duration":
                            duration = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(id));

            if (!offenseId.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(offenseId));

            if (!offense.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(offense));

            if (!defenseId.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(defenseId));

            if (!defense.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(defense));

            if (!playCount.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(playCount));

            if (!yards.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(yards));

            if (!startPeriod.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(startPeriod));

            if (!startYardsToGoal.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(startYardsToGoal));

            if (!scoringOpportunity.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(scoringOpportunity));

            if (!result.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(result));

            if (!pointsGained.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(pointsGained));

            if (!plays.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(plays));

            if (!startClock.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(startClock));

            if (!endPeriod.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(endPeriod));

            if (!endClock.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(endClock));

            if (!endYardsToGoal.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(endYardsToGoal));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class LiveGameDrive.", nameof(duration));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class LiveGameDrive.");

            if (offenseId.IsSet && offenseId.Value == null)
                throw new ArgumentNullException(nameof(offenseId), "Property is not nullable for class LiveGameDrive.");

            if (offense.IsSet && offense.Value == null)
                throw new ArgumentNullException(nameof(offense), "Property is not nullable for class LiveGameDrive.");

            if (defenseId.IsSet && defenseId.Value == null)
                throw new ArgumentNullException(nameof(defenseId), "Property is not nullable for class LiveGameDrive.");

            if (defense.IsSet && defense.Value == null)
                throw new ArgumentNullException(nameof(defense), "Property is not nullable for class LiveGameDrive.");

            if (playCount.IsSet && playCount.Value == null)
                throw new ArgumentNullException(nameof(playCount), "Property is not nullable for class LiveGameDrive.");

            if (yards.IsSet && yards.Value == null)
                throw new ArgumentNullException(nameof(yards), "Property is not nullable for class LiveGameDrive.");

            if (startPeriod.IsSet && startPeriod.Value == null)
                throw new ArgumentNullException(nameof(startPeriod), "Property is not nullable for class LiveGameDrive.");

            if (startYardsToGoal.IsSet && startYardsToGoal.Value == null)
                throw new ArgumentNullException(nameof(startYardsToGoal), "Property is not nullable for class LiveGameDrive.");

            if (scoringOpportunity.IsSet && scoringOpportunity.Value == null)
                throw new ArgumentNullException(nameof(scoringOpportunity), "Property is not nullable for class LiveGameDrive.");

            if (result.IsSet && result.Value == null)
                throw new ArgumentNullException(nameof(result), "Property is not nullable for class LiveGameDrive.");

            if (pointsGained.IsSet && pointsGained.Value == null)
                throw new ArgumentNullException(nameof(pointsGained), "Property is not nullable for class LiveGameDrive.");

            if (plays.IsSet && plays.Value == null)
                throw new ArgumentNullException(nameof(plays), "Property is not nullable for class LiveGameDrive.");

            return new LiveGameDrive(id.Value!, offenseId.Value!.Value!, offense.Value!, defenseId.Value!.Value!, defense.Value!, playCount.Value!.Value!, yards.Value!.Value!, startPeriod.Value!.Value!, startYardsToGoal.Value!.Value!, scoringOpportunity.Value!.Value!, result.Value!, pointsGained.Value!.Value!, plays.Value!, startClock.Value!, endPeriod.Value!, endClock.Value!, endYardsToGoal.Value!, duration.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LiveGameDrive" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="liveGameDrive"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LiveGameDrive liveGameDrive, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, liveGameDrive, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LiveGameDrive" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="liveGameDrive"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LiveGameDrive liveGameDrive, JsonSerializerOptions jsonSerializerOptions)
        {
            if (liveGameDrive.Id == null)
                throw new ArgumentNullException(nameof(liveGameDrive.Id), "Property is required for class LiveGameDrive.");

            if (liveGameDrive.Offense == null)
                throw new ArgumentNullException(nameof(liveGameDrive.Offense), "Property is required for class LiveGameDrive.");

            if (liveGameDrive.Defense == null)
                throw new ArgumentNullException(nameof(liveGameDrive.Defense), "Property is required for class LiveGameDrive.");

            if (liveGameDrive.Result == null)
                throw new ArgumentNullException(nameof(liveGameDrive.Result), "Property is required for class LiveGameDrive.");

            if (liveGameDrive.Plays == null)
                throw new ArgumentNullException(nameof(liveGameDrive.Plays), "Property is required for class LiveGameDrive.");

            writer.WriteString("id", liveGameDrive.Id);

            writer.WriteNumber("offenseId", liveGameDrive.OffenseId);

            writer.WriteString("offense", liveGameDrive.Offense);

            writer.WriteNumber("defenseId", liveGameDrive.DefenseId);

            writer.WriteString("defense", liveGameDrive.Defense);

            writer.WriteNumber("playCount", liveGameDrive.PlayCount);

            writer.WriteNumber("yards", liveGameDrive.Yards);

            writer.WriteNumber("startPeriod", liveGameDrive.StartPeriod);

            writer.WriteNumber("startYardsToGoal", liveGameDrive.StartYardsToGoal);

            writer.WriteBoolean("scoringOpportunity", liveGameDrive.ScoringOpportunity);

            writer.WriteString("result", liveGameDrive.Result);

            writer.WriteNumber("pointsGained", liveGameDrive.PointsGained);

            writer.WritePropertyName("plays");
            JsonSerializer.Serialize(writer, liveGameDrive.Plays, jsonSerializerOptions);
            if (liveGameDrive.StartClock != null)
                writer.WriteString("startClock", liveGameDrive.StartClock);
            else
                writer.WriteNull("startClock");

            if (liveGameDrive.EndPeriod != null)
                writer.WriteNumber("endPeriod", liveGameDrive.EndPeriod.Value);
            else
                writer.WriteNull("endPeriod");

            if (liveGameDrive.EndClock != null)
                writer.WriteString("endClock", liveGameDrive.EndClock);
            else
                writer.WriteNull("endClock");

            if (liveGameDrive.EndYardsToGoal != null)
                writer.WriteNumber("endYardsToGoal", liveGameDrive.EndYardsToGoal.Value);
            else
                writer.WriteNull("endYardsToGoal");

            if (liveGameDrive.Duration != null)
                writer.WriteString("duration", liveGameDrive.Duration);
            else
                writer.WriteNull("duration");
        }
    }
}
