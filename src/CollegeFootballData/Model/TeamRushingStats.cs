/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// TeamRushingStats
    /// </summary>
    [DataContract(Name = "TeamRushingStats")]
    public partial class TeamRushingStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamRushingStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeamRushingStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamRushingStats" /> class.
        /// </summary>
        /// <param name="team">team (required).</param>
        /// <param name="powerSuccess">powerSuccess (required).</param>
        /// <param name="stuffRate">stuffRate (required).</param>
        /// <param name="lineYards">lineYards (required).</param>
        /// <param name="lineYardsAverage">lineYardsAverage (required).</param>
        /// <param name="secondLevelYards">secondLevelYards (required).</param>
        /// <param name="secondLevelYardsAverage">secondLevelYardsAverage (required).</param>
        /// <param name="openFieldYards">openFieldYards (required).</param>
        /// <param name="openFieldYardsAverage">openFieldYardsAverage (required).</param>
        public TeamRushingStats(string team = default(string), double powerSuccess = default(double), double stuffRate = default(double), double lineYards = default(double), double lineYardsAverage = default(double), double secondLevelYards = default(double), double secondLevelYardsAverage = default(double), double openFieldYards = default(double), double openFieldYardsAverage = default(double))
        {
            // to ensure "team" is required (not null)
            if (team == null)
            {
                throw new ArgumentNullException("team is a required property for TeamRushingStats and cannot be null");
            }
            this.Team = team;
            this.PowerSuccess = powerSuccess;
            this.StuffRate = stuffRate;
            this.LineYards = lineYards;
            this.LineYardsAverage = lineYardsAverage;
            this.SecondLevelYards = secondLevelYards;
            this.SecondLevelYardsAverage = secondLevelYardsAverage;
            this.OpenFieldYards = openFieldYards;
            this.OpenFieldYardsAverage = openFieldYardsAverage;
        }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", IsRequired = true, EmitDefaultValue = true)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets PowerSuccess
        /// </summary>
        [DataMember(Name = "powerSuccess", IsRequired = true, EmitDefaultValue = true)]
        public double PowerSuccess { get; set; }

        /// <summary>
        /// Gets or Sets StuffRate
        /// </summary>
        [DataMember(Name = "stuffRate", IsRequired = true, EmitDefaultValue = true)]
        public double StuffRate { get; set; }

        /// <summary>
        /// Gets or Sets LineYards
        /// </summary>
        [DataMember(Name = "lineYards", IsRequired = true, EmitDefaultValue = true)]
        public double LineYards { get; set; }

        /// <summary>
        /// Gets or Sets LineYardsAverage
        /// </summary>
        [DataMember(Name = "lineYardsAverage", IsRequired = true, EmitDefaultValue = true)]
        public double LineYardsAverage { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelYards
        /// </summary>
        [DataMember(Name = "secondLevelYards", IsRequired = true, EmitDefaultValue = true)]
        public double SecondLevelYards { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelYardsAverage
        /// </summary>
        [DataMember(Name = "secondLevelYardsAverage", IsRequired = true, EmitDefaultValue = true)]
        public double SecondLevelYardsAverage { get; set; }

        /// <summary>
        /// Gets or Sets OpenFieldYards
        /// </summary>
        [DataMember(Name = "openFieldYards", IsRequired = true, EmitDefaultValue = true)]
        public double OpenFieldYards { get; set; }

        /// <summary>
        /// Gets or Sets OpenFieldYardsAverage
        /// </summary>
        [DataMember(Name = "openFieldYardsAverage", IsRequired = true, EmitDefaultValue = true)]
        public double OpenFieldYardsAverage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamRushingStats {\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  PowerSuccess: ").Append(PowerSuccess).Append("\n");
            sb.Append("  StuffRate: ").Append(StuffRate).Append("\n");
            sb.Append("  LineYards: ").Append(LineYards).Append("\n");
            sb.Append("  LineYardsAverage: ").Append(LineYardsAverage).Append("\n");
            sb.Append("  SecondLevelYards: ").Append(SecondLevelYards).Append("\n");
            sb.Append("  SecondLevelYardsAverage: ").Append(SecondLevelYardsAverage).Append("\n");
            sb.Append("  OpenFieldYards: ").Append(OpenFieldYards).Append("\n");
            sb.Append("  OpenFieldYardsAverage: ").Append(OpenFieldYardsAverage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
