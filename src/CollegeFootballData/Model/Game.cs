// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.18
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Game
    /// </summary>
    public partial class Game : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="season">season</param>
        /// <param name="week">week</param>
        /// <param name="seasonType">seasonType</param>
        /// <param name="startDate">startDate</param>
        /// <param name="startTimeTBD">startTimeTBD</param>
        /// <param name="completed">completed</param>
        /// <param name="neutralSite">neutralSite</param>
        /// <param name="conferenceGame">conferenceGame</param>
        /// <param name="homeId">homeId</param>
        /// <param name="homeTeam">homeTeam</param>
        /// <param name="awayId">awayId</param>
        /// <param name="awayTeam">awayTeam</param>
        /// <param name="attendance">attendance</param>
        /// <param name="venueId">venueId</param>
        /// <param name="venue">venue</param>
        /// <param name="homeConference">homeConference</param>
        /// <param name="homeClassification">homeClassification</param>
        /// <param name="homePoints">homePoints</param>
        /// <param name="homeLineScores">homeLineScores</param>
        /// <param name="homePostgameWinProbability">homePostgameWinProbability</param>
        /// <param name="homePregameElo">homePregameElo</param>
        /// <param name="homePostgameElo">homePostgameElo</param>
        /// <param name="awayConference">awayConference</param>
        /// <param name="awayClassification">awayClassification</param>
        /// <param name="awayPoints">awayPoints</param>
        /// <param name="awayLineScores">awayLineScores</param>
        /// <param name="awayPostgameWinProbability">awayPostgameWinProbability</param>
        /// <param name="awayPregameElo">awayPregameElo</param>
        /// <param name="awayPostgameElo">awayPostgameElo</param>
        /// <param name="excitementIndex">excitementIndex</param>
        /// <param name="highlights">highlights</param>
        /// <param name="notes">notes</param>
        [JsonConstructor]
        public Game(int id, int season, int week, SeasonType seasonType, DateTime startDate, bool startTimeTBD, bool completed, bool neutralSite, bool conferenceGame, int homeId, string homeTeam, int awayId, string awayTeam, int? attendance = default, int? venueId = default, string? venue = default, string? homeConference = default, DivisionClassification? homeClassification = default, int? homePoints = default, List<double>? homeLineScores = default, double? homePostgameWinProbability = default, int? homePregameElo = default, int? homePostgameElo = default, string? awayConference = default, DivisionClassification? awayClassification = default, int? awayPoints = default, List<double>? awayLineScores = default, double? awayPostgameWinProbability = default, int? awayPregameElo = default, int? awayPostgameElo = default, double? excitementIndex = default, string? highlights = default, string? notes = default)
        {
            Id = id;
            Season = season;
            Week = week;
            SeasonType = seasonType;
            StartDate = startDate;
            StartTimeTBD = startTimeTBD;
            Completed = completed;
            NeutralSite = neutralSite;
            ConferenceGame = conferenceGame;
            HomeId = homeId;
            HomeTeam = homeTeam;
            AwayId = awayId;
            AwayTeam = awayTeam;
            Attendance = attendance;
            VenueId = venueId;
            Venue = venue;
            HomeConference = homeConference;
            HomeClassification = homeClassification;
            HomePoints = homePoints;
            HomeLineScores = homeLineScores;
            HomePostgameWinProbability = homePostgameWinProbability;
            HomePregameElo = homePregameElo;
            HomePostgameElo = homePostgameElo;
            AwayConference = awayConference;
            AwayClassification = awayClassification;
            AwayPoints = awayPoints;
            AwayLineScores = awayLineScores;
            AwayPostgameWinProbability = awayPostgameWinProbability;
            AwayPregameElo = awayPregameElo;
            AwayPostgameElo = awayPostgameElo;
            ExcitementIndex = excitementIndex;
            Highlights = highlights;
            Notes = notes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [JsonPropertyName("seasonType")]
        public SeasonType SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets HomeClassification
        /// </summary>
        [JsonPropertyName("homeClassification")]
        public DivisionClassification? HomeClassification { get; set; }

        /// <summary>
        /// Gets or Sets AwayClassification
        /// </summary>
        [JsonPropertyName("awayClassification")]
        public DivisionClassification? AwayClassification { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [JsonPropertyName("season")]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [JsonPropertyName("week")]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartTimeTBD
        /// </summary>
        [JsonPropertyName("startTimeTBD")]
        public bool StartTimeTBD { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [JsonPropertyName("completed")]
        public bool Completed { get; set; }

        /// <summary>
        /// Gets or Sets NeutralSite
        /// </summary>
        [JsonPropertyName("neutralSite")]
        public bool NeutralSite { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceGame
        /// </summary>
        [JsonPropertyName("conferenceGame")]
        public bool ConferenceGame { get; set; }

        /// <summary>
        /// Gets or Sets HomeId
        /// </summary>
        [JsonPropertyName("homeId")]
        public int HomeId { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [JsonPropertyName("homeTeam")]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets AwayId
        /// </summary>
        [JsonPropertyName("awayId")]
        public int AwayId { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [JsonPropertyName("awayTeam")]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets Attendance
        /// </summary>
        [JsonPropertyName("attendance")]
        public int? Attendance { get; set; }

        /// <summary>
        /// Gets or Sets VenueId
        /// </summary>
        [JsonPropertyName("venueId")]
        public int? VenueId { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [JsonPropertyName("venue")]
        public string? Venue { get; set; }

        /// <summary>
        /// Gets or Sets HomeConference
        /// </summary>
        [JsonPropertyName("homeConference")]
        public string? HomeConference { get; set; }

        /// <summary>
        /// Gets or Sets HomePoints
        /// </summary>
        [JsonPropertyName("homePoints")]
        public int? HomePoints { get; set; }

        /// <summary>
        /// Gets or Sets HomeLineScores
        /// </summary>
        [JsonPropertyName("homeLineScores")]
        public List<double>? HomeLineScores { get; set; }

        /// <summary>
        /// Gets or Sets HomePostgameWinProbability
        /// </summary>
        [JsonPropertyName("homePostgameWinProbability")]
        public double? HomePostgameWinProbability { get; set; }

        /// <summary>
        /// Gets or Sets HomePregameElo
        /// </summary>
        [JsonPropertyName("homePregameElo")]
        public int? HomePregameElo { get; set; }

        /// <summary>
        /// Gets or Sets HomePostgameElo
        /// </summary>
        [JsonPropertyName("homePostgameElo")]
        public int? HomePostgameElo { get; set; }

        /// <summary>
        /// Gets or Sets AwayConference
        /// </summary>
        [JsonPropertyName("awayConference")]
        public string? AwayConference { get; set; }

        /// <summary>
        /// Gets or Sets AwayPoints
        /// </summary>
        [JsonPropertyName("awayPoints")]
        public int? AwayPoints { get; set; }

        /// <summary>
        /// Gets or Sets AwayLineScores
        /// </summary>
        [JsonPropertyName("awayLineScores")]
        public List<double>? AwayLineScores { get; set; }

        /// <summary>
        /// Gets or Sets AwayPostgameWinProbability
        /// </summary>
        [JsonPropertyName("awayPostgameWinProbability")]
        public double? AwayPostgameWinProbability { get; set; }

        /// <summary>
        /// Gets or Sets AwayPregameElo
        /// </summary>
        [JsonPropertyName("awayPregameElo")]
        public int? AwayPregameElo { get; set; }

        /// <summary>
        /// Gets or Sets AwayPostgameElo
        /// </summary>
        [JsonPropertyName("awayPostgameElo")]
        public int? AwayPostgameElo { get; set; }

        /// <summary>
        /// Gets or Sets ExcitementIndex
        /// </summary>
        [JsonPropertyName("excitementIndex")]
        public double? ExcitementIndex { get; set; }

        /// <summary>
        /// Gets or Sets Highlights
        /// </summary>
        [JsonPropertyName("highlights")]
        public string? Highlights { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [JsonPropertyName("notes")]
        public string? Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Game {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTimeTBD: ").Append(StartTimeTBD).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  NeutralSite: ").Append(NeutralSite).Append("\n");
            sb.Append("  ConferenceGame: ").Append(ConferenceGame).Append("\n");
            sb.Append("  HomeId: ").Append(HomeId).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  AwayId: ").Append(AwayId).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  Attendance: ").Append(Attendance).Append("\n");
            sb.Append("  VenueId: ").Append(VenueId).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  HomeConference: ").Append(HomeConference).Append("\n");
            sb.Append("  HomeClassification: ").Append(HomeClassification).Append("\n");
            sb.Append("  HomePoints: ").Append(HomePoints).Append("\n");
            sb.Append("  HomeLineScores: ").Append(HomeLineScores).Append("\n");
            sb.Append("  HomePostgameWinProbability: ").Append(HomePostgameWinProbability).Append("\n");
            sb.Append("  HomePregameElo: ").Append(HomePregameElo).Append("\n");
            sb.Append("  HomePostgameElo: ").Append(HomePostgameElo).Append("\n");
            sb.Append("  AwayConference: ").Append(AwayConference).Append("\n");
            sb.Append("  AwayClassification: ").Append(AwayClassification).Append("\n");
            sb.Append("  AwayPoints: ").Append(AwayPoints).Append("\n");
            sb.Append("  AwayLineScores: ").Append(AwayLineScores).Append("\n");
            sb.Append("  AwayPostgameWinProbability: ").Append(AwayPostgameWinProbability).Append("\n");
            sb.Append("  AwayPregameElo: ").Append(AwayPregameElo).Append("\n");
            sb.Append("  AwayPostgameElo: ").Append(AwayPostgameElo).Append("\n");
            sb.Append("  ExcitementIndex: ").Append(ExcitementIndex).Append("\n");
            sb.Append("  Highlights: ").Append(Highlights).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Game" />
    /// </summary>
    public class GameJsonConverter : JsonConverter<Game>
    {
        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Game" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Game Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> season = default;
            Option<int?> week = default;
            Option<SeasonType?> seasonType = default;
            Option<DateTime?> startDate = default;
            Option<bool?> startTimeTBD = default;
            Option<bool?> completed = default;
            Option<bool?> neutralSite = default;
            Option<bool?> conferenceGame = default;
            Option<int?> homeId = default;
            Option<string?> homeTeam = default;
            Option<int?> awayId = default;
            Option<string?> awayTeam = default;
            Option<int?> attendance = default;
            Option<int?> venueId = default;
            Option<string?> venue = default;
            Option<string?> homeConference = default;
            Option<DivisionClassification?> homeClassification = default;
            Option<int?> homePoints = default;
            Option<List<double>?> homeLineScores = default;
            Option<double?> homePostgameWinProbability = default;
            Option<int?> homePregameElo = default;
            Option<int?> homePostgameElo = default;
            Option<string?> awayConference = default;
            Option<DivisionClassification?> awayClassification = default;
            Option<int?> awayPoints = default;
            Option<List<double>?> awayLineScores = default;
            Option<double?> awayPostgameWinProbability = default;
            Option<int?> awayPregameElo = default;
            Option<int?> awayPostgameElo = default;
            Option<double?> excitementIndex = default;
            Option<string?> highlights = default;
            Option<string?> notes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "season":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                season = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "week":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                week = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "seasonType":
                            string? seasonTypeRawValue = utf8JsonReader.GetString();
                            if (seasonTypeRawValue != null)
                                seasonType = new Option<SeasonType?>(SeasonTypeValueConverter.FromStringOrDefault(seasonTypeRawValue));
                            break;
                        case "startDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "startTimeTBD":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startTimeTBD = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "completed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                completed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "neutralSite":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                neutralSite = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "conferenceGame":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                conferenceGame = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "homeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homeId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "homeTeam":
                            homeTeam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "awayId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                awayId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "awayTeam":
                            awayTeam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attendance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attendance = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "venueId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                venueId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "venue":
                            venue = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "homeConference":
                            homeConference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "homeClassification":
                            string? homeClassificationRawValue = utf8JsonReader.GetString();
                            if (homeClassificationRawValue != null)
                                homeClassification = new Option<DivisionClassification?>(DivisionClassificationValueConverter.FromStringOrDefault(homeClassificationRawValue));
                            break;
                        case "homePoints":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homePoints = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "homeLineScores":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homeLineScores = new Option<List<double>?>(JsonSerializer.Deserialize<List<double>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "homePostgameWinProbability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homePostgameWinProbability = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "homePregameElo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homePregameElo = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "homePostgameElo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homePostgameElo = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "awayConference":
                            awayConference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "awayClassification":
                            string? awayClassificationRawValue = utf8JsonReader.GetString();
                            if (awayClassificationRawValue != null)
                                awayClassification = new Option<DivisionClassification?>(DivisionClassificationValueConverter.FromStringOrDefault(awayClassificationRawValue));
                            break;
                        case "awayPoints":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                awayPoints = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "awayLineScores":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                awayLineScores = new Option<List<double>?>(JsonSerializer.Deserialize<List<double>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "awayPostgameWinProbability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                awayPostgameWinProbability = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "awayPregameElo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                awayPregameElo = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "awayPostgameElo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                awayPostgameElo = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "excitementIndex":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                excitementIndex = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "highlights":
                            highlights = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(id));

            if (!season.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(season));

            if (!week.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(week));

            if (!seasonType.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(seasonType));

            if (!startDate.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(startDate));

            if (!startTimeTBD.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(startTimeTBD));

            if (!completed.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(completed));

            if (!neutralSite.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(neutralSite));

            if (!conferenceGame.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(conferenceGame));

            if (!homeId.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homeId));

            if (!homeTeam.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homeTeam));

            if (!awayId.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayId));

            if (!awayTeam.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayTeam));

            if (!attendance.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(attendance));

            if (!venueId.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(venueId));

            if (!venue.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(venue));

            if (!homeConference.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homeConference));

            if (!homeClassification.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homeClassification));

            if (!homePoints.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homePoints));

            if (!homeLineScores.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homeLineScores));

            if (!homePostgameWinProbability.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homePostgameWinProbability));

            if (!homePregameElo.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homePregameElo));

            if (!homePostgameElo.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(homePostgameElo));

            if (!awayConference.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayConference));

            if (!awayClassification.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayClassification));

            if (!awayPoints.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayPoints));

            if (!awayLineScores.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayLineScores));

            if (!awayPostgameWinProbability.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayPostgameWinProbability));

            if (!awayPregameElo.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayPregameElo));

            if (!awayPostgameElo.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(awayPostgameElo));

            if (!excitementIndex.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(excitementIndex));

            if (!highlights.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(highlights));

            if (!notes.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(notes));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Game.");

            if (season.IsSet && season.Value == null)
                throw new ArgumentNullException(nameof(season), "Property is not nullable for class Game.");

            if (week.IsSet && week.Value == null)
                throw new ArgumentNullException(nameof(week), "Property is not nullable for class Game.");

            if (seasonType.IsSet && seasonType.Value == null)
                throw new ArgumentNullException(nameof(seasonType), "Property is not nullable for class Game.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class Game.");

            if (startTimeTBD.IsSet && startTimeTBD.Value == null)
                throw new ArgumentNullException(nameof(startTimeTBD), "Property is not nullable for class Game.");

            if (completed.IsSet && completed.Value == null)
                throw new ArgumentNullException(nameof(completed), "Property is not nullable for class Game.");

            if (neutralSite.IsSet && neutralSite.Value == null)
                throw new ArgumentNullException(nameof(neutralSite), "Property is not nullable for class Game.");

            if (conferenceGame.IsSet && conferenceGame.Value == null)
                throw new ArgumentNullException(nameof(conferenceGame), "Property is not nullable for class Game.");

            if (homeId.IsSet && homeId.Value == null)
                throw new ArgumentNullException(nameof(homeId), "Property is not nullable for class Game.");

            if (homeTeam.IsSet && homeTeam.Value == null)
                throw new ArgumentNullException(nameof(homeTeam), "Property is not nullable for class Game.");

            if (awayId.IsSet && awayId.Value == null)
                throw new ArgumentNullException(nameof(awayId), "Property is not nullable for class Game.");

            if (awayTeam.IsSet && awayTeam.Value == null)
                throw new ArgumentNullException(nameof(awayTeam), "Property is not nullable for class Game.");

            return new Game(id.Value!.Value!, season.Value!.Value!, week.Value!.Value!, seasonType.Value!.Value!, startDate.Value!.Value!, startTimeTBD.Value!.Value!, completed.Value!.Value!, neutralSite.Value!.Value!, conferenceGame.Value!.Value!, homeId.Value!.Value!, homeTeam.Value!, awayId.Value!.Value!, awayTeam.Value!, attendance.Value!, venueId.Value!, venue.Value!, homeConference.Value!, homeClassification.Value!, homePoints.Value!, homeLineScores.Value!, homePostgameWinProbability.Value!, homePregameElo.Value!, homePostgameElo.Value!, awayConference.Value!, awayClassification.Value!, awayPoints.Value!, awayLineScores.Value!, awayPostgameWinProbability.Value!, awayPregameElo.Value!, awayPostgameElo.Value!, excitementIndex.Value!, highlights.Value!, notes.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Game" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="game"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Game game, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, game, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Game" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="game"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Game game, JsonSerializerOptions jsonSerializerOptions)
        {
            if (game.HomeTeam == null)
                throw new ArgumentNullException(nameof(game.HomeTeam), "Property is required for class Game.");

            if (game.AwayTeam == null)
                throw new ArgumentNullException(nameof(game.AwayTeam), "Property is required for class Game.");

            writer.WriteNumber("id", game.Id);

            writer.WriteNumber("season", game.Season);

            writer.WriteNumber("week", game.Week);

            var seasonTypeRawValue = SeasonTypeValueConverter.ToJsonValue(game.SeasonType);
            writer.WriteString("seasonType", seasonTypeRawValue);

            writer.WriteString("startDate", game.StartDate.ToString(StartDateFormat));

            writer.WriteBoolean("startTimeTBD", game.StartTimeTBD);

            writer.WriteBoolean("completed", game.Completed);

            writer.WriteBoolean("neutralSite", game.NeutralSite);

            writer.WriteBoolean("conferenceGame", game.ConferenceGame);

            writer.WriteNumber("homeId", game.HomeId);

            writer.WriteString("homeTeam", game.HomeTeam);

            writer.WriteNumber("awayId", game.AwayId);

            writer.WriteString("awayTeam", game.AwayTeam);

            if (game.Attendance != null)
                writer.WriteNumber("attendance", game.Attendance.Value);
            else
                writer.WriteNull("attendance");

            if (game.VenueId != null)
                writer.WriteNumber("venueId", game.VenueId.Value);
            else
                writer.WriteNull("venueId");

            if (game.Venue != null)
                writer.WriteString("venue", game.Venue);
            else
                writer.WriteNull("venue");

            if (game.HomeConference != null)
                writer.WriteString("homeConference", game.HomeConference);
            else
                writer.WriteNull("homeConference");

            if (game.HomeClassification == null)
                writer.WriteNull("homeClassification");
            else
            {
                var homeClassificationRawValue = DivisionClassificationValueConverter.ToJsonValue(game.HomeClassification.Value);
                if (homeClassificationRawValue != null)
                    writer.WriteString("homeClassification", homeClassificationRawValue);
                else
                    writer.WriteNull("homeClassification");
            }

            if (game.HomePoints != null)
                writer.WriteNumber("homePoints", game.HomePoints.Value);
            else
                writer.WriteNull("homePoints");

            if (game.HomeLineScores != null)
            {
                writer.WritePropertyName("homeLineScores");
                JsonSerializer.Serialize(writer, game.HomeLineScores, jsonSerializerOptions);
            }
            else
                writer.WriteNull("homeLineScores");
            if (game.HomePostgameWinProbability != null)
                writer.WriteNumber("homePostgameWinProbability", game.HomePostgameWinProbability.Value);
            else
                writer.WriteNull("homePostgameWinProbability");

            if (game.HomePregameElo != null)
                writer.WriteNumber("homePregameElo", game.HomePregameElo.Value);
            else
                writer.WriteNull("homePregameElo");

            if (game.HomePostgameElo != null)
                writer.WriteNumber("homePostgameElo", game.HomePostgameElo.Value);
            else
                writer.WriteNull("homePostgameElo");

            if (game.AwayConference != null)
                writer.WriteString("awayConference", game.AwayConference);
            else
                writer.WriteNull("awayConference");

            if (game.AwayClassification == null)
                writer.WriteNull("awayClassification");
            else
            {
                var awayClassificationRawValue = DivisionClassificationValueConverter.ToJsonValue(game.AwayClassification.Value);
                if (awayClassificationRawValue != null)
                    writer.WriteString("awayClassification", awayClassificationRawValue);
                else
                    writer.WriteNull("awayClassification");
            }

            if (game.AwayPoints != null)
                writer.WriteNumber("awayPoints", game.AwayPoints.Value);
            else
                writer.WriteNull("awayPoints");

            if (game.AwayLineScores != null)
            {
                writer.WritePropertyName("awayLineScores");
                JsonSerializer.Serialize(writer, game.AwayLineScores, jsonSerializerOptions);
            }
            else
                writer.WriteNull("awayLineScores");
            if (game.AwayPostgameWinProbability != null)
                writer.WriteNumber("awayPostgameWinProbability", game.AwayPostgameWinProbability.Value);
            else
                writer.WriteNull("awayPostgameWinProbability");

            if (game.AwayPregameElo != null)
                writer.WriteNumber("awayPregameElo", game.AwayPregameElo.Value);
            else
                writer.WriteNull("awayPregameElo");

            if (game.AwayPostgameElo != null)
                writer.WriteNumber("awayPostgameElo", game.AwayPostgameElo.Value);
            else
                writer.WriteNull("awayPostgameElo");

            if (game.ExcitementIndex != null)
                writer.WriteNumber("excitementIndex", game.ExcitementIndex.Value);
            else
                writer.WriteNull("excitementIndex");

            if (game.Highlights != null)
                writer.WriteString("highlights", game.Highlights);
            else
                writer.WriteNull("highlights");

            if (game.Notes != null)
                writer.WriteString("notes", game.Notes);
            else
                writer.WriteNull("notes");
        }
    }
}
