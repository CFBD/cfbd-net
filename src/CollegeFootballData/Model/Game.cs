/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Game
    /// </summary>
    [DataContract(Name = "Game")]
    public partial class Game : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [DataMember(Name = "seasonType", IsRequired = true, EmitDefaultValue = true)]
        public SeasonType SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets HomeClassification
        /// </summary>
        [DataMember(Name = "homeClassification", IsRequired = true, EmitDefaultValue = true)]
        public DivisionClassification HomeClassification { get; set; }

        /// <summary>
        /// Gets or Sets AwayClassification
        /// </summary>
        [DataMember(Name = "awayClassification", IsRequired = true, EmitDefaultValue = true)]
        public DivisionClassification AwayClassification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Game() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="season">season (required).</param>
        /// <param name="week">week (required).</param>
        /// <param name="seasonType">seasonType (required).</param>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="startTimeTBD">startTimeTBD (required).</param>
        /// <param name="completed">completed (required).</param>
        /// <param name="neutralSite">neutralSite (required).</param>
        /// <param name="conferenceGame">conferenceGame (required).</param>
        /// <param name="attendance">attendance (required).</param>
        /// <param name="venueId">venueId (required).</param>
        /// <param name="venue">venue (required).</param>
        /// <param name="homeId">homeId (required).</param>
        /// <param name="homeTeam">homeTeam (required).</param>
        /// <param name="homeConference">homeConference (required).</param>
        /// <param name="homeClassification">homeClassification (required).</param>
        /// <param name="homePoints">homePoints (required).</param>
        /// <param name="homeLineScores">homeLineScores (required).</param>
        /// <param name="homePostgameWinProbability">homePostgameWinProbability (required).</param>
        /// <param name="homePregameElo">homePregameElo (required).</param>
        /// <param name="homePostgameElo">homePostgameElo (required).</param>
        /// <param name="awayId">awayId (required).</param>
        /// <param name="awayTeam">awayTeam (required).</param>
        /// <param name="awayConference">awayConference (required).</param>
        /// <param name="awayClassification">awayClassification (required).</param>
        /// <param name="awayPoints">awayPoints (required).</param>
        /// <param name="awayLineScores">awayLineScores (required).</param>
        /// <param name="awayPostgameWinProbability">awayPostgameWinProbability (required).</param>
        /// <param name="awayPregameElo">awayPregameElo (required).</param>
        /// <param name="awayPostgameElo">awayPostgameElo (required).</param>
        /// <param name="excitementIndex">excitementIndex (required).</param>
        /// <param name="highlights">highlights (required).</param>
        /// <param name="notes">notes (required).</param>
        public Game(int id = default(int), int season = default(int), int week = default(int), SeasonType seasonType = default(SeasonType), DateTime startDate = default(DateTime), bool startTimeTBD = default(bool), bool completed = default(bool), bool neutralSite = default(bool), bool conferenceGame = default(bool), int? attendance = default(int?), int? venueId = default(int?), string venue = default(string), int homeId = default(int), string homeTeam = default(string), string homeConference = default(string), DivisionClassification homeClassification = default(DivisionClassification), int? homePoints = default(int?), List<double> homeLineScores = default(List<double>), double? homePostgameWinProbability = default(double?), int? homePregameElo = default(int?), int? homePostgameElo = default(int?), int awayId = default(int), string awayTeam = default(string), string awayConference = default(string), DivisionClassification awayClassification = default(DivisionClassification), int? awayPoints = default(int?), List<double> awayLineScores = default(List<double>), double? awayPostgameWinProbability = default(double?), int? awayPregameElo = default(int?), int? awayPostgameElo = default(int?), double? excitementIndex = default(double?), string highlights = default(string), string notes = default(string))
        {
            this.Id = id;
            this.Season = season;
            this.Week = week;
            this.SeasonType = seasonType;
            this.StartDate = startDate;
            this.StartTimeTBD = startTimeTBD;
            this.Completed = completed;
            this.NeutralSite = neutralSite;
            this.ConferenceGame = conferenceGame;
            // to ensure "attendance" is required (not null)
            if (attendance == null)
            {
                throw new ArgumentNullException("attendance is a required property for Game and cannot be null");
            }
            this.Attendance = attendance;
            // to ensure "venueId" is required (not null)
            if (venueId == null)
            {
                throw new ArgumentNullException("venueId is a required property for Game and cannot be null");
            }
            this.VenueId = venueId;
            // to ensure "venue" is required (not null)
            if (venue == null)
            {
                throw new ArgumentNullException("venue is a required property for Game and cannot be null");
            }
            this.Venue = venue;
            this.HomeId = homeId;
            // to ensure "homeTeam" is required (not null)
            if (homeTeam == null)
            {
                throw new ArgumentNullException("homeTeam is a required property for Game and cannot be null");
            }
            this.HomeTeam = homeTeam;
            // to ensure "homeConference" is required (not null)
            if (homeConference == null)
            {
                throw new ArgumentNullException("homeConference is a required property for Game and cannot be null");
            }
            this.HomeConference = homeConference;
            this.HomeClassification = homeClassification;
            // to ensure "homePoints" is required (not null)
            if (homePoints == null)
            {
                throw new ArgumentNullException("homePoints is a required property for Game and cannot be null");
            }
            this.HomePoints = homePoints;
            // to ensure "homeLineScores" is required (not null)
            if (homeLineScores == null)
            {
                throw new ArgumentNullException("homeLineScores is a required property for Game and cannot be null");
            }
            this.HomeLineScores = homeLineScores;
            // to ensure "homePostgameWinProbability" is required (not null)
            if (homePostgameWinProbability == null)
            {
                throw new ArgumentNullException("homePostgameWinProbability is a required property for Game and cannot be null");
            }
            this.HomePostgameWinProbability = homePostgameWinProbability;
            // to ensure "homePregameElo" is required (not null)
            if (homePregameElo == null)
            {
                throw new ArgumentNullException("homePregameElo is a required property for Game and cannot be null");
            }
            this.HomePregameElo = homePregameElo;
            // to ensure "homePostgameElo" is required (not null)
            if (homePostgameElo == null)
            {
                throw new ArgumentNullException("homePostgameElo is a required property for Game and cannot be null");
            }
            this.HomePostgameElo = homePostgameElo;
            this.AwayId = awayId;
            // to ensure "awayTeam" is required (not null)
            if (awayTeam == null)
            {
                throw new ArgumentNullException("awayTeam is a required property for Game and cannot be null");
            }
            this.AwayTeam = awayTeam;
            // to ensure "awayConference" is required (not null)
            if (awayConference == null)
            {
                throw new ArgumentNullException("awayConference is a required property for Game and cannot be null");
            }
            this.AwayConference = awayConference;
            this.AwayClassification = awayClassification;
            // to ensure "awayPoints" is required (not null)
            if (awayPoints == null)
            {
                throw new ArgumentNullException("awayPoints is a required property for Game and cannot be null");
            }
            this.AwayPoints = awayPoints;
            // to ensure "awayLineScores" is required (not null)
            if (awayLineScores == null)
            {
                throw new ArgumentNullException("awayLineScores is a required property for Game and cannot be null");
            }
            this.AwayLineScores = awayLineScores;
            // to ensure "awayPostgameWinProbability" is required (not null)
            if (awayPostgameWinProbability == null)
            {
                throw new ArgumentNullException("awayPostgameWinProbability is a required property for Game and cannot be null");
            }
            this.AwayPostgameWinProbability = awayPostgameWinProbability;
            // to ensure "awayPregameElo" is required (not null)
            if (awayPregameElo == null)
            {
                throw new ArgumentNullException("awayPregameElo is a required property for Game and cannot be null");
            }
            this.AwayPregameElo = awayPregameElo;
            // to ensure "awayPostgameElo" is required (not null)
            if (awayPostgameElo == null)
            {
                throw new ArgumentNullException("awayPostgameElo is a required property for Game and cannot be null");
            }
            this.AwayPostgameElo = awayPostgameElo;
            // to ensure "excitementIndex" is required (not null)
            if (excitementIndex == null)
            {
                throw new ArgumentNullException("excitementIndex is a required property for Game and cannot be null");
            }
            this.ExcitementIndex = excitementIndex;
            // to ensure "highlights" is required (not null)
            if (highlights == null)
            {
                throw new ArgumentNullException("highlights is a required property for Game and cannot be null");
            }
            this.Highlights = highlights;
            // to ensure "notes" is required (not null)
            if (notes == null)
            {
                throw new ArgumentNullException("notes is a required property for Game and cannot be null");
            }
            this.Notes = notes;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name = "season", IsRequired = true, EmitDefaultValue = true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name = "week", IsRequired = true, EmitDefaultValue = true)]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartTimeTBD
        /// </summary>
        [DataMember(Name = "startTimeTBD", IsRequired = true, EmitDefaultValue = true)]
        public bool StartTimeTBD { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name = "completed", IsRequired = true, EmitDefaultValue = true)]
        public bool Completed { get; set; }

        /// <summary>
        /// Gets or Sets NeutralSite
        /// </summary>
        [DataMember(Name = "neutralSite", IsRequired = true, EmitDefaultValue = true)]
        public bool NeutralSite { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceGame
        /// </summary>
        [DataMember(Name = "conferenceGame", IsRequired = true, EmitDefaultValue = true)]
        public bool ConferenceGame { get; set; }

        /// <summary>
        /// Gets or Sets Attendance
        /// </summary>
        [DataMember(Name = "attendance", IsRequired = true, EmitDefaultValue = true)]
        public int? Attendance { get; set; }

        /// <summary>
        /// Gets or Sets VenueId
        /// </summary>
        [DataMember(Name = "venueId", IsRequired = true, EmitDefaultValue = true)]
        public int? VenueId { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [DataMember(Name = "venue", IsRequired = true, EmitDefaultValue = true)]
        public string Venue { get; set; }

        /// <summary>
        /// Gets or Sets HomeId
        /// </summary>
        [DataMember(Name = "homeId", IsRequired = true, EmitDefaultValue = true)]
        public int HomeId { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name = "homeTeam", IsRequired = true, EmitDefaultValue = true)]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets HomeConference
        /// </summary>
        [DataMember(Name = "homeConference", IsRequired = true, EmitDefaultValue = true)]
        public string HomeConference { get; set; }

        /// <summary>
        /// Gets or Sets HomePoints
        /// </summary>
        [DataMember(Name = "homePoints", IsRequired = true, EmitDefaultValue = true)]
        public int? HomePoints { get; set; }

        /// <summary>
        /// Gets or Sets HomeLineScores
        /// </summary>
        [DataMember(Name = "homeLineScores", IsRequired = true, EmitDefaultValue = true)]
        public List<double> HomeLineScores { get; set; }

        /// <summary>
        /// Gets or Sets HomePostgameWinProbability
        /// </summary>
        [DataMember(Name = "homePostgameWinProbability", IsRequired = true, EmitDefaultValue = true)]
        public double? HomePostgameWinProbability { get; set; }

        /// <summary>
        /// Gets or Sets HomePregameElo
        /// </summary>
        [DataMember(Name = "homePregameElo", IsRequired = true, EmitDefaultValue = true)]
        public int? HomePregameElo { get; set; }

        /// <summary>
        /// Gets or Sets HomePostgameElo
        /// </summary>
        [DataMember(Name = "homePostgameElo", IsRequired = true, EmitDefaultValue = true)]
        public int? HomePostgameElo { get; set; }

        /// <summary>
        /// Gets or Sets AwayId
        /// </summary>
        [DataMember(Name = "awayId", IsRequired = true, EmitDefaultValue = true)]
        public int AwayId { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name = "awayTeam", IsRequired = true, EmitDefaultValue = true)]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets AwayConference
        /// </summary>
        [DataMember(Name = "awayConference", IsRequired = true, EmitDefaultValue = true)]
        public string AwayConference { get; set; }

        /// <summary>
        /// Gets or Sets AwayPoints
        /// </summary>
        [DataMember(Name = "awayPoints", IsRequired = true, EmitDefaultValue = true)]
        public int? AwayPoints { get; set; }

        /// <summary>
        /// Gets or Sets AwayLineScores
        /// </summary>
        [DataMember(Name = "awayLineScores", IsRequired = true, EmitDefaultValue = true)]
        public List<double> AwayLineScores { get; set; }

        /// <summary>
        /// Gets or Sets AwayPostgameWinProbability
        /// </summary>
        [DataMember(Name = "awayPostgameWinProbability", IsRequired = true, EmitDefaultValue = true)]
        public double? AwayPostgameWinProbability { get; set; }

        /// <summary>
        /// Gets or Sets AwayPregameElo
        /// </summary>
        [DataMember(Name = "awayPregameElo", IsRequired = true, EmitDefaultValue = true)]
        public int? AwayPregameElo { get; set; }

        /// <summary>
        /// Gets or Sets AwayPostgameElo
        /// </summary>
        [DataMember(Name = "awayPostgameElo", IsRequired = true, EmitDefaultValue = true)]
        public int? AwayPostgameElo { get; set; }

        /// <summary>
        /// Gets or Sets ExcitementIndex
        /// </summary>
        [DataMember(Name = "excitementIndex", IsRequired = true, EmitDefaultValue = true)]
        public double? ExcitementIndex { get; set; }

        /// <summary>
        /// Gets or Sets Highlights
        /// </summary>
        [DataMember(Name = "highlights", IsRequired = true, EmitDefaultValue = true)]
        public string Highlights { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", IsRequired = true, EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Game {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTimeTBD: ").Append(StartTimeTBD).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  NeutralSite: ").Append(NeutralSite).Append("\n");
            sb.Append("  ConferenceGame: ").Append(ConferenceGame).Append("\n");
            sb.Append("  Attendance: ").Append(Attendance).Append("\n");
            sb.Append("  VenueId: ").Append(VenueId).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  HomeId: ").Append(HomeId).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  HomeConference: ").Append(HomeConference).Append("\n");
            sb.Append("  HomeClassification: ").Append(HomeClassification).Append("\n");
            sb.Append("  HomePoints: ").Append(HomePoints).Append("\n");
            sb.Append("  HomeLineScores: ").Append(HomeLineScores).Append("\n");
            sb.Append("  HomePostgameWinProbability: ").Append(HomePostgameWinProbability).Append("\n");
            sb.Append("  HomePregameElo: ").Append(HomePregameElo).Append("\n");
            sb.Append("  HomePostgameElo: ").Append(HomePostgameElo).Append("\n");
            sb.Append("  AwayId: ").Append(AwayId).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  AwayConference: ").Append(AwayConference).Append("\n");
            sb.Append("  AwayClassification: ").Append(AwayClassification).Append("\n");
            sb.Append("  AwayPoints: ").Append(AwayPoints).Append("\n");
            sb.Append("  AwayLineScores: ").Append(AwayLineScores).Append("\n");
            sb.Append("  AwayPostgameWinProbability: ").Append(AwayPostgameWinProbability).Append("\n");
            sb.Append("  AwayPregameElo: ").Append(AwayPregameElo).Append("\n");
            sb.Append("  AwayPostgameElo: ").Append(AwayPostgameElo).Append("\n");
            sb.Append("  ExcitementIndex: ").Append(ExcitementIndex).Append("\n");
            sb.Append("  Highlights: ").Append(Highlights).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
