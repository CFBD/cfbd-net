/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// ScoreboardGameBetting
    /// </summary>
    [DataContract(Name = "ScoreboardGame_betting")]
    public partial class ScoreboardGameBetting : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardGameBetting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScoreboardGameBetting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardGameBetting" /> class.
        /// </summary>
        /// <param name="awayMoneyline">awayMoneyline (required).</param>
        /// <param name="homeMoneyline">homeMoneyline (required).</param>
        /// <param name="overUnder">overUnder (required).</param>
        /// <param name="spread">spread (required).</param>
        public ScoreboardGameBetting(double? awayMoneyline = default(double?), double? homeMoneyline = default(double?), double? overUnder = default(double?), double? spread = default(double?))
        {
            // to ensure "awayMoneyline" is required (not null)
            if (awayMoneyline == null)
            {
                throw new ArgumentNullException("awayMoneyline is a required property for ScoreboardGameBetting and cannot be null");
            }
            this.AwayMoneyline = awayMoneyline;
            // to ensure "homeMoneyline" is required (not null)
            if (homeMoneyline == null)
            {
                throw new ArgumentNullException("homeMoneyline is a required property for ScoreboardGameBetting and cannot be null");
            }
            this.HomeMoneyline = homeMoneyline;
            // to ensure "overUnder" is required (not null)
            if (overUnder == null)
            {
                throw new ArgumentNullException("overUnder is a required property for ScoreboardGameBetting and cannot be null");
            }
            this.OverUnder = overUnder;
            // to ensure "spread" is required (not null)
            if (spread == null)
            {
                throw new ArgumentNullException("spread is a required property for ScoreboardGameBetting and cannot be null");
            }
            this.Spread = spread;
        }

        /// <summary>
        /// Gets or Sets AwayMoneyline
        /// </summary>
        [DataMember(Name = "awayMoneyline", IsRequired = true, EmitDefaultValue = true)]
        public double? AwayMoneyline { get; set; }

        /// <summary>
        /// Gets or Sets HomeMoneyline
        /// </summary>
        [DataMember(Name = "homeMoneyline", IsRequired = true, EmitDefaultValue = true)]
        public double? HomeMoneyline { get; set; }

        /// <summary>
        /// Gets or Sets OverUnder
        /// </summary>
        [DataMember(Name = "overUnder", IsRequired = true, EmitDefaultValue = true)]
        public double? OverUnder { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name = "spread", IsRequired = true, EmitDefaultValue = true)]
        public double? Spread { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScoreboardGameBetting {\n");
            sb.Append("  AwayMoneyline: ").Append(AwayMoneyline).Append("\n");
            sb.Append("  HomeMoneyline: ").Append(HomeMoneyline).Append("\n");
            sb.Append("  OverUnder: ").Append(OverUnder).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
