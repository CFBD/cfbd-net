// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.18
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Defines GameStatus
    /// </summary>
    public enum GameStatus
    {
        /// <summary>
        /// Enum Scheduled for value: scheduled
        /// </summary>
        Scheduled = 1,

        /// <summary>
        /// Enum InProgress for value: in_progress
        /// </summary>
        InProgress = 2,

        /// <summary>
        /// Enum Completed for value: completed
        /// </summary>
        Completed = 3
    }

    /// <summary>
    /// Converts <see cref="GameStatus"/> to and from the JSON value
    /// </summary>
    public static class GameStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="GameStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GameStatus FromString(string value)
        {
            if (value.Equals("scheduled"))
                return GameStatus.Scheduled;

            if (value.Equals("in_progress"))
                return GameStatus.InProgress;

            if (value.Equals("completed"))
                return GameStatus.Completed;

            throw new NotImplementedException($"Could not convert value to type GameStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="GameStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GameStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("scheduled"))
                return GameStatus.Scheduled;

            if (value.Equals("in_progress"))
                return GameStatus.InProgress;

            if (value.Equals("completed"))
                return GameStatus.Completed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="GameStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(GameStatus value)
        {
            if (value == GameStatus.Scheduled)
                return "scheduled";

            if (value == GameStatus.InProgress)
                return "in_progress";

            if (value == GameStatus.Completed)
                return "completed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GameStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class GameStatusJsonConverter : JsonConverter<GameStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override GameStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            GameStatus? result = rawValue == null
                ? null
                : GameStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the GameStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="gameStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, GameStatus gameStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(gameStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GameStatus"/>
    /// </summary>
    public class GameStatusNullableJsonConverter : JsonConverter<GameStatus?>
    {
        /// <summary>
        /// Returns a GameStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override GameStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            GameStatus? result = rawValue == null
                ? null
                : GameStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="gameStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, GameStatus? gameStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(gameStatus?.ToString() ?? "null");
        }
    }
}
