/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// ScoreboardGameHomeTeam
    /// </summary>
    [DataContract(Name = "ScoreboardGame_homeTeam")]
    public partial class ScoreboardGameHomeTeam : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [DataMember(Name = "classification", IsRequired = true, EmitDefaultValue = true)]
        public DivisionClassification Classification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardGameHomeTeam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScoreboardGameHomeTeam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardGameHomeTeam" /> class.
        /// </summary>
        /// <param name="lineScores">lineScores (required).</param>
        /// <param name="points">points (required).</param>
        /// <param name="classification">classification (required).</param>
        /// <param name="conference">conference (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="id">id (required).</param>
        public ScoreboardGameHomeTeam(List<int> lineScores = default(List<int>), int? points = default(int?), DivisionClassification classification = default(DivisionClassification), string conference = default(string), string name = default(string), int id = default(int))
        {
            // to ensure "lineScores" is required (not null)
            if (lineScores == null)
            {
                throw new ArgumentNullException("lineScores is a required property for ScoreboardGameHomeTeam and cannot be null");
            }
            this.LineScores = lineScores;
            // to ensure "points" is required (not null)
            if (points == null)
            {
                throw new ArgumentNullException("points is a required property for ScoreboardGameHomeTeam and cannot be null");
            }
            this.Points = points;
            this.Classification = classification;
            // to ensure "conference" is required (not null)
            if (conference == null)
            {
                throw new ArgumentNullException("conference is a required property for ScoreboardGameHomeTeam and cannot be null");
            }
            this.Conference = conference;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ScoreboardGameHomeTeam and cannot be null");
            }
            this.Name = name;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets LineScores
        /// </summary>
        [DataMember(Name = "lineScores", IsRequired = true, EmitDefaultValue = true)]
        public List<int> LineScores { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "points", IsRequired = true, EmitDefaultValue = true)]
        public int? Points { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [DataMember(Name = "conference", IsRequired = true, EmitDefaultValue = true)]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScoreboardGameHomeTeam {\n");
            sb.Append("  LineScores: ").Append(LineScores).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
