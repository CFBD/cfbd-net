// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.15
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayerSearchResult
    /// </summary>
    public partial class PlayerSearchResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerSearchResult" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="team">team</param>
        /// <param name="name">name</param>
        /// <param name="position">position</param>
        /// <param name="hometown">hometown</param>
        /// <param name="teamColor">teamColor</param>
        /// <param name="teamColorSecondary">teamColorSecondary</param>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="weight">weight</param>
        /// <param name="height">height</param>
        /// <param name="jersey">jersey</param>
        [JsonConstructor]
        public PlayerSearchResult(string id, string team, string name, string position, string hometown, string teamColor, string teamColorSecondary, string? firstName = default, string? lastName = default, int? weight = default, int? height = default, int? jersey = default)
        {
            Id = id;
            Team = team;
            Name = name;
            Position = position;
            Hometown = hometown;
            TeamColor = teamColor;
            TeamColorSecondary = teamColorSecondary;
            FirstName = firstName;
            LastName = lastName;
            Weight = weight;
            Height = height;
            Jersey = jersey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [JsonPropertyName("team")]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [JsonPropertyName("position")]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Hometown
        /// </summary>
        [JsonPropertyName("hometown")]
        public string Hometown { get; set; }

        /// <summary>
        /// Gets or Sets TeamColor
        /// </summary>
        [JsonPropertyName("teamColor")]
        public string TeamColor { get; set; }

        /// <summary>
        /// Gets or Sets TeamColorSecondary
        /// </summary>
        [JsonPropertyName("teamColorSecondary")]
        public string TeamColorSecondary { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string? FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("lastName")]
        public string? LastName { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [JsonPropertyName("weight")]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [JsonPropertyName("height")]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Jersey
        /// </summary>
        [JsonPropertyName("jersey")]
        public int? Jersey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerSearchResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Hometown: ").Append(Hometown).Append("\n");
            sb.Append("  TeamColor: ").Append(TeamColor).Append("\n");
            sb.Append("  TeamColorSecondary: ").Append(TeamColorSecondary).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Jersey: ").Append(Jersey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerSearchResult" />
    /// </summary>
    public class PlayerSearchResultJsonConverter : JsonConverter<PlayerSearchResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerSearchResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerSearchResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> team = default;
            Option<string?> name = default;
            Option<string?> position = default;
            Option<string?> hometown = default;
            Option<string?> teamColor = default;
            Option<string?> teamColorSecondary = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<int?> weight = default;
            Option<int?> height = default;
            Option<int?> jersey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "team":
                            team = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "position":
                            position = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hometown":
                            hometown = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "teamColor":
                            teamColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "teamColorSecondary":
                            teamColorSecondary = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "weight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weight = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "jersey":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                jersey = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(id));

            if (!team.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(team));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(name));

            if (!position.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(position));

            if (!hometown.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(hometown));

            if (!teamColor.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(teamColor));

            if (!teamColorSecondary.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(teamColorSecondary));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(lastName));

            if (!weight.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(weight));

            if (!height.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(height));

            if (!jersey.IsSet)
                throw new ArgumentException("Property is required for class PlayerSearchResult.", nameof(jersey));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PlayerSearchResult.");

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team), "Property is not nullable for class PlayerSearchResult.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PlayerSearchResult.");

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position), "Property is not nullable for class PlayerSearchResult.");

            if (hometown.IsSet && hometown.Value == null)
                throw new ArgumentNullException(nameof(hometown), "Property is not nullable for class PlayerSearchResult.");

            if (teamColor.IsSet && teamColor.Value == null)
                throw new ArgumentNullException(nameof(teamColor), "Property is not nullable for class PlayerSearchResult.");

            if (teamColorSecondary.IsSet && teamColorSecondary.Value == null)
                throw new ArgumentNullException(nameof(teamColorSecondary), "Property is not nullable for class PlayerSearchResult.");

            return new PlayerSearchResult(id.Value!, team.Value!, name.Value!, position.Value!, hometown.Value!, teamColor.Value!, teamColorSecondary.Value!, firstName.Value!, lastName.Value!, weight.Value!, height.Value!, jersey.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerSearchResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerSearchResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerSearchResult playerSearchResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerSearchResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerSearchResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerSearchResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerSearchResult playerSearchResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerSearchResult.Id == null)
                throw new ArgumentNullException(nameof(playerSearchResult.Id), "Property is required for class PlayerSearchResult.");

            if (playerSearchResult.Team == null)
                throw new ArgumentNullException(nameof(playerSearchResult.Team), "Property is required for class PlayerSearchResult.");

            if (playerSearchResult.Name == null)
                throw new ArgumentNullException(nameof(playerSearchResult.Name), "Property is required for class PlayerSearchResult.");

            if (playerSearchResult.Position == null)
                throw new ArgumentNullException(nameof(playerSearchResult.Position), "Property is required for class PlayerSearchResult.");

            if (playerSearchResult.Hometown == null)
                throw new ArgumentNullException(nameof(playerSearchResult.Hometown), "Property is required for class PlayerSearchResult.");

            if (playerSearchResult.TeamColor == null)
                throw new ArgumentNullException(nameof(playerSearchResult.TeamColor), "Property is required for class PlayerSearchResult.");

            if (playerSearchResult.TeamColorSecondary == null)
                throw new ArgumentNullException(nameof(playerSearchResult.TeamColorSecondary), "Property is required for class PlayerSearchResult.");

            writer.WriteString("id", playerSearchResult.Id);

            writer.WriteString("team", playerSearchResult.Team);

            writer.WriteString("name", playerSearchResult.Name);

            writer.WriteString("position", playerSearchResult.Position);

            writer.WriteString("hometown", playerSearchResult.Hometown);

            writer.WriteString("teamColor", playerSearchResult.TeamColor);

            writer.WriteString("teamColorSecondary", playerSearchResult.TeamColorSecondary);

            if (playerSearchResult.FirstName != null)
                writer.WriteString("firstName", playerSearchResult.FirstName);
            else
                writer.WriteNull("firstName");

            if (playerSearchResult.LastName != null)
                writer.WriteString("lastName", playerSearchResult.LastName);
            else
                writer.WriteNull("lastName");

            if (playerSearchResult.Weight != null)
                writer.WriteNumber("weight", playerSearchResult.Weight.Value);
            else
                writer.WriteNull("weight");

            if (playerSearchResult.Height != null)
                writer.WriteNumber("height", playerSearchResult.Height.Value);
            else
                writer.WriteNull("height");

            if (playerSearchResult.Jersey != null)
                writer.WriteNumber("jersey", playerSearchResult.Jersey.Value);
            else
                writer.WriteNull("jersey");
        }
    }
}
