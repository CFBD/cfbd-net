// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.16
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayStatClock
    /// </summary>
    public partial class PlayStatClock : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayStatClock" /> class.
        /// </summary>
        /// <param name="seconds">seconds</param>
        /// <param name="minutes">minutes</param>
        [JsonConstructor]
        public PlayStatClock(double? seconds = default, double? minutes = default)
        {
            Seconds = seconds;
            Minutes = minutes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Seconds
        /// </summary>
        [JsonPropertyName("seconds")]
        public double? Seconds { get; set; }

        /// <summary>
        /// Gets or Sets Minutes
        /// </summary>
        [JsonPropertyName("minutes")]
        public double? Minutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayStatClock {\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayStatClock" />
    /// </summary>
    public class PlayStatClockJsonConverter : JsonConverter<PlayStatClock>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayStatClock" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayStatClock Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> seconds = default;
            Option<double?> minutes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "seconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                seconds = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "minutes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minutes = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!seconds.IsSet)
                throw new ArgumentException("Property is required for class PlayStatClock.", nameof(seconds));

            if (!minutes.IsSet)
                throw new ArgumentException("Property is required for class PlayStatClock.", nameof(minutes));

            return new PlayStatClock(seconds.Value!, minutes.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayStatClock" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playStatClock"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayStatClock playStatClock, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playStatClock, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayStatClock" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playStatClock"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayStatClock playStatClock, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playStatClock.Seconds != null)
                writer.WriteNumber("seconds", playStatClock.Seconds.Value);
            else
                writer.WriteNull("seconds");

            if (playStatClock.Minutes != null)
                writer.WriteNumber("minutes", playStatClock.Minutes.Value);
            else
                writer.WriteNull("minutes");
        }
    }
}
