/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Matchup
    /// </summary>
    [DataContract(Name = "Matchup")]
    public partial class Matchup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Matchup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Matchup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Matchup" /> class.
        /// </summary>
        /// <param name="team1">team1 (required).</param>
        /// <param name="team2">team2 (required).</param>
        /// <param name="startYear">startYear.</param>
        /// <param name="endYear">endYear.</param>
        /// <param name="team1Wins">team1Wins (required).</param>
        /// <param name="team2Wins">team2Wins (required).</param>
        /// <param name="ties">ties (required).</param>
        /// <param name="games">games (required).</param>
        public Matchup(string team1 = default(string), string team2 = default(string), int startYear = default(int), int endYear = default(int), int team1Wins = default(int), int team2Wins = default(int), int ties = default(int), List<MatchupGame> games = default(List<MatchupGame>))
        {
            // to ensure "team1" is required (not null)
            if (team1 == null)
            {
                throw new ArgumentNullException("team1 is a required property for Matchup and cannot be null");
            }
            this.Team1 = team1;
            // to ensure "team2" is required (not null)
            if (team2 == null)
            {
                throw new ArgumentNullException("team2 is a required property for Matchup and cannot be null");
            }
            this.Team2 = team2;
            this.Team1Wins = team1Wins;
            this.Team2Wins = team2Wins;
            this.Ties = ties;
            // to ensure "games" is required (not null)
            if (games == null)
            {
                throw new ArgumentNullException("games is a required property for Matchup and cannot be null");
            }
            this.Games = games;
            this.StartYear = startYear;
            this.EndYear = endYear;
        }

        /// <summary>
        /// Gets or Sets Team1
        /// </summary>
        [DataMember(Name = "team1", IsRequired = true, EmitDefaultValue = true)]
        public string Team1 { get; set; }

        /// <summary>
        /// Gets or Sets Team2
        /// </summary>
        [DataMember(Name = "team2", IsRequired = true, EmitDefaultValue = true)]
        public string Team2 { get; set; }

        /// <summary>
        /// Gets or Sets StartYear
        /// </summary>
        [DataMember(Name = "startYear", EmitDefaultValue = false)]
        public int StartYear { get; set; }

        /// <summary>
        /// Gets or Sets EndYear
        /// </summary>
        [DataMember(Name = "endYear", EmitDefaultValue = false)]
        public int EndYear { get; set; }

        /// <summary>
        /// Gets or Sets Team1Wins
        /// </summary>
        [DataMember(Name = "team1Wins", IsRequired = true, EmitDefaultValue = true)]
        public int Team1Wins { get; set; }

        /// <summary>
        /// Gets or Sets Team2Wins
        /// </summary>
        [DataMember(Name = "team2Wins", IsRequired = true, EmitDefaultValue = true)]
        public int Team2Wins { get; set; }

        /// <summary>
        /// Gets or Sets Ties
        /// </summary>
        [DataMember(Name = "ties", IsRequired = true, EmitDefaultValue = true)]
        public int Ties { get; set; }

        /// <summary>
        /// Gets or Sets Games
        /// </summary>
        [DataMember(Name = "games", IsRequired = true, EmitDefaultValue = true)]
        public List<MatchupGame> Games { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Matchup {\n");
            sb.Append("  Team1: ").Append(Team1).Append("\n");
            sb.Append("  Team2: ").Append(Team2).Append("\n");
            sb.Append("  StartYear: ").Append(StartYear).Append("\n");
            sb.Append("  EndYear: ").Append(EndYear).Append("\n");
            sb.Append("  Team1Wins: ").Append(Team1Wins).Append("\n");
            sb.Append("  Team2Wins: ").Append(Team2Wins).Append("\n");
            sb.Append("  Ties: ").Append(Ties).Append("\n");
            sb.Append("  Games: ").Append(Games).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
