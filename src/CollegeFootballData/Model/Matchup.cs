// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.16
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Matchup
    /// </summary>
    public partial class Matchup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Matchup" /> class.
        /// </summary>
        /// <param name="team1">team1</param>
        /// <param name="team2">team2</param>
        /// <param name="team1Wins">team1Wins</param>
        /// <param name="team2Wins">team2Wins</param>
        /// <param name="ties">ties</param>
        /// <param name="games">games</param>
        /// <param name="startYear">startYear</param>
        /// <param name="endYear">endYear</param>
        [JsonConstructor]
        public Matchup(string team1, string team2, int team1Wins, int team2Wins, int ties, List<MatchupGame> games, Option<int?> startYear = default, Option<int?> endYear = default)
        {
            Team1 = team1;
            Team2 = team2;
            Team1Wins = team1Wins;
            Team2Wins = team2Wins;
            Ties = ties;
            Games = games;
            StartYearOption = startYear;
            EndYearOption = endYear;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Team1
        /// </summary>
        [JsonPropertyName("team1")]
        public string Team1 { get; set; }

        /// <summary>
        /// Gets or Sets Team2
        /// </summary>
        [JsonPropertyName("team2")]
        public string Team2 { get; set; }

        /// <summary>
        /// Gets or Sets Team1Wins
        /// </summary>
        [JsonPropertyName("team1Wins")]
        public int Team1Wins { get; set; }

        /// <summary>
        /// Gets or Sets Team2Wins
        /// </summary>
        [JsonPropertyName("team2Wins")]
        public int Team2Wins { get; set; }

        /// <summary>
        /// Gets or Sets Ties
        /// </summary>
        [JsonPropertyName("ties")]
        public int Ties { get; set; }

        /// <summary>
        /// Gets or Sets Games
        /// </summary>
        [JsonPropertyName("games")]
        public List<MatchupGame> Games { get; set; }

        /// <summary>
        /// Used to track the state of StartYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StartYearOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartYear
        /// </summary>
        [JsonPropertyName("startYear")]
        public int? StartYear { get { return this.StartYearOption; } set { this.StartYearOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EndYearOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndYear
        /// </summary>
        [JsonPropertyName("endYear")]
        public int? EndYear { get { return this.EndYearOption; } set { this.EndYearOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Matchup {\n");
            sb.Append("  Team1: ").Append(Team1).Append("\n");
            sb.Append("  Team2: ").Append(Team2).Append("\n");
            sb.Append("  Team1Wins: ").Append(Team1Wins).Append("\n");
            sb.Append("  Team2Wins: ").Append(Team2Wins).Append("\n");
            sb.Append("  Ties: ").Append(Ties).Append("\n");
            sb.Append("  Games: ").Append(Games).Append("\n");
            sb.Append("  StartYear: ").Append(StartYear).Append("\n");
            sb.Append("  EndYear: ").Append(EndYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Matchup" />
    /// </summary>
    public class MatchupJsonConverter : JsonConverter<Matchup>
    {
        /// <summary>
        /// Deserializes json to <see cref="Matchup" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Matchup Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> team1 = default;
            Option<string?> team2 = default;
            Option<int?> team1Wins = default;
            Option<int?> team2Wins = default;
            Option<int?> ties = default;
            Option<List<MatchupGame>?> games = default;
            Option<int?> startYear = default;
            Option<int?> endYear = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "team1":
                            team1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "team2":
                            team2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "team1Wins":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                team1Wins = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "team2Wins":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                team2Wins = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ties":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ties = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "games":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                games = new Option<List<MatchupGame>?>(JsonSerializer.Deserialize<List<MatchupGame>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "startYear":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startYear = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "endYear":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endYear = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!team1.IsSet)
                throw new ArgumentException("Property is required for class Matchup.", nameof(team1));

            if (!team2.IsSet)
                throw new ArgumentException("Property is required for class Matchup.", nameof(team2));

            if (!team1Wins.IsSet)
                throw new ArgumentException("Property is required for class Matchup.", nameof(team1Wins));

            if (!team2Wins.IsSet)
                throw new ArgumentException("Property is required for class Matchup.", nameof(team2Wins));

            if (!ties.IsSet)
                throw new ArgumentException("Property is required for class Matchup.", nameof(ties));

            if (!games.IsSet)
                throw new ArgumentException("Property is required for class Matchup.", nameof(games));

            if (team1.IsSet && team1.Value == null)
                throw new ArgumentNullException(nameof(team1), "Property is not nullable for class Matchup.");

            if (team2.IsSet && team2.Value == null)
                throw new ArgumentNullException(nameof(team2), "Property is not nullable for class Matchup.");

            if (team1Wins.IsSet && team1Wins.Value == null)
                throw new ArgumentNullException(nameof(team1Wins), "Property is not nullable for class Matchup.");

            if (team2Wins.IsSet && team2Wins.Value == null)
                throw new ArgumentNullException(nameof(team2Wins), "Property is not nullable for class Matchup.");

            if (ties.IsSet && ties.Value == null)
                throw new ArgumentNullException(nameof(ties), "Property is not nullable for class Matchup.");

            if (games.IsSet && games.Value == null)
                throw new ArgumentNullException(nameof(games), "Property is not nullable for class Matchup.");

            if (startYear.IsSet && startYear.Value == null)
                throw new ArgumentNullException(nameof(startYear), "Property is not nullable for class Matchup.");

            if (endYear.IsSet && endYear.Value == null)
                throw new ArgumentNullException(nameof(endYear), "Property is not nullable for class Matchup.");

            return new Matchup(team1.Value!, team2.Value!, team1Wins.Value!.Value!, team2Wins.Value!.Value!, ties.Value!.Value!, games.Value!, startYear, endYear);
        }

        /// <summary>
        /// Serializes a <see cref="Matchup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="matchup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Matchup matchup, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, matchup, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Matchup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="matchup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Matchup matchup, JsonSerializerOptions jsonSerializerOptions)
        {
            if (matchup.Team1 == null)
                throw new ArgumentNullException(nameof(matchup.Team1), "Property is required for class Matchup.");

            if (matchup.Team2 == null)
                throw new ArgumentNullException(nameof(matchup.Team2), "Property is required for class Matchup.");

            if (matchup.Games == null)
                throw new ArgumentNullException(nameof(matchup.Games), "Property is required for class Matchup.");

            writer.WriteString("team1", matchup.Team1);

            writer.WriteString("team2", matchup.Team2);

            writer.WriteNumber("team1Wins", matchup.Team1Wins);

            writer.WriteNumber("team2Wins", matchup.Team2Wins);

            writer.WriteNumber("ties", matchup.Ties);

            writer.WritePropertyName("games");
            JsonSerializer.Serialize(writer, matchup.Games, jsonSerializerOptions);
            if (matchup.StartYearOption.IsSet)
                writer.WriteNumber("startYear", matchup.StartYearOption.Value!.Value);

            if (matchup.EndYearOption.IsSet)
                writer.WriteNumber("endYear", matchup.EndYearOption.Value!.Value);
        }
    }
}
