/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.3
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Drive
    /// </summary>
    [DataContract(Name = "Drive")]
    public partial class Drive : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Drive" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Drive() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Drive" /> class.
        /// </summary>
        /// <param name="offense">offense (required).</param>
        /// <param name="offenseConference">offenseConference (required).</param>
        /// <param name="defense">defense (required).</param>
        /// <param name="defenseConference">defenseConference (required).</param>
        /// <param name="gameId">gameId (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="driveNumber">driveNumber (required).</param>
        /// <param name="scoring">scoring (required).</param>
        /// <param name="startPeriod">startPeriod (required).</param>
        /// <param name="startYardline">startYardline (required).</param>
        /// <param name="startYardsToGoal">startYardsToGoal (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="endPeriod">endPeriod (required).</param>
        /// <param name="endYardline">endYardline (required).</param>
        /// <param name="endYardsToGoal">endYardsToGoal (required).</param>
        /// <param name="endTime">endTime (required).</param>
        /// <param name="plays">plays (required).</param>
        /// <param name="yards">yards (required).</param>
        /// <param name="driveResult">driveResult (required).</param>
        /// <param name="isHomeOffense">isHomeOffense (required).</param>
        /// <param name="startOffenseScore">startOffenseScore (required).</param>
        /// <param name="startDefenseScore">startDefenseScore (required).</param>
        /// <param name="endOffenseScore">endOffenseScore (required).</param>
        /// <param name="endDefenseScore">endDefenseScore (required).</param>
        public Drive(string offense = default(string), string offenseConference = default(string), string defense = default(string), string defenseConference = default(string), int gameId = default(int), string id = default(string), int? driveNumber = default(int?), bool scoring = default(bool), int startPeriod = default(int), int startYardline = default(int), int startYardsToGoal = default(int), PlayClock startTime = default(PlayClock), int endPeriod = default(int), int endYardline = default(int), int endYardsToGoal = default(int), PlayClock endTime = default(PlayClock), int plays = default(int), int yards = default(int), string driveResult = default(string), bool isHomeOffense = default(bool), int startOffenseScore = default(int), int startDefenseScore = default(int), int endOffenseScore = default(int), int endDefenseScore = default(int))
        {
            // to ensure "offense" is required (not null)
            if (offense == null)
            {
                throw new ArgumentNullException("offense is a required property for Drive and cannot be null");
            }
            this.Offense = offense;
            // to ensure "offenseConference" is required (not null)
            if (offenseConference == null)
            {
                throw new ArgumentNullException("offenseConference is a required property for Drive and cannot be null");
            }
            this.OffenseConference = offenseConference;
            // to ensure "defense" is required (not null)
            if (defense == null)
            {
                throw new ArgumentNullException("defense is a required property for Drive and cannot be null");
            }
            this.Defense = defense;
            // to ensure "defenseConference" is required (not null)
            if (defenseConference == null)
            {
                throw new ArgumentNullException("defenseConference is a required property for Drive and cannot be null");
            }
            this.DefenseConference = defenseConference;
            this.GameId = gameId;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Drive and cannot be null");
            }
            this.Id = id;
            // to ensure "driveNumber" is required (not null)
            if (driveNumber == null)
            {
                throw new ArgumentNullException("driveNumber is a required property for Drive and cannot be null");
            }
            this.DriveNumber = driveNumber;
            this.Scoring = scoring;
            this.StartPeriod = startPeriod;
            this.StartYardline = startYardline;
            this.StartYardsToGoal = startYardsToGoal;
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new ArgumentNullException("startTime is a required property for Drive and cannot be null");
            }
            this.StartTime = startTime;
            this.EndPeriod = endPeriod;
            this.EndYardline = endYardline;
            this.EndYardsToGoal = endYardsToGoal;
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new ArgumentNullException("endTime is a required property for Drive and cannot be null");
            }
            this.EndTime = endTime;
            this.Plays = plays;
            this.Yards = yards;
            // to ensure "driveResult" is required (not null)
            if (driveResult == null)
            {
                throw new ArgumentNullException("driveResult is a required property for Drive and cannot be null");
            }
            this.DriveResult = driveResult;
            this.IsHomeOffense = isHomeOffense;
            this.StartOffenseScore = startOffenseScore;
            this.StartDefenseScore = startDefenseScore;
            this.EndOffenseScore = endOffenseScore;
            this.EndDefenseScore = endDefenseScore;
        }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [DataMember(Name = "offense", IsRequired = true, EmitDefaultValue = true)]
        public string Offense { get; set; }

        /// <summary>
        /// Gets or Sets OffenseConference
        /// </summary>
        [DataMember(Name = "offenseConference", IsRequired = true, EmitDefaultValue = true)]
        public string OffenseConference { get; set; }

        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [DataMember(Name = "defense", IsRequired = true, EmitDefaultValue = true)]
        public string Defense { get; set; }

        /// <summary>
        /// Gets or Sets DefenseConference
        /// </summary>
        [DataMember(Name = "defenseConference", IsRequired = true, EmitDefaultValue = true)]
        public string DefenseConference { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name = "gameId", IsRequired = true, EmitDefaultValue = true)]
        public int GameId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DriveNumber
        /// </summary>
        [DataMember(Name = "driveNumber", IsRequired = true, EmitDefaultValue = true)]
        public int? DriveNumber { get; set; }

        /// <summary>
        /// Gets or Sets Scoring
        /// </summary>
        [DataMember(Name = "scoring", IsRequired = true, EmitDefaultValue = true)]
        public bool Scoring { get; set; }

        /// <summary>
        /// Gets or Sets StartPeriod
        /// </summary>
        [DataMember(Name = "startPeriod", IsRequired = true, EmitDefaultValue = true)]
        public int StartPeriod { get; set; }

        /// <summary>
        /// Gets or Sets StartYardline
        /// </summary>
        [DataMember(Name = "startYardline", IsRequired = true, EmitDefaultValue = true)]
        public int StartYardline { get; set; }

        /// <summary>
        /// Gets or Sets StartYardsToGoal
        /// </summary>
        [DataMember(Name = "startYardsToGoal", IsRequired = true, EmitDefaultValue = true)]
        public int StartYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public PlayClock StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [DataMember(Name = "endPeriod", IsRequired = true, EmitDefaultValue = true)]
        public int EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EndYardline
        /// </summary>
        [DataMember(Name = "endYardline", IsRequired = true, EmitDefaultValue = true)]
        public int EndYardline { get; set; }

        /// <summary>
        /// Gets or Sets EndYardsToGoal
        /// </summary>
        [DataMember(Name = "endYardsToGoal", IsRequired = true, EmitDefaultValue = true)]
        public int EndYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public PlayClock EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [DataMember(Name = "plays", IsRequired = true, EmitDefaultValue = true)]
        public int Plays { get; set; }

        /// <summary>
        /// Gets or Sets Yards
        /// </summary>
        [DataMember(Name = "yards", IsRequired = true, EmitDefaultValue = true)]
        public int Yards { get; set; }

        /// <summary>
        /// Gets or Sets DriveResult
        /// </summary>
        [DataMember(Name = "driveResult", IsRequired = true, EmitDefaultValue = true)]
        public string DriveResult { get; set; }

        /// <summary>
        /// Gets or Sets IsHomeOffense
        /// </summary>
        [DataMember(Name = "isHomeOffense", IsRequired = true, EmitDefaultValue = true)]
        public bool IsHomeOffense { get; set; }

        /// <summary>
        /// Gets or Sets StartOffenseScore
        /// </summary>
        [DataMember(Name = "startOffenseScore", IsRequired = true, EmitDefaultValue = true)]
        public int StartOffenseScore { get; set; }

        /// <summary>
        /// Gets or Sets StartDefenseScore
        /// </summary>
        [DataMember(Name = "startDefenseScore", IsRequired = true, EmitDefaultValue = true)]
        public int StartDefenseScore { get; set; }

        /// <summary>
        /// Gets or Sets EndOffenseScore
        /// </summary>
        [DataMember(Name = "endOffenseScore", IsRequired = true, EmitDefaultValue = true)]
        public int EndOffenseScore { get; set; }

        /// <summary>
        /// Gets or Sets EndDefenseScore
        /// </summary>
        [DataMember(Name = "endDefenseScore", IsRequired = true, EmitDefaultValue = true)]
        public int EndDefenseScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Drive {\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  OffenseConference: ").Append(OffenseConference).Append("\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  DefenseConference: ").Append(DefenseConference).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DriveNumber: ").Append(DriveNumber).Append("\n");
            sb.Append("  Scoring: ").Append(Scoring).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  StartYardline: ").Append(StartYardline).Append("\n");
            sb.Append("  StartYardsToGoal: ").Append(StartYardsToGoal).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  EndYardline: ").Append(EndYardline).Append("\n");
            sb.Append("  EndYardsToGoal: ").Append(EndYardsToGoal).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("  Yards: ").Append(Yards).Append("\n");
            sb.Append("  DriveResult: ").Append(DriveResult).Append("\n");
            sb.Append("  IsHomeOffense: ").Append(IsHomeOffense).Append("\n");
            sb.Append("  StartOffenseScore: ").Append(StartOffenseScore).Append("\n");
            sb.Append("  StartDefenseScore: ").Append(StartDefenseScore).Append("\n");
            sb.Append("  EndOffenseScore: ").Append(EndOffenseScore).Append("\n");
            sb.Append("  EndDefenseScore: ").Append(EndDefenseScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
