// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.7
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Poll
    /// </summary>
    public partial class Poll : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Poll" /> class.
        /// </summary>
        /// <param name="varPoll">varPoll</param>
        /// <param name="ranks">ranks</param>
        [JsonConstructor]
        public Poll(string varPoll, List<PollRank> ranks)
        {
            VarPoll = varPoll;
            Ranks = ranks;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets VarPoll
        /// </summary>
        [JsonPropertyName("poll")]
        public string VarPoll { get; set; }

        /// <summary>
        /// Gets or Sets Ranks
        /// </summary>
        [JsonPropertyName("ranks")]
        public List<PollRank> Ranks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Poll {\n");
            sb.Append("  VarPoll: ").Append(VarPoll).Append("\n");
            sb.Append("  Ranks: ").Append(Ranks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Poll" />
    /// </summary>
    public class PollJsonConverter : JsonConverter<Poll>
    {
        /// <summary>
        /// Deserializes json to <see cref="Poll" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Poll Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varPoll = default;
            Option<List<PollRank>?> ranks = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "poll":
                            varPoll = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ranks":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ranks = new Option<List<PollRank>?>(JsonSerializer.Deserialize<List<PollRank>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varPoll.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(varPoll));

            if (!ranks.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(ranks));

            if (varPoll.IsSet && varPoll.Value == null)
                throw new ArgumentNullException(nameof(varPoll), "Property is not nullable for class Poll.");

            if (ranks.IsSet && ranks.Value == null)
                throw new ArgumentNullException(nameof(ranks), "Property is not nullable for class Poll.");

            return new Poll(varPoll.Value!, ranks.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Poll" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="poll"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Poll poll, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, poll, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Poll" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="poll"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Poll poll, JsonSerializerOptions jsonSerializerOptions)
        {
            if (poll.VarPoll == null)
                throw new ArgumentNullException(nameof(poll.VarPoll), "Property is required for class Poll.");

            if (poll.Ranks == null)
                throw new ArgumentNullException(nameof(poll.Ranks), "Property is required for class Poll.");

            writer.WriteString("poll", poll.VarPoll);

            writer.WritePropertyName("ranks");
            JsonSerializer.Serialize(writer, poll.Ranks, jsonSerializerOptions);
        }
    }
}
