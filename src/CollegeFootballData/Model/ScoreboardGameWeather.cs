/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.3
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// ScoreboardGameWeather
    /// </summary>
    [DataContract(Name = "ScoreboardGame_weather")]
    public partial class ScoreboardGameWeather : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardGameWeather" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScoreboardGameWeather() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardGameWeather" /> class.
        /// </summary>
        /// <param name="windDirection">windDirection (required).</param>
        /// <param name="windSpeed">windSpeed (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="temperature">temperature (required).</param>
        public ScoreboardGameWeather(double? windDirection = default(double?), double? windSpeed = default(double?), string description = default(string), double? temperature = default(double?))
        {
            // to ensure "windDirection" is required (not null)
            if (windDirection == null)
            {
                throw new ArgumentNullException("windDirection is a required property for ScoreboardGameWeather and cannot be null");
            }
            this.WindDirection = windDirection;
            // to ensure "windSpeed" is required (not null)
            if (windSpeed == null)
            {
                throw new ArgumentNullException("windSpeed is a required property for ScoreboardGameWeather and cannot be null");
            }
            this.WindSpeed = windSpeed;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ScoreboardGameWeather and cannot be null");
            }
            this.Description = description;
            // to ensure "temperature" is required (not null)
            if (temperature == null)
            {
                throw new ArgumentNullException("temperature is a required property for ScoreboardGameWeather and cannot be null");
            }
            this.Temperature = temperature;
        }

        /// <summary>
        /// Gets or Sets WindDirection
        /// </summary>
        [DataMember(Name = "windDirection", IsRequired = true, EmitDefaultValue = true)]
        public double? WindDirection { get; set; }

        /// <summary>
        /// Gets or Sets WindSpeed
        /// </summary>
        [DataMember(Name = "windSpeed", IsRequired = true, EmitDefaultValue = true)]
        public double? WindSpeed { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name = "temperature", IsRequired = true, EmitDefaultValue = true)]
        public double? Temperature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScoreboardGameWeather {\n");
            sb.Append("  WindDirection: ").Append(WindDirection).Append("\n");
            sb.Append("  WindSpeed: ").Append(WindSpeed).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
