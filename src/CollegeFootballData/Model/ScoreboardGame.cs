// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.22
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// ScoreboardGame
    /// </summary>
    public partial class ScoreboardGame : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardGame" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="startDate">startDate</param>
        /// <param name="startTimeTBD">startTimeTBD</param>
        /// <param name="neutralSite">neutralSite</param>
        /// <param name="conferenceGame">conferenceGame</param>
        /// <param name="status">status</param>
        /// <param name="venue">venue</param>
        /// <param name="homeTeam">homeTeam</param>
        /// <param name="awayTeam">awayTeam</param>
        /// <param name="weather">weather</param>
        /// <param name="betting">betting</param>
        /// <param name="tv">tv</param>
        /// <param name="period">period</param>
        /// <param name="clock">clock</param>
        /// <param name="situation">situation</param>
        /// <param name="possession">possession</param>
        /// <param name="lastPlay">lastPlay</param>
        [JsonConstructor]
        public ScoreboardGame(int id, DateTime startDate, bool startTimeTBD, bool neutralSite, bool conferenceGame, GameStatus status, ScoreboardGameVenue venue, ScoreboardGameHomeTeam homeTeam, ScoreboardGameHomeTeam awayTeam, ScoreboardGameWeather weather, ScoreboardGameBetting betting, string? tv = default, int? period = default, string? clock = default, string? situation = default, string? possession = default, string? lastPlay = default)
        {
            Id = id;
            StartDate = startDate;
            StartTimeTBD = startTimeTBD;
            NeutralSite = neutralSite;
            ConferenceGame = conferenceGame;
            Status = status;
            Venue = venue;
            HomeTeam = homeTeam;
            AwayTeam = awayTeam;
            Weather = weather;
            Betting = betting;
            Tv = tv;
            Period = period;
            Clock = clock;
            Situation = situation;
            Possession = possession;
            LastPlay = lastPlay;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public GameStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartTimeTBD
        /// </summary>
        [JsonPropertyName("startTimeTBD")]
        public bool StartTimeTBD { get; set; }

        /// <summary>
        /// Gets or Sets NeutralSite
        /// </summary>
        [JsonPropertyName("neutralSite")]
        public bool NeutralSite { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceGame
        /// </summary>
        [JsonPropertyName("conferenceGame")]
        public bool ConferenceGame { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [JsonPropertyName("venue")]
        public ScoreboardGameVenue Venue { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [JsonPropertyName("homeTeam")]
        public ScoreboardGameHomeTeam HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [JsonPropertyName("awayTeam")]
        public ScoreboardGameHomeTeam AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets Weather
        /// </summary>
        [JsonPropertyName("weather")]
        public ScoreboardGameWeather Weather { get; set; }

        /// <summary>
        /// Gets or Sets Betting
        /// </summary>
        [JsonPropertyName("betting")]
        public ScoreboardGameBetting Betting { get; set; }

        /// <summary>
        /// Gets or Sets Tv
        /// </summary>
        [JsonPropertyName("tv")]
        public string? Tv { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [JsonPropertyName("period")]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [JsonPropertyName("clock")]
        public string? Clock { get; set; }

        /// <summary>
        /// Gets or Sets Situation
        /// </summary>
        [JsonPropertyName("situation")]
        public string? Situation { get; set; }

        /// <summary>
        /// Gets or Sets Possession
        /// </summary>
        [JsonPropertyName("possession")]
        public string? Possession { get; set; }

        /// <summary>
        /// Gets or Sets LastPlay
        /// </summary>
        [JsonPropertyName("lastPlay")]
        public string? LastPlay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScoreboardGame {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTimeTBD: ").Append(StartTimeTBD).Append("\n");
            sb.Append("  NeutralSite: ").Append(NeutralSite).Append("\n");
            sb.Append("  ConferenceGame: ").Append(ConferenceGame).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  Weather: ").Append(Weather).Append("\n");
            sb.Append("  Betting: ").Append(Betting).Append("\n");
            sb.Append("  Tv: ").Append(Tv).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  Situation: ").Append(Situation).Append("\n");
            sb.Append("  Possession: ").Append(Possession).Append("\n");
            sb.Append("  LastPlay: ").Append(LastPlay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ScoreboardGame" />
    /// </summary>
    public class ScoreboardGameJsonConverter : JsonConverter<ScoreboardGame>
    {
        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ScoreboardGame" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ScoreboardGame Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<DateTime?> startDate = default;
            Option<bool?> startTimeTBD = default;
            Option<bool?> neutralSite = default;
            Option<bool?> conferenceGame = default;
            Option<GameStatus?> status = default;
            Option<ScoreboardGameVenue?> venue = default;
            Option<ScoreboardGameHomeTeam?> homeTeam = default;
            Option<ScoreboardGameHomeTeam?> awayTeam = default;
            Option<ScoreboardGameWeather?> weather = default;
            Option<ScoreboardGameBetting?> betting = default;
            Option<string?> tv = default;
            Option<int?> period = default;
            Option<string?> clock = default;
            Option<string?> situation = default;
            Option<string?> possession = default;
            Option<string?> lastPlay = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "startDate":
                            startDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "startTimeTBD":
                            startTimeTBD = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "neutralSite":
                            neutralSite = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "conferenceGame":
                            conferenceGame = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<GameStatus?>(GameStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "venue":
                            venue = new Option<ScoreboardGameVenue?>(JsonSerializer.Deserialize<ScoreboardGameVenue>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "homeTeam":
                            homeTeam = new Option<ScoreboardGameHomeTeam?>(JsonSerializer.Deserialize<ScoreboardGameHomeTeam>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "awayTeam":
                            awayTeam = new Option<ScoreboardGameHomeTeam?>(JsonSerializer.Deserialize<ScoreboardGameHomeTeam>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "weather":
                            weather = new Option<ScoreboardGameWeather?>(JsonSerializer.Deserialize<ScoreboardGameWeather>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "betting":
                            betting = new Option<ScoreboardGameBetting?>(JsonSerializer.Deserialize<ScoreboardGameBetting>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tv":
                            tv = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "period":
                            period = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "clock":
                            clock = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "situation":
                            situation = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "possession":
                            possession = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "lastPlay":
                            lastPlay = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(id));

            if (!startDate.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(startDate));

            if (!startTimeTBD.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(startTimeTBD));

            if (!neutralSite.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(neutralSite));

            if (!conferenceGame.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(conferenceGame));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(status));

            if (!venue.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(venue));

            if (!homeTeam.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(homeTeam));

            if (!awayTeam.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(awayTeam));

            if (!weather.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(weather));

            if (!betting.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(betting));

            if (!tv.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(tv));

            if (!period.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(period));

            if (!clock.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(clock));

            if (!situation.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(situation));

            if (!possession.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(possession));

            if (!lastPlay.IsSet)
                throw new ArgumentException("Property is required for class ScoreboardGame.", nameof(lastPlay));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ScoreboardGame.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class ScoreboardGame.");

            if (startTimeTBD.IsSet && startTimeTBD.Value == null)
                throw new ArgumentNullException(nameof(startTimeTBD), "Property is not nullable for class ScoreboardGame.");

            if (neutralSite.IsSet && neutralSite.Value == null)
                throw new ArgumentNullException(nameof(neutralSite), "Property is not nullable for class ScoreboardGame.");

            if (conferenceGame.IsSet && conferenceGame.Value == null)
                throw new ArgumentNullException(nameof(conferenceGame), "Property is not nullable for class ScoreboardGame.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ScoreboardGame.");

            if (venue.IsSet && venue.Value == null)
                throw new ArgumentNullException(nameof(venue), "Property is not nullable for class ScoreboardGame.");

            if (homeTeam.IsSet && homeTeam.Value == null)
                throw new ArgumentNullException(nameof(homeTeam), "Property is not nullable for class ScoreboardGame.");

            if (awayTeam.IsSet && awayTeam.Value == null)
                throw new ArgumentNullException(nameof(awayTeam), "Property is not nullable for class ScoreboardGame.");

            if (weather.IsSet && weather.Value == null)
                throw new ArgumentNullException(nameof(weather), "Property is not nullable for class ScoreboardGame.");

            if (betting.IsSet && betting.Value == null)
                throw new ArgumentNullException(nameof(betting), "Property is not nullable for class ScoreboardGame.");

            return new ScoreboardGame(id.Value!.Value!, startDate.Value!.Value!, startTimeTBD.Value!.Value!, neutralSite.Value!.Value!, conferenceGame.Value!.Value!, status.Value!.Value!, venue.Value!, homeTeam.Value!, awayTeam.Value!, weather.Value!, betting.Value!, tv.Value!, period.Value!, clock.Value!, situation.Value!, possession.Value!, lastPlay.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ScoreboardGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scoreboardGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ScoreboardGame scoreboardGame, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, scoreboardGame, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ScoreboardGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scoreboardGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ScoreboardGame scoreboardGame, JsonSerializerOptions jsonSerializerOptions)
        {
            if (scoreboardGame.Venue == null)
                throw new ArgumentNullException(nameof(scoreboardGame.Venue), "Property is required for class ScoreboardGame.");

            if (scoreboardGame.HomeTeam == null)
                throw new ArgumentNullException(nameof(scoreboardGame.HomeTeam), "Property is required for class ScoreboardGame.");

            if (scoreboardGame.AwayTeam == null)
                throw new ArgumentNullException(nameof(scoreboardGame.AwayTeam), "Property is required for class ScoreboardGame.");

            if (scoreboardGame.Weather == null)
                throw new ArgumentNullException(nameof(scoreboardGame.Weather), "Property is required for class ScoreboardGame.");

            if (scoreboardGame.Betting == null)
                throw new ArgumentNullException(nameof(scoreboardGame.Betting), "Property is required for class ScoreboardGame.");

            writer.WriteNumber("id", scoreboardGame.Id);

            writer.WriteString("startDate", scoreboardGame.StartDate.ToString(StartDateFormat));

            writer.WriteBoolean("startTimeTBD", scoreboardGame.StartTimeTBD);

            writer.WriteBoolean("neutralSite", scoreboardGame.NeutralSite);

            writer.WriteBoolean("conferenceGame", scoreboardGame.ConferenceGame);

            var statusRawValue = GameStatusValueConverter.ToJsonValue(scoreboardGame.Status);
            writer.WriteString("status", statusRawValue);

            writer.WritePropertyName("venue");
            JsonSerializer.Serialize(writer, scoreboardGame.Venue, jsonSerializerOptions);
            writer.WritePropertyName("homeTeam");
            JsonSerializer.Serialize(writer, scoreboardGame.HomeTeam, jsonSerializerOptions);
            writer.WritePropertyName("awayTeam");
            JsonSerializer.Serialize(writer, scoreboardGame.AwayTeam, jsonSerializerOptions);
            writer.WritePropertyName("weather");
            JsonSerializer.Serialize(writer, scoreboardGame.Weather, jsonSerializerOptions);
            writer.WritePropertyName("betting");
            JsonSerializer.Serialize(writer, scoreboardGame.Betting, jsonSerializerOptions);
            if (scoreboardGame.Tv != null)
                writer.WriteString("tv", scoreboardGame.Tv);
            else
                writer.WriteNull("tv");

            if (scoreboardGame.Period != null)
                writer.WriteNumber("period", scoreboardGame.Period.Value);
            else
                writer.WriteNull("period");

            if (scoreboardGame.Clock != null)
                writer.WriteString("clock", scoreboardGame.Clock);
            else
                writer.WriteNull("clock");

            if (scoreboardGame.Situation != null)
                writer.WriteString("situation", scoreboardGame.Situation);
            else
                writer.WriteNull("situation");

            if (scoreboardGame.Possession != null)
                writer.WriteString("possession", scoreboardGame.Possession);
            else
                writer.WriteNull("possession");

            if (scoreboardGame.LastPlay != null)
                writer.WriteString("lastPlay", scoreboardGame.LastPlay);
            else
                writer.WriteNull("lastPlay");
        }
    }
}
