/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// RosterPlayer
    /// </summary>
    [DataContract(Name = "RosterPlayer")]
    public partial class RosterPlayer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterPlayer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RosterPlayer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterPlayer" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="team">team (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="jersey">jersey (required).</param>
        /// <param name="year">year (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="homeCity">homeCity (required).</param>
        /// <param name="homeState">homeState (required).</param>
        /// <param name="homeCountry">homeCountry (required).</param>
        /// <param name="homeLatitude">homeLatitude (required).</param>
        /// <param name="homeLongitude">homeLongitude (required).</param>
        /// <param name="homeCountyFIPS">homeCountyFIPS (required).</param>
        /// <param name="recruitIds">recruitIds (required).</param>
        public RosterPlayer(string id = default(string), string firstName = default(string), string lastName = default(string), string team = default(string), int? height = default(int?), int? weight = default(int?), int? jersey = default(int?), int year = default(int), string position = default(string), string homeCity = default(string), string homeState = default(string), string homeCountry = default(string), double? homeLatitude = default(double?), double? homeLongitude = default(double?), string homeCountyFIPS = default(string), List<string> recruitIds = default(List<string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for RosterPlayer and cannot be null");
            }
            this.Id = id;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for RosterPlayer and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for RosterPlayer and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "team" is required (not null)
            if (team == null)
            {
                throw new ArgumentNullException("team is a required property for RosterPlayer and cannot be null");
            }
            this.Team = team;
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new ArgumentNullException("height is a required property for RosterPlayer and cannot be null");
            }
            this.Height = height;
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new ArgumentNullException("weight is a required property for RosterPlayer and cannot be null");
            }
            this.Weight = weight;
            // to ensure "jersey" is required (not null)
            if (jersey == null)
            {
                throw new ArgumentNullException("jersey is a required property for RosterPlayer and cannot be null");
            }
            this.Jersey = jersey;
            this.Year = year;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for RosterPlayer and cannot be null");
            }
            this.Position = position;
            // to ensure "homeCity" is required (not null)
            if (homeCity == null)
            {
                throw new ArgumentNullException("homeCity is a required property for RosterPlayer and cannot be null");
            }
            this.HomeCity = homeCity;
            // to ensure "homeState" is required (not null)
            if (homeState == null)
            {
                throw new ArgumentNullException("homeState is a required property for RosterPlayer and cannot be null");
            }
            this.HomeState = homeState;
            // to ensure "homeCountry" is required (not null)
            if (homeCountry == null)
            {
                throw new ArgumentNullException("homeCountry is a required property for RosterPlayer and cannot be null");
            }
            this.HomeCountry = homeCountry;
            // to ensure "homeLatitude" is required (not null)
            if (homeLatitude == null)
            {
                throw new ArgumentNullException("homeLatitude is a required property for RosterPlayer and cannot be null");
            }
            this.HomeLatitude = homeLatitude;
            // to ensure "homeLongitude" is required (not null)
            if (homeLongitude == null)
            {
                throw new ArgumentNullException("homeLongitude is a required property for RosterPlayer and cannot be null");
            }
            this.HomeLongitude = homeLongitude;
            // to ensure "homeCountyFIPS" is required (not null)
            if (homeCountyFIPS == null)
            {
                throw new ArgumentNullException("homeCountyFIPS is a required property for RosterPlayer and cannot be null");
            }
            this.HomeCountyFIPS = homeCountyFIPS;
            // to ensure "recruitIds" is required (not null)
            if (recruitIds == null)
            {
                throw new ArgumentNullException("recruitIds is a required property for RosterPlayer and cannot be null");
            }
            this.RecruitIds = recruitIds;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", IsRequired = true, EmitDefaultValue = true)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Jersey
        /// </summary>
        [DataMember(Name = "jersey", IsRequired = true, EmitDefaultValue = true)]
        public int? Jersey { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets HomeCity
        /// </summary>
        [DataMember(Name = "homeCity", IsRequired = true, EmitDefaultValue = true)]
        public string HomeCity { get; set; }

        /// <summary>
        /// Gets or Sets HomeState
        /// </summary>
        [DataMember(Name = "homeState", IsRequired = true, EmitDefaultValue = true)]
        public string HomeState { get; set; }

        /// <summary>
        /// Gets or Sets HomeCountry
        /// </summary>
        [DataMember(Name = "homeCountry", IsRequired = true, EmitDefaultValue = true)]
        public string HomeCountry { get; set; }

        /// <summary>
        /// Gets or Sets HomeLatitude
        /// </summary>
        [DataMember(Name = "homeLatitude", IsRequired = true, EmitDefaultValue = true)]
        public double? HomeLatitude { get; set; }

        /// <summary>
        /// Gets or Sets HomeLongitude
        /// </summary>
        [DataMember(Name = "homeLongitude", IsRequired = true, EmitDefaultValue = true)]
        public double? HomeLongitude { get; set; }

        /// <summary>
        /// Gets or Sets HomeCountyFIPS
        /// </summary>
        [DataMember(Name = "homeCountyFIPS", IsRequired = true, EmitDefaultValue = true)]
        public string HomeCountyFIPS { get; set; }

        /// <summary>
        /// Gets or Sets RecruitIds
        /// </summary>
        [DataMember(Name = "recruitIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> RecruitIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RosterPlayer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Jersey: ").Append(Jersey).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  HomeCity: ").Append(HomeCity).Append("\n");
            sb.Append("  HomeState: ").Append(HomeState).Append("\n");
            sb.Append("  HomeCountry: ").Append(HomeCountry).Append("\n");
            sb.Append("  HomeLatitude: ").Append(HomeLatitude).Append("\n");
            sb.Append("  HomeLongitude: ").Append(HomeLongitude).Append("\n");
            sb.Append("  HomeCountyFIPS: ").Append(HomeCountyFIPS).Append("\n");
            sb.Append("  RecruitIds: ").Append(RecruitIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
