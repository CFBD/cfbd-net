// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.7.0
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// RosterPlayer
    /// </summary>
    public partial class RosterPlayer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterPlayer" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="team">team</param>
        /// <param name="year">year</param>
        /// <param name="height">height</param>
        /// <param name="weight">weight</param>
        /// <param name="jersey">jersey</param>
        /// <param name="position">position</param>
        /// <param name="homeCity">homeCity</param>
        /// <param name="homeState">homeState</param>
        /// <param name="homeCountry">homeCountry</param>
        /// <param name="homeLatitude">homeLatitude</param>
        /// <param name="homeLongitude">homeLongitude</param>
        /// <param name="homeCountyFIPS">homeCountyFIPS</param>
        /// <param name="recruitIds">recruitIds</param>
        [JsonConstructor]
        public RosterPlayer(string id, string firstName, string lastName, string team, int year, int? height = default, int? weight = default, int? jersey = default, string? position = default, string? homeCity = default, string? homeState = default, string? homeCountry = default, double? homeLatitude = default, double? homeLongitude = default, string? homeCountyFIPS = default, List<string>? recruitIds = default)
        {
            Id = id;
            FirstName = firstName;
            LastName = lastName;
            Team = team;
            Year = year;
            Height = height;
            Weight = weight;
            Jersey = jersey;
            Position = position;
            HomeCity = homeCity;
            HomeState = homeState;
            HomeCountry = homeCountry;
            HomeLatitude = homeLatitude;
            HomeLongitude = homeLongitude;
            HomeCountyFIPS = homeCountyFIPS;
            RecruitIds = recruitIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [JsonPropertyName("team")]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [JsonPropertyName("year")]
        [Obsolete]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [JsonPropertyName("height")]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [JsonPropertyName("weight")]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Jersey
        /// </summary>
        [JsonPropertyName("jersey")]
        public int? Jersey { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [JsonPropertyName("position")]
        public string? Position { get; set; }

        /// <summary>
        /// Gets or Sets HomeCity
        /// </summary>
        [JsonPropertyName("homeCity")]
        public string? HomeCity { get; set; }

        /// <summary>
        /// Gets or Sets HomeState
        /// </summary>
        [JsonPropertyName("homeState")]
        public string? HomeState { get; set; }

        /// <summary>
        /// Gets or Sets HomeCountry
        /// </summary>
        [JsonPropertyName("homeCountry")]
        public string? HomeCountry { get; set; }

        /// <summary>
        /// Gets or Sets HomeLatitude
        /// </summary>
        [JsonPropertyName("homeLatitude")]
        public double? HomeLatitude { get; set; }

        /// <summary>
        /// Gets or Sets HomeLongitude
        /// </summary>
        [JsonPropertyName("homeLongitude")]
        public double? HomeLongitude { get; set; }

        /// <summary>
        /// Gets or Sets HomeCountyFIPS
        /// </summary>
        [JsonPropertyName("homeCountyFIPS")]
        public string? HomeCountyFIPS { get; set; }

        /// <summary>
        /// Gets or Sets RecruitIds
        /// </summary>
        [JsonPropertyName("recruitIds")]
        public List<string>? RecruitIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RosterPlayer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Jersey: ").Append(Jersey).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  HomeCity: ").Append(HomeCity).Append("\n");
            sb.Append("  HomeState: ").Append(HomeState).Append("\n");
            sb.Append("  HomeCountry: ").Append(HomeCountry).Append("\n");
            sb.Append("  HomeLatitude: ").Append(HomeLatitude).Append("\n");
            sb.Append("  HomeLongitude: ").Append(HomeLongitude).Append("\n");
            sb.Append("  HomeCountyFIPS: ").Append(HomeCountyFIPS).Append("\n");
            sb.Append("  RecruitIds: ").Append(RecruitIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RosterPlayer" />
    /// </summary>
    public class RosterPlayerJsonConverter : JsonConverter<RosterPlayer>
    {
        /// <summary>
        /// Deserializes json to <see cref="RosterPlayer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RosterPlayer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> team = default;
            Option<int?> year = default;
            Option<int?> height = default;
            Option<int?> weight = default;
            Option<int?> jersey = default;
            Option<string?> position = default;
            Option<string?> homeCity = default;
            Option<string?> homeState = default;
            Option<string?> homeCountry = default;
            Option<double?> homeLatitude = default;
            Option<double?> homeLongitude = default;
            Option<string?> homeCountyFIPS = default;
            Option<List<string>?> recruitIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "team":
                            team = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "year":
                            year = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "height":
                            height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "weight":
                            weight = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "jersey":
                            jersey = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "position":
                            position = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "homeCity":
                            homeCity = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "homeState":
                            homeState = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "homeCountry":
                            homeCountry = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "homeLatitude":
                            homeLatitude = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "homeLongitude":
                            homeLongitude = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "homeCountyFIPS":
                            homeCountyFIPS = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "recruitIds":
                            recruitIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(id));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(lastName));

            if (!team.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(team));

            if (!year.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(year));

            if (!height.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(height));

            if (!weight.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(weight));

            if (!jersey.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(jersey));

            if (!position.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(position));

            if (!homeCity.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(homeCity));

            if (!homeState.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(homeState));

            if (!homeCountry.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(homeCountry));

            if (!homeLatitude.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(homeLatitude));

            if (!homeLongitude.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(homeLongitude));

            if (!homeCountyFIPS.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(homeCountyFIPS));

            if (!recruitIds.IsSet)
                throw new ArgumentException("Property is required for class RosterPlayer.", nameof(recruitIds));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class RosterPlayer.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class RosterPlayer.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class RosterPlayer.");

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team), "Property is not nullable for class RosterPlayer.");

            if (year.IsSet && year.Value == null)
                throw new ArgumentNullException(nameof(year), "Property is not nullable for class RosterPlayer.");

            return new RosterPlayer(id.Value!, firstName.Value!, lastName.Value!, team.Value!, year.Value!.Value!, height.Value!, weight.Value!, jersey.Value!, position.Value!, homeCity.Value!, homeState.Value!, homeCountry.Value!, homeLatitude.Value!, homeLongitude.Value!, homeCountyFIPS.Value!, recruitIds.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RosterPlayer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rosterPlayer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RosterPlayer rosterPlayer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rosterPlayer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RosterPlayer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rosterPlayer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RosterPlayer rosterPlayer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rosterPlayer.Id == null)
                throw new ArgumentNullException(nameof(rosterPlayer.Id), "Property is required for class RosterPlayer.");

            if (rosterPlayer.FirstName == null)
                throw new ArgumentNullException(nameof(rosterPlayer.FirstName), "Property is required for class RosterPlayer.");

            if (rosterPlayer.LastName == null)
                throw new ArgumentNullException(nameof(rosterPlayer.LastName), "Property is required for class RosterPlayer.");

            if (rosterPlayer.Team == null)
                throw new ArgumentNullException(nameof(rosterPlayer.Team), "Property is required for class RosterPlayer.");

            writer.WriteString("id", rosterPlayer.Id);

            writer.WriteString("firstName", rosterPlayer.FirstName);

            writer.WriteString("lastName", rosterPlayer.LastName);

            writer.WriteString("team", rosterPlayer.Team);

            writer.WriteNumber("year", rosterPlayer.Year);

            if (rosterPlayer.Height != null)
                writer.WriteNumber("height", rosterPlayer.Height.Value);
            else
                writer.WriteNull("height");

            if (rosterPlayer.Weight != null)
                writer.WriteNumber("weight", rosterPlayer.Weight.Value);
            else
                writer.WriteNull("weight");

            if (rosterPlayer.Jersey != null)
                writer.WriteNumber("jersey", rosterPlayer.Jersey.Value);
            else
                writer.WriteNull("jersey");

            if (rosterPlayer.Position != null)
                writer.WriteString("position", rosterPlayer.Position);
            else
                writer.WriteNull("position");

            if (rosterPlayer.HomeCity != null)
                writer.WriteString("homeCity", rosterPlayer.HomeCity);
            else
                writer.WriteNull("homeCity");

            if (rosterPlayer.HomeState != null)
                writer.WriteString("homeState", rosterPlayer.HomeState);
            else
                writer.WriteNull("homeState");

            if (rosterPlayer.HomeCountry != null)
                writer.WriteString("homeCountry", rosterPlayer.HomeCountry);
            else
                writer.WriteNull("homeCountry");

            if (rosterPlayer.HomeLatitude != null)
                writer.WriteNumber("homeLatitude", rosterPlayer.HomeLatitude.Value);
            else
                writer.WriteNull("homeLatitude");

            if (rosterPlayer.HomeLongitude != null)
                writer.WriteNumber("homeLongitude", rosterPlayer.HomeLongitude.Value);
            else
                writer.WriteNull("homeLongitude");

            if (rosterPlayer.HomeCountyFIPS != null)
                writer.WriteString("homeCountyFIPS", rosterPlayer.HomeCountyFIPS);
            else
                writer.WriteNull("homeCountyFIPS");

            if (rosterPlayer.RecruitIds != null)
            {
                writer.WritePropertyName("recruitIds");
                JsonSerializer.Serialize(writer, rosterPlayer.RecruitIds, jsonSerializerOptions);
            }
            else
                writer.WriteNull("recruitIds");
        }
    }
}
