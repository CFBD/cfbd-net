/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// TeamSeasonPredictedPointsAddedOffense
    /// </summary>
    [DataContract(Name = "TeamSeasonPredictedPointsAdded_offense")]
    public partial class TeamSeasonPredictedPointsAddedOffense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamSeasonPredictedPointsAddedOffense" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeamSeasonPredictedPointsAddedOffense() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamSeasonPredictedPointsAddedOffense" /> class.
        /// </summary>
        /// <param name="cumulative">cumulative (required).</param>
        /// <param name="thirdDown">thirdDown (required).</param>
        /// <param name="secondDown">secondDown (required).</param>
        /// <param name="firstDown">firstDown (required).</param>
        /// <param name="rushing">rushing (required).</param>
        /// <param name="passing">passing (required).</param>
        /// <param name="overall">overall (required).</param>
        public TeamSeasonPredictedPointsAddedOffense(AdjustedTeamMetricsEpa cumulative = default(AdjustedTeamMetricsEpa), double thirdDown = default(double), double secondDown = default(double), double firstDown = default(double), double rushing = default(double), double passing = default(double), double overall = default(double))
        {
            // to ensure "cumulative" is required (not null)
            if (cumulative == null)
            {
                throw new ArgumentNullException("cumulative is a required property for TeamSeasonPredictedPointsAddedOffense and cannot be null");
            }
            this.Cumulative = cumulative;
            this.ThirdDown = thirdDown;
            this.SecondDown = secondDown;
            this.FirstDown = firstDown;
            this.Rushing = rushing;
            this.Passing = passing;
            this.Overall = overall;
        }

        /// <summary>
        /// Gets or Sets Cumulative
        /// </summary>
        [DataMember(Name = "cumulative", IsRequired = true, EmitDefaultValue = true)]
        public AdjustedTeamMetricsEpa Cumulative { get; set; }

        /// <summary>
        /// Gets or Sets ThirdDown
        /// </summary>
        [DataMember(Name = "thirdDown", IsRequired = true, EmitDefaultValue = true)]
        public double ThirdDown { get; set; }

        /// <summary>
        /// Gets or Sets SecondDown
        /// </summary>
        [DataMember(Name = "secondDown", IsRequired = true, EmitDefaultValue = true)]
        public double SecondDown { get; set; }

        /// <summary>
        /// Gets or Sets FirstDown
        /// </summary>
        [DataMember(Name = "firstDown", IsRequired = true, EmitDefaultValue = true)]
        public double FirstDown { get; set; }

        /// <summary>
        /// Gets or Sets Rushing
        /// </summary>
        [DataMember(Name = "rushing", IsRequired = true, EmitDefaultValue = true)]
        public double Rushing { get; set; }

        /// <summary>
        /// Gets or Sets Passing
        /// </summary>
        [DataMember(Name = "passing", IsRequired = true, EmitDefaultValue = true)]
        public double Passing { get; set; }

        /// <summary>
        /// Gets or Sets Overall
        /// </summary>
        [DataMember(Name = "overall", IsRequired = true, EmitDefaultValue = true)]
        public double Overall { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamSeasonPredictedPointsAddedOffense {\n");
            sb.Append("  Cumulative: ").Append(Cumulative).Append("\n");
            sb.Append("  ThirdDown: ").Append(ThirdDown).Append("\n");
            sb.Append("  SecondDown: ").Append(SecondDown).Append("\n");
            sb.Append("  FirstDown: ").Append(FirstDown).Append("\n");
            sb.Append("  Rushing: ").Append(Rushing).Append("\n");
            sb.Append("  Passing: ").Append(Passing).Append("\n");
            sb.Append("  Overall: ").Append(Overall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
