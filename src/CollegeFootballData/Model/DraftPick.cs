/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// DraftPick
    /// </summary>
    [DataContract(Name = "DraftPick")]
    public partial class DraftPick : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DraftPick" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DraftPick() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DraftPick" /> class.
        /// </summary>
        /// <param name="collegeAthleteId">collegeAthleteId (required).</param>
        /// <param name="nflAthleteId">nflAthleteId (required).</param>
        /// <param name="collegeId">collegeId (required).</param>
        /// <param name="collegeTeam">collegeTeam (required).</param>
        /// <param name="collegeConference">collegeConference (required).</param>
        /// <param name="nflTeamId">nflTeamId (required).</param>
        /// <param name="nflTeam">nflTeam (required).</param>
        /// <param name="year">year (required).</param>
        /// <param name="overall">overall (required).</param>
        /// <param name="round">round (required).</param>
        /// <param name="pick">pick (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="preDraftRanking">preDraftRanking (required).</param>
        /// <param name="preDraftPositionRanking">preDraftPositionRanking (required).</param>
        /// <param name="preDraftGrade">preDraftGrade (required).</param>
        /// <param name="hometownInfo">hometownInfo (required).</param>
        public DraftPick(int? collegeAthleteId = default(int?), int nflAthleteId = default(int), int collegeId = default(int), string collegeTeam = default(string), string collegeConference = default(string), int nflTeamId = default(int), string nflTeam = default(string), int year = default(int), int overall = default(int), int round = default(int), int pick = default(int), string name = default(string), string position = default(string), int? height = default(int?), int? weight = default(int?), int? preDraftRanking = default(int?), int? preDraftPositionRanking = default(int?), int? preDraftGrade = default(int?), DraftPickHometownInfo hometownInfo = default(DraftPickHometownInfo))
        {
            // to ensure "collegeAthleteId" is required (not null)
            if (collegeAthleteId == null)
            {
                throw new ArgumentNullException("collegeAthleteId is a required property for DraftPick and cannot be null");
            }
            this.CollegeAthleteId = collegeAthleteId;
            this.NflAthleteId = nflAthleteId;
            this.CollegeId = collegeId;
            // to ensure "collegeTeam" is required (not null)
            if (collegeTeam == null)
            {
                throw new ArgumentNullException("collegeTeam is a required property for DraftPick and cannot be null");
            }
            this.CollegeTeam = collegeTeam;
            // to ensure "collegeConference" is required (not null)
            if (collegeConference == null)
            {
                throw new ArgumentNullException("collegeConference is a required property for DraftPick and cannot be null");
            }
            this.CollegeConference = collegeConference;
            this.NflTeamId = nflTeamId;
            // to ensure "nflTeam" is required (not null)
            if (nflTeam == null)
            {
                throw new ArgumentNullException("nflTeam is a required property for DraftPick and cannot be null");
            }
            this.NflTeam = nflTeam;
            this.Year = year;
            this.Overall = overall;
            this.Round = round;
            this.Pick = pick;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DraftPick and cannot be null");
            }
            this.Name = name;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for DraftPick and cannot be null");
            }
            this.Position = position;
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new ArgumentNullException("height is a required property for DraftPick and cannot be null");
            }
            this.Height = height;
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new ArgumentNullException("weight is a required property for DraftPick and cannot be null");
            }
            this.Weight = weight;
            // to ensure "preDraftRanking" is required (not null)
            if (preDraftRanking == null)
            {
                throw new ArgumentNullException("preDraftRanking is a required property for DraftPick and cannot be null");
            }
            this.PreDraftRanking = preDraftRanking;
            // to ensure "preDraftPositionRanking" is required (not null)
            if (preDraftPositionRanking == null)
            {
                throw new ArgumentNullException("preDraftPositionRanking is a required property for DraftPick and cannot be null");
            }
            this.PreDraftPositionRanking = preDraftPositionRanking;
            // to ensure "preDraftGrade" is required (not null)
            if (preDraftGrade == null)
            {
                throw new ArgumentNullException("preDraftGrade is a required property for DraftPick and cannot be null");
            }
            this.PreDraftGrade = preDraftGrade;
            // to ensure "hometownInfo" is required (not null)
            if (hometownInfo == null)
            {
                throw new ArgumentNullException("hometownInfo is a required property for DraftPick and cannot be null");
            }
            this.HometownInfo = hometownInfo;
        }

        /// <summary>
        /// Gets or Sets CollegeAthleteId
        /// </summary>
        [DataMember(Name = "collegeAthleteId", IsRequired = true, EmitDefaultValue = true)]
        public int? CollegeAthleteId { get; set; }

        /// <summary>
        /// Gets or Sets NflAthleteId
        /// </summary>
        [DataMember(Name = "nflAthleteId", IsRequired = true, EmitDefaultValue = true)]
        public int NflAthleteId { get; set; }

        /// <summary>
        /// Gets or Sets CollegeId
        /// </summary>
        [DataMember(Name = "collegeId", IsRequired = true, EmitDefaultValue = true)]
        public int CollegeId { get; set; }

        /// <summary>
        /// Gets or Sets CollegeTeam
        /// </summary>
        [DataMember(Name = "collegeTeam", IsRequired = true, EmitDefaultValue = true)]
        public string CollegeTeam { get; set; }

        /// <summary>
        /// Gets or Sets CollegeConference
        /// </summary>
        [DataMember(Name = "collegeConference", IsRequired = true, EmitDefaultValue = true)]
        public string CollegeConference { get; set; }

        /// <summary>
        /// Gets or Sets NflTeamId
        /// </summary>
        [DataMember(Name = "nflTeamId", IsRequired = true, EmitDefaultValue = true)]
        public int NflTeamId { get; set; }

        /// <summary>
        /// Gets or Sets NflTeam
        /// </summary>
        [DataMember(Name = "nflTeam", IsRequired = true, EmitDefaultValue = true)]
        public string NflTeam { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Overall
        /// </summary>
        [DataMember(Name = "overall", IsRequired = true, EmitDefaultValue = true)]
        public int Overall { get; set; }

        /// <summary>
        /// Gets or Sets Round
        /// </summary>
        [DataMember(Name = "round", IsRequired = true, EmitDefaultValue = true)]
        public int Round { get; set; }

        /// <summary>
        /// Gets or Sets Pick
        /// </summary>
        [DataMember(Name = "pick", IsRequired = true, EmitDefaultValue = true)]
        public int Pick { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets PreDraftRanking
        /// </summary>
        [DataMember(Name = "preDraftRanking", IsRequired = true, EmitDefaultValue = true)]
        public int? PreDraftRanking { get; set; }

        /// <summary>
        /// Gets or Sets PreDraftPositionRanking
        /// </summary>
        [DataMember(Name = "preDraftPositionRanking", IsRequired = true, EmitDefaultValue = true)]
        public int? PreDraftPositionRanking { get; set; }

        /// <summary>
        /// Gets or Sets PreDraftGrade
        /// </summary>
        [DataMember(Name = "preDraftGrade", IsRequired = true, EmitDefaultValue = true)]
        public int? PreDraftGrade { get; set; }

        /// <summary>
        /// Gets or Sets HometownInfo
        /// </summary>
        [DataMember(Name = "hometownInfo", IsRequired = true, EmitDefaultValue = true)]
        public DraftPickHometownInfo HometownInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DraftPick {\n");
            sb.Append("  CollegeAthleteId: ").Append(CollegeAthleteId).Append("\n");
            sb.Append("  NflAthleteId: ").Append(NflAthleteId).Append("\n");
            sb.Append("  CollegeId: ").Append(CollegeId).Append("\n");
            sb.Append("  CollegeTeam: ").Append(CollegeTeam).Append("\n");
            sb.Append("  CollegeConference: ").Append(CollegeConference).Append("\n");
            sb.Append("  NflTeamId: ").Append(NflTeamId).Append("\n");
            sb.Append("  NflTeam: ").Append(NflTeam).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Overall: ").Append(Overall).Append("\n");
            sb.Append("  Round: ").Append(Round).Append("\n");
            sb.Append("  Pick: ").Append(Pick).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  PreDraftRanking: ").Append(PreDraftRanking).Append("\n");
            sb.Append("  PreDraftPositionRanking: ").Append(PreDraftPositionRanking).Append("\n");
            sb.Append("  PreDraftGrade: ").Append(PreDraftGrade).Append("\n");
            sb.Append("  HometownInfo: ").Append(HometownInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
