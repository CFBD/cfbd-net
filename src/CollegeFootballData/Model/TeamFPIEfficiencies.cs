// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// TeamFPIEfficiencies
    /// </summary>
    public partial class TeamFPIEfficiencies : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamFPIEfficiencies" /> class.
        /// </summary>
        /// <param name="specialTeams">specialTeams</param>
        /// <param name="defense">defense</param>
        /// <param name="offense">offense</param>
        /// <param name="overall">overall</param>
        [JsonConstructor]
        public TeamFPIEfficiencies(double? specialTeams = default, double? defense = default, double? offense = default, double? overall = default)
        {
            SpecialTeams = specialTeams;
            Defense = defense;
            Offense = offense;
            Overall = overall;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SpecialTeams
        /// </summary>
        [JsonPropertyName("specialTeams")]
        public double? SpecialTeams { get; set; }

        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [JsonPropertyName("defense")]
        public double? Defense { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [JsonPropertyName("offense")]
        public double? Offense { get; set; }

        /// <summary>
        /// Gets or Sets Overall
        /// </summary>
        [JsonPropertyName("overall")]
        public double? Overall { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamFPIEfficiencies {\n");
            sb.Append("  SpecialTeams: ").Append(SpecialTeams).Append("\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  Overall: ").Append(Overall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TeamFPIEfficiencies" />
    /// </summary>
    public class TeamFPIEfficienciesJsonConverter : JsonConverter<TeamFPIEfficiencies>
    {
        /// <summary>
        /// Deserializes json to <see cref="TeamFPIEfficiencies" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TeamFPIEfficiencies Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> specialTeams = default;
            Option<double?> defense = default;
            Option<double?> offense = default;
            Option<double?> overall = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "specialTeams":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                specialTeams = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "defense":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                defense = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "offense":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                offense = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "overall":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                overall = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!specialTeams.IsSet)
                throw new ArgumentException("Property is required for class TeamFPIEfficiencies.", nameof(specialTeams));

            if (!defense.IsSet)
                throw new ArgumentException("Property is required for class TeamFPIEfficiencies.", nameof(defense));

            if (!offense.IsSet)
                throw new ArgumentException("Property is required for class TeamFPIEfficiencies.", nameof(offense));

            if (!overall.IsSet)
                throw new ArgumentException("Property is required for class TeamFPIEfficiencies.", nameof(overall));

            return new TeamFPIEfficiencies(specialTeams.Value!, defense.Value!, offense.Value!, overall.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TeamFPIEfficiencies" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="teamFPIEfficiencies"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TeamFPIEfficiencies teamFPIEfficiencies, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, teamFPIEfficiencies, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TeamFPIEfficiencies" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="teamFPIEfficiencies"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TeamFPIEfficiencies teamFPIEfficiencies, JsonSerializerOptions jsonSerializerOptions)
        {
            if (teamFPIEfficiencies.SpecialTeams != null)
                writer.WriteNumber("specialTeams", teamFPIEfficiencies.SpecialTeams.Value);
            else
                writer.WriteNull("specialTeams");

            if (teamFPIEfficiencies.Defense != null)
                writer.WriteNumber("defense", teamFPIEfficiencies.Defense.Value);
            else
                writer.WriteNull("defense");

            if (teamFPIEfficiencies.Offense != null)
                writer.WriteNumber("offense", teamFPIEfficiencies.Offense.Value);
            else
                writer.WriteNull("offense");

            if (teamFPIEfficiencies.Overall != null)
                writer.WriteNumber("overall", teamFPIEfficiencies.Overall.Value);
            else
                writer.WriteNull("overall");
        }
    }
}
