/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// AggregatedTeamRecruiting
    /// </summary>
    [DataContract(Name = "AggregatedTeamRecruiting")]
    public partial class AggregatedTeamRecruiting : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedTeamRecruiting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AggregatedTeamRecruiting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedTeamRecruiting" /> class.
        /// </summary>
        /// <param name="team">team (required).</param>
        /// <param name="conference">conference (required).</param>
        /// <param name="positionGroup">positionGroup (required).</param>
        /// <param name="averageRating">averageRating (required).</param>
        /// <param name="totalRating">totalRating (required).</param>
        /// <param name="commits">commits (required).</param>
        /// <param name="averageStars">averageStars (required).</param>
        public AggregatedTeamRecruiting(string team = default(string), string conference = default(string), string positionGroup = default(string), double averageRating = default(double), double totalRating = default(double), int commits = default(int), double averageStars = default(double))
        {
            // to ensure "team" is required (not null)
            if (team == null)
            {
                throw new ArgumentNullException("team is a required property for AggregatedTeamRecruiting and cannot be null");
            }
            this.Team = team;
            // to ensure "conference" is required (not null)
            if (conference == null)
            {
                throw new ArgumentNullException("conference is a required property for AggregatedTeamRecruiting and cannot be null");
            }
            this.Conference = conference;
            // to ensure "positionGroup" is required (not null)
            if (positionGroup == null)
            {
                throw new ArgumentNullException("positionGroup is a required property for AggregatedTeamRecruiting and cannot be null");
            }
            this.PositionGroup = positionGroup;
            this.AverageRating = averageRating;
            this.TotalRating = totalRating;
            this.Commits = commits;
            this.AverageStars = averageStars;
        }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", IsRequired = true, EmitDefaultValue = true)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [DataMember(Name = "conference", IsRequired = true, EmitDefaultValue = true)]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets PositionGroup
        /// </summary>
        [DataMember(Name = "positionGroup", IsRequired = true, EmitDefaultValue = true)]
        public string PositionGroup { get; set; }

        /// <summary>
        /// Gets or Sets AverageRating
        /// </summary>
        [DataMember(Name = "averageRating", IsRequired = true, EmitDefaultValue = true)]
        public double AverageRating { get; set; }

        /// <summary>
        /// Gets or Sets TotalRating
        /// </summary>
        [DataMember(Name = "totalRating", IsRequired = true, EmitDefaultValue = true)]
        public double TotalRating { get; set; }

        /// <summary>
        /// Gets or Sets Commits
        /// </summary>
        [DataMember(Name = "commits", IsRequired = true, EmitDefaultValue = true)]
        public int Commits { get; set; }

        /// <summary>
        /// Gets or Sets AverageStars
        /// </summary>
        [DataMember(Name = "averageStars", IsRequired = true, EmitDefaultValue = true)]
        public double AverageStars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedTeamRecruiting {\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  PositionGroup: ").Append(PositionGroup).Append("\n");
            sb.Append("  AverageRating: ").Append(AverageRating).Append("\n");
            sb.Append("  TotalRating: ").Append(TotalRating).Append("\n");
            sb.Append("  Commits: ").Append(Commits).Append("\n");
            sb.Append("  AverageStars: ").Append(AverageStars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
