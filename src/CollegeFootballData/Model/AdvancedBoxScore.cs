/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// AdvancedBoxScore
    /// </summary>
    [DataContract(Name = "AdvancedBoxScore")]
    public partial class AdvancedBoxScore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedBoxScore" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdvancedBoxScore() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedBoxScore" /> class.
        /// </summary>
        /// <param name="gameInfo">gameInfo (required).</param>
        /// <param name="teams">teams (required).</param>
        /// <param name="players">players (required).</param>
        public AdvancedBoxScore(AdvancedBoxScoreGameInfo gameInfo = default(AdvancedBoxScoreGameInfo), AdvancedBoxScoreTeams teams = default(AdvancedBoxScoreTeams), AdvancedBoxScorePlayers players = default(AdvancedBoxScorePlayers))
        {
            // to ensure "gameInfo" is required (not null)
            if (gameInfo == null)
            {
                throw new ArgumentNullException("gameInfo is a required property for AdvancedBoxScore and cannot be null");
            }
            this.GameInfo = gameInfo;
            // to ensure "teams" is required (not null)
            if (teams == null)
            {
                throw new ArgumentNullException("teams is a required property for AdvancedBoxScore and cannot be null");
            }
            this.Teams = teams;
            // to ensure "players" is required (not null)
            if (players == null)
            {
                throw new ArgumentNullException("players is a required property for AdvancedBoxScore and cannot be null");
            }
            this.Players = players;
        }

        /// <summary>
        /// Gets or Sets GameInfo
        /// </summary>
        [DataMember(Name = "gameInfo", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedBoxScoreGameInfo GameInfo { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name = "teams", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedBoxScoreTeams Teams { get; set; }

        /// <summary>
        /// Gets or Sets Players
        /// </summary>
        [DataMember(Name = "players", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedBoxScorePlayers Players { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdvancedBoxScore {\n");
            sb.Append("  GameInfo: ").Append(GameInfo).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  Players: ").Append(Players).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
