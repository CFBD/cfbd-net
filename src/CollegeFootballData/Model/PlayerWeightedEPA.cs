// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.22
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayerWeightedEPA
    /// </summary>
    public partial class PlayerWeightedEPA : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerWeightedEPA" /> class.
        /// </summary>
        /// <param name="year">year</param>
        /// <param name="athleteId">athleteId</param>
        /// <param name="athleteName">athleteName</param>
        /// <param name="position">position</param>
        /// <param name="team">team</param>
        /// <param name="conference">conference</param>
        /// <param name="wepa">wepa</param>
        /// <param name="plays">plays</param>
        [JsonConstructor]
        public PlayerWeightedEPA(int year, string athleteId, string athleteName, string position, string team, string conference, double wepa, int plays)
        {
            Year = year;
            AthleteId = athleteId;
            AthleteName = athleteName;
            Position = position;
            Team = team;
            Conference = conference;
            Wepa = wepa;
            Plays = plays;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [JsonPropertyName("year")]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets AthleteId
        /// </summary>
        [JsonPropertyName("athleteId")]
        public string AthleteId { get; set; }

        /// <summary>
        /// Gets or Sets AthleteName
        /// </summary>
        [JsonPropertyName("athleteName")]
        public string AthleteName { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [JsonPropertyName("position")]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [JsonPropertyName("team")]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [JsonPropertyName("conference")]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets Wepa
        /// </summary>
        [JsonPropertyName("wepa")]
        public double Wepa { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [JsonPropertyName("plays")]
        public int Plays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerWeightedEPA {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  AthleteId: ").Append(AthleteId).Append("\n");
            sb.Append("  AthleteName: ").Append(AthleteName).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Wepa: ").Append(Wepa).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerWeightedEPA" />
    /// </summary>
    public class PlayerWeightedEPAJsonConverter : JsonConverter<PlayerWeightedEPA>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerWeightedEPA" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerWeightedEPA Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> year = default;
            Option<string?> athleteId = default;
            Option<string?> athleteName = default;
            Option<string?> position = default;
            Option<string?> team = default;
            Option<string?> conference = default;
            Option<double?> wepa = default;
            Option<int?> plays = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "year":
                            year = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "athleteId":
                            athleteId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "athleteName":
                            athleteName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "position":
                            position = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "team":
                            team = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "conference":
                            conference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wepa":
                            wepa = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "plays":
                            plays = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!year.IsSet)
                throw new ArgumentException("Property is required for class PlayerWeightedEPA.", nameof(year));

            if (!athleteId.IsSet)
                throw new ArgumentException("Property is required for class PlayerWeightedEPA.", nameof(athleteId));

            if (!athleteName.IsSet)
                throw new ArgumentException("Property is required for class PlayerWeightedEPA.", nameof(athleteName));

            if (!position.IsSet)
                throw new ArgumentException("Property is required for class PlayerWeightedEPA.", nameof(position));

            if (!team.IsSet)
                throw new ArgumentException("Property is required for class PlayerWeightedEPA.", nameof(team));

            if (!conference.IsSet)
                throw new ArgumentException("Property is required for class PlayerWeightedEPA.", nameof(conference));

            if (!wepa.IsSet)
                throw new ArgumentException("Property is required for class PlayerWeightedEPA.", nameof(wepa));

            if (!plays.IsSet)
                throw new ArgumentException("Property is required for class PlayerWeightedEPA.", nameof(plays));

            if (year.IsSet && year.Value == null)
                throw new ArgumentNullException(nameof(year), "Property is not nullable for class PlayerWeightedEPA.");

            if (athleteId.IsSet && athleteId.Value == null)
                throw new ArgumentNullException(nameof(athleteId), "Property is not nullable for class PlayerWeightedEPA.");

            if (athleteName.IsSet && athleteName.Value == null)
                throw new ArgumentNullException(nameof(athleteName), "Property is not nullable for class PlayerWeightedEPA.");

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position), "Property is not nullable for class PlayerWeightedEPA.");

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team), "Property is not nullable for class PlayerWeightedEPA.");

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference), "Property is not nullable for class PlayerWeightedEPA.");

            if (wepa.IsSet && wepa.Value == null)
                throw new ArgumentNullException(nameof(wepa), "Property is not nullable for class PlayerWeightedEPA.");

            if (plays.IsSet && plays.Value == null)
                throw new ArgumentNullException(nameof(plays), "Property is not nullable for class PlayerWeightedEPA.");

            return new PlayerWeightedEPA(year.Value!.Value!, athleteId.Value!, athleteName.Value!, position.Value!, team.Value!, conference.Value!, wepa.Value!.Value!, plays.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerWeightedEPA" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerWeightedEPA"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerWeightedEPA playerWeightedEPA, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerWeightedEPA, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerWeightedEPA" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerWeightedEPA"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerWeightedEPA playerWeightedEPA, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerWeightedEPA.AthleteId == null)
                throw new ArgumentNullException(nameof(playerWeightedEPA.AthleteId), "Property is required for class PlayerWeightedEPA.");

            if (playerWeightedEPA.AthleteName == null)
                throw new ArgumentNullException(nameof(playerWeightedEPA.AthleteName), "Property is required for class PlayerWeightedEPA.");

            if (playerWeightedEPA.Position == null)
                throw new ArgumentNullException(nameof(playerWeightedEPA.Position), "Property is required for class PlayerWeightedEPA.");

            if (playerWeightedEPA.Team == null)
                throw new ArgumentNullException(nameof(playerWeightedEPA.Team), "Property is required for class PlayerWeightedEPA.");

            if (playerWeightedEPA.Conference == null)
                throw new ArgumentNullException(nameof(playerWeightedEPA.Conference), "Property is required for class PlayerWeightedEPA.");

            writer.WriteNumber("year", playerWeightedEPA.Year);

            writer.WriteString("athleteId", playerWeightedEPA.AthleteId);

            writer.WriteString("athleteName", playerWeightedEPA.AthleteName);

            writer.WriteString("position", playerWeightedEPA.Position);

            writer.WriteString("team", playerWeightedEPA.Team);

            writer.WriteString("conference", playerWeightedEPA.Conference);

            writer.WriteNumber("wepa", playerWeightedEPA.Wepa);

            writer.WriteNumber("plays", playerWeightedEPA.Plays);
        }
    }
}
