/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// TeamFPIResumeRanks
    /// </summary>
    [DataContract(Name = "TeamFPI_resumeRanks")]
    public partial class TeamFPIResumeRanks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamFPIResumeRanks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeamFPIResumeRanks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamFPIResumeRanks" /> class.
        /// </summary>
        /// <param name="gameControl">gameControl (required).</param>
        /// <param name="remainingStrengthOfSchedule">remainingStrengthOfSchedule (required).</param>
        /// <param name="strengthOfSchedule">strengthOfSchedule (required).</param>
        /// <param name="averageWinProbability">averageWinProbability (required).</param>
        /// <param name="fpi">fpi (required).</param>
        /// <param name="strengthOfRecord">strengthOfRecord (required).</param>
        public TeamFPIResumeRanks(int? gameControl = default(int?), int? remainingStrengthOfSchedule = default(int?), int? strengthOfSchedule = default(int?), int? averageWinProbability = default(int?), int? fpi = default(int?), int? strengthOfRecord = default(int?))
        {
            // to ensure "gameControl" is required (not null)
            if (gameControl == null)
            {
                throw new ArgumentNullException("gameControl is a required property for TeamFPIResumeRanks and cannot be null");
            }
            this.GameControl = gameControl;
            // to ensure "remainingStrengthOfSchedule" is required (not null)
            if (remainingStrengthOfSchedule == null)
            {
                throw new ArgumentNullException("remainingStrengthOfSchedule is a required property for TeamFPIResumeRanks and cannot be null");
            }
            this.RemainingStrengthOfSchedule = remainingStrengthOfSchedule;
            // to ensure "strengthOfSchedule" is required (not null)
            if (strengthOfSchedule == null)
            {
                throw new ArgumentNullException("strengthOfSchedule is a required property for TeamFPIResumeRanks and cannot be null");
            }
            this.StrengthOfSchedule = strengthOfSchedule;
            // to ensure "averageWinProbability" is required (not null)
            if (averageWinProbability == null)
            {
                throw new ArgumentNullException("averageWinProbability is a required property for TeamFPIResumeRanks and cannot be null");
            }
            this.AverageWinProbability = averageWinProbability;
            // to ensure "fpi" is required (not null)
            if (fpi == null)
            {
                throw new ArgumentNullException("fpi is a required property for TeamFPIResumeRanks and cannot be null");
            }
            this.Fpi = fpi;
            // to ensure "strengthOfRecord" is required (not null)
            if (strengthOfRecord == null)
            {
                throw new ArgumentNullException("strengthOfRecord is a required property for TeamFPIResumeRanks and cannot be null");
            }
            this.StrengthOfRecord = strengthOfRecord;
        }

        /// <summary>
        /// Gets or Sets GameControl
        /// </summary>
        [DataMember(Name = "gameControl", IsRequired = true, EmitDefaultValue = true)]
        public int? GameControl { get; set; }

        /// <summary>
        /// Gets or Sets RemainingStrengthOfSchedule
        /// </summary>
        [DataMember(Name = "remainingStrengthOfSchedule", IsRequired = true, EmitDefaultValue = true)]
        public int? RemainingStrengthOfSchedule { get; set; }

        /// <summary>
        /// Gets or Sets StrengthOfSchedule
        /// </summary>
        [DataMember(Name = "strengthOfSchedule", IsRequired = true, EmitDefaultValue = true)]
        public int? StrengthOfSchedule { get; set; }

        /// <summary>
        /// Gets or Sets AverageWinProbability
        /// </summary>
        [DataMember(Name = "averageWinProbability", IsRequired = true, EmitDefaultValue = true)]
        public int? AverageWinProbability { get; set; }

        /// <summary>
        /// Gets or Sets Fpi
        /// </summary>
        [DataMember(Name = "fpi", IsRequired = true, EmitDefaultValue = true)]
        public int? Fpi { get; set; }

        /// <summary>
        /// Gets or Sets StrengthOfRecord
        /// </summary>
        [DataMember(Name = "strengthOfRecord", IsRequired = true, EmitDefaultValue = true)]
        public int? StrengthOfRecord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamFPIResumeRanks {\n");
            sb.Append("  GameControl: ").Append(GameControl).Append("\n");
            sb.Append("  RemainingStrengthOfSchedule: ").Append(RemainingStrengthOfSchedule).Append("\n");
            sb.Append("  StrengthOfSchedule: ").Append(StrengthOfSchedule).Append("\n");
            sb.Append("  AverageWinProbability: ").Append(AverageWinProbability).Append("\n");
            sb.Append("  Fpi: ").Append(Fpi).Append("\n");
            sb.Append("  StrengthOfRecord: ").Append(StrengthOfRecord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
