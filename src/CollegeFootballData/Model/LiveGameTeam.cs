/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// LiveGameTeam
    /// </summary>
    [DataContract(Name = "LiveGameTeam")]
    public partial class LiveGameTeam : IValidatableObject
    {
        /// <summary>
        /// Defines HomeAway
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HomeAwayEnum
        {
            /// <summary>
            /// Enum Home for value: home
            /// </summary>
            [EnumMember(Value = "home")]
            Home = 1,

            /// <summary>
            /// Enum Away for value: away
            /// </summary>
            [EnumMember(Value = "away")]
            Away = 2
        }


        /// <summary>
        /// Gets or Sets HomeAway
        /// </summary>
        [DataMember(Name = "homeAway", IsRequired = true, EmitDefaultValue = true)]
        public HomeAwayEnum HomeAway { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveGameTeam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LiveGameTeam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveGameTeam" /> class.
        /// </summary>
        /// <param name="teamId">teamId (required).</param>
        /// <param name="team">team (required).</param>
        /// <param name="homeAway">homeAway (required).</param>
        /// <param name="lineScores">lineScores (required).</param>
        /// <param name="points">points (required).</param>
        /// <param name="drives">drives (required).</param>
        /// <param name="scoringOpportunities">scoringOpportunities (required).</param>
        /// <param name="pointsPerOpportunity">pointsPerOpportunity (required).</param>
        /// <param name="plays">plays (required).</param>
        /// <param name="lineYards">lineYards (required).</param>
        /// <param name="lineYardsPerRush">lineYardsPerRush (required).</param>
        /// <param name="secondLevelYards">secondLevelYards (required).</param>
        /// <param name="secondLevelYardsPerRush">secondLevelYardsPerRush (required).</param>
        /// <param name="openFieldYards">openFieldYards (required).</param>
        /// <param name="openFieldYardsPerRush">openFieldYardsPerRush (required).</param>
        /// <param name="epaPerPlay">epaPerPlay (required).</param>
        /// <param name="totalEpa">totalEpa (required).</param>
        /// <param name="passingEpa">passingEpa (required).</param>
        /// <param name="epaPerPass">epaPerPass (required).</param>
        /// <param name="rushingEpa">rushingEpa (required).</param>
        /// <param name="epaPerRush">epaPerRush (required).</param>
        /// <param name="successRate">successRate (required).</param>
        /// <param name="standardDownSuccessRate">standardDownSuccessRate (required).</param>
        /// <param name="passingDownSuccessRate">passingDownSuccessRate (required).</param>
        /// <param name="explosiveness">explosiveness (required).</param>
        public LiveGameTeam(int teamId = default(int), string team = default(string), HomeAwayEnum homeAway = default(HomeAwayEnum), List<int> lineScores = default(List<int>), int points = default(int), int drives = default(int), int scoringOpportunities = default(int), double pointsPerOpportunity = default(double), int plays = default(int), double lineYards = default(double), double lineYardsPerRush = default(double), double secondLevelYards = default(double), double secondLevelYardsPerRush = default(double), double openFieldYards = default(double), double openFieldYardsPerRush = default(double), double epaPerPlay = default(double), double totalEpa = default(double), double passingEpa = default(double), double epaPerPass = default(double), double rushingEpa = default(double), double epaPerRush = default(double), double successRate = default(double), double standardDownSuccessRate = default(double), double passingDownSuccessRate = default(double), double explosiveness = default(double))
        {
            this.TeamId = teamId;
            // to ensure "team" is required (not null)
            if (team == null)
            {
                throw new ArgumentNullException("team is a required property for LiveGameTeam and cannot be null");
            }
            this.Team = team;
            this.HomeAway = homeAway;
            // to ensure "lineScores" is required (not null)
            if (lineScores == null)
            {
                throw new ArgumentNullException("lineScores is a required property for LiveGameTeam and cannot be null");
            }
            this.LineScores = lineScores;
            this.Points = points;
            this.Drives = drives;
            this.ScoringOpportunities = scoringOpportunities;
            this.PointsPerOpportunity = pointsPerOpportunity;
            this.Plays = plays;
            this.LineYards = lineYards;
            this.LineYardsPerRush = lineYardsPerRush;
            this.SecondLevelYards = secondLevelYards;
            this.SecondLevelYardsPerRush = secondLevelYardsPerRush;
            this.OpenFieldYards = openFieldYards;
            this.OpenFieldYardsPerRush = openFieldYardsPerRush;
            this.EpaPerPlay = epaPerPlay;
            this.TotalEpa = totalEpa;
            this.PassingEpa = passingEpa;
            this.EpaPerPass = epaPerPass;
            this.RushingEpa = rushingEpa;
            this.EpaPerRush = epaPerRush;
            this.SuccessRate = successRate;
            this.StandardDownSuccessRate = standardDownSuccessRate;
            this.PassingDownSuccessRate = passingDownSuccessRate;
            this.Explosiveness = explosiveness;
        }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name = "teamId", IsRequired = true, EmitDefaultValue = true)]
        public int TeamId { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", IsRequired = true, EmitDefaultValue = true)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets LineScores
        /// </summary>
        [DataMember(Name = "lineScores", IsRequired = true, EmitDefaultValue = true)]
        public List<int> LineScores { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "points", IsRequired = true, EmitDefaultValue = true)]
        public int Points { get; set; }

        /// <summary>
        /// Gets or Sets Drives
        /// </summary>
        [DataMember(Name = "drives", IsRequired = true, EmitDefaultValue = true)]
        public int Drives { get; set; }

        /// <summary>
        /// Gets or Sets ScoringOpportunities
        /// </summary>
        [DataMember(Name = "scoringOpportunities", IsRequired = true, EmitDefaultValue = true)]
        public int ScoringOpportunities { get; set; }

        /// <summary>
        /// Gets or Sets PointsPerOpportunity
        /// </summary>
        [DataMember(Name = "pointsPerOpportunity", IsRequired = true, EmitDefaultValue = true)]
        public double PointsPerOpportunity { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [DataMember(Name = "plays", IsRequired = true, EmitDefaultValue = true)]
        public int Plays { get; set; }

        /// <summary>
        /// Gets or Sets LineYards
        /// </summary>
        [DataMember(Name = "lineYards", IsRequired = true, EmitDefaultValue = true)]
        public double LineYards { get; set; }

        /// <summary>
        /// Gets or Sets LineYardsPerRush
        /// </summary>
        [DataMember(Name = "lineYardsPerRush", IsRequired = true, EmitDefaultValue = true)]
        public double LineYardsPerRush { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelYards
        /// </summary>
        [DataMember(Name = "secondLevelYards", IsRequired = true, EmitDefaultValue = true)]
        public double SecondLevelYards { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelYardsPerRush
        /// </summary>
        [DataMember(Name = "secondLevelYardsPerRush", IsRequired = true, EmitDefaultValue = true)]
        public double SecondLevelYardsPerRush { get; set; }

        /// <summary>
        /// Gets or Sets OpenFieldYards
        /// </summary>
        [DataMember(Name = "openFieldYards", IsRequired = true, EmitDefaultValue = true)]
        public double OpenFieldYards { get; set; }

        /// <summary>
        /// Gets or Sets OpenFieldYardsPerRush
        /// </summary>
        [DataMember(Name = "openFieldYardsPerRush", IsRequired = true, EmitDefaultValue = true)]
        public double OpenFieldYardsPerRush { get; set; }

        /// <summary>
        /// Gets or Sets EpaPerPlay
        /// </summary>
        [DataMember(Name = "epaPerPlay", IsRequired = true, EmitDefaultValue = true)]
        public double EpaPerPlay { get; set; }

        /// <summary>
        /// Gets or Sets TotalEpa
        /// </summary>
        [DataMember(Name = "totalEpa", IsRequired = true, EmitDefaultValue = true)]
        public double TotalEpa { get; set; }

        /// <summary>
        /// Gets or Sets PassingEpa
        /// </summary>
        [DataMember(Name = "passingEpa", IsRequired = true, EmitDefaultValue = true)]
        public double PassingEpa { get; set; }

        /// <summary>
        /// Gets or Sets EpaPerPass
        /// </summary>
        [DataMember(Name = "epaPerPass", IsRequired = true, EmitDefaultValue = true)]
        public double EpaPerPass { get; set; }

        /// <summary>
        /// Gets or Sets RushingEpa
        /// </summary>
        [DataMember(Name = "rushingEpa", IsRequired = true, EmitDefaultValue = true)]
        public double RushingEpa { get; set; }

        /// <summary>
        /// Gets or Sets EpaPerRush
        /// </summary>
        [DataMember(Name = "epaPerRush", IsRequired = true, EmitDefaultValue = true)]
        public double EpaPerRush { get; set; }

        /// <summary>
        /// Gets or Sets SuccessRate
        /// </summary>
        [DataMember(Name = "successRate", IsRequired = true, EmitDefaultValue = true)]
        public double SuccessRate { get; set; }

        /// <summary>
        /// Gets or Sets StandardDownSuccessRate
        /// </summary>
        [DataMember(Name = "standardDownSuccessRate", IsRequired = true, EmitDefaultValue = true)]
        public double StandardDownSuccessRate { get; set; }

        /// <summary>
        /// Gets or Sets PassingDownSuccessRate
        /// </summary>
        [DataMember(Name = "passingDownSuccessRate", IsRequired = true, EmitDefaultValue = true)]
        public double PassingDownSuccessRate { get; set; }

        /// <summary>
        /// Gets or Sets Explosiveness
        /// </summary>
        [DataMember(Name = "explosiveness", IsRequired = true, EmitDefaultValue = true)]
        public double Explosiveness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveGameTeam {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  HomeAway: ").Append(HomeAway).Append("\n");
            sb.Append("  LineScores: ").Append(LineScores).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Drives: ").Append(Drives).Append("\n");
            sb.Append("  ScoringOpportunities: ").Append(ScoringOpportunities).Append("\n");
            sb.Append("  PointsPerOpportunity: ").Append(PointsPerOpportunity).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("  LineYards: ").Append(LineYards).Append("\n");
            sb.Append("  LineYardsPerRush: ").Append(LineYardsPerRush).Append("\n");
            sb.Append("  SecondLevelYards: ").Append(SecondLevelYards).Append("\n");
            sb.Append("  SecondLevelYardsPerRush: ").Append(SecondLevelYardsPerRush).Append("\n");
            sb.Append("  OpenFieldYards: ").Append(OpenFieldYards).Append("\n");
            sb.Append("  OpenFieldYardsPerRush: ").Append(OpenFieldYardsPerRush).Append("\n");
            sb.Append("  EpaPerPlay: ").Append(EpaPerPlay).Append("\n");
            sb.Append("  TotalEpa: ").Append(TotalEpa).Append("\n");
            sb.Append("  PassingEpa: ").Append(PassingEpa).Append("\n");
            sb.Append("  EpaPerPass: ").Append(EpaPerPass).Append("\n");
            sb.Append("  RushingEpa: ").Append(RushingEpa).Append("\n");
            sb.Append("  EpaPerRush: ").Append(EpaPerRush).Append("\n");
            sb.Append("  SuccessRate: ").Append(SuccessRate).Append("\n");
            sb.Append("  StandardDownSuccessRate: ").Append(StandardDownSuccessRate).Append("\n");
            sb.Append("  PassingDownSuccessRate: ").Append(PassingDownSuccessRate).Append("\n");
            sb.Append("  Explosiveness: ").Append(Explosiveness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
