/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// AdvancedSeasonStatOffense
    /// </summary>
    [DataContract(Name = "AdvancedSeasonStat_offense")]
    public partial class AdvancedSeasonStatOffense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedSeasonStatOffense" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdvancedSeasonStatOffense() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedSeasonStatOffense" /> class.
        /// </summary>
        /// <param name="passingPlays">passingPlays (required).</param>
        /// <param name="rushingPlays">rushingPlays (required).</param>
        /// <param name="passingDowns">passingDowns (required).</param>
        /// <param name="standardDowns">standardDowns (required).</param>
        /// <param name="havoc">havoc (required).</param>
        /// <param name="fieldPosition">fieldPosition (required).</param>
        /// <param name="pointsPerOpportunity">pointsPerOpportunity (required).</param>
        /// <param name="totalOpportunies">totalOpportunies (required).</param>
        /// <param name="openFieldYardsTotal">openFieldYardsTotal (required).</param>
        /// <param name="openFieldYards">openFieldYards (required).</param>
        /// <param name="secondLevelYardsTotal">secondLevelYardsTotal (required).</param>
        /// <param name="secondLevelYards">secondLevelYards (required).</param>
        /// <param name="lineYardsTotal">lineYardsTotal (required).</param>
        /// <param name="lineYards">lineYards (required).</param>
        /// <param name="stuffRate">stuffRate (required).</param>
        /// <param name="powerSuccess">powerSuccess (required).</param>
        /// <param name="explosiveness">explosiveness (required).</param>
        /// <param name="successRate">successRate (required).</param>
        /// <param name="totalPPA">totalPPA (required).</param>
        /// <param name="ppa">ppa (required).</param>
        /// <param name="drives">drives (required).</param>
        /// <param name="plays">plays (required).</param>
        public AdvancedSeasonStatOffense(AdvancedSeasonStatOffensePassingPlays passingPlays = default(AdvancedSeasonStatOffensePassingPlays), AdvancedSeasonStatOffensePassingPlays rushingPlays = default(AdvancedSeasonStatOffensePassingPlays), AdvancedSeasonStatOffensePassingDowns passingDowns = default(AdvancedSeasonStatOffensePassingDowns), AdvancedSeasonStatOffensePassingDowns standardDowns = default(AdvancedSeasonStatOffensePassingDowns), AdvancedSeasonStatOffenseHavoc havoc = default(AdvancedSeasonStatOffenseHavoc), AdvancedSeasonStatOffenseFieldPosition fieldPosition = default(AdvancedSeasonStatOffenseFieldPosition), double pointsPerOpportunity = default(double), int totalOpportunies = default(int), int openFieldYardsTotal = default(int), double openFieldYards = default(double), int secondLevelYardsTotal = default(int), double secondLevelYards = default(double), int lineYardsTotal = default(int), double lineYards = default(double), double stuffRate = default(double), double powerSuccess = default(double), double explosiveness = default(double), double successRate = default(double), double totalPPA = default(double), double ppa = default(double), int drives = default(int), int plays = default(int))
        {
            // to ensure "passingPlays" is required (not null)
            if (passingPlays == null)
            {
                throw new ArgumentNullException("passingPlays is a required property for AdvancedSeasonStatOffense and cannot be null");
            }
            this.PassingPlays = passingPlays;
            // to ensure "rushingPlays" is required (not null)
            if (rushingPlays == null)
            {
                throw new ArgumentNullException("rushingPlays is a required property for AdvancedSeasonStatOffense and cannot be null");
            }
            this.RushingPlays = rushingPlays;
            // to ensure "passingDowns" is required (not null)
            if (passingDowns == null)
            {
                throw new ArgumentNullException("passingDowns is a required property for AdvancedSeasonStatOffense and cannot be null");
            }
            this.PassingDowns = passingDowns;
            // to ensure "standardDowns" is required (not null)
            if (standardDowns == null)
            {
                throw new ArgumentNullException("standardDowns is a required property for AdvancedSeasonStatOffense and cannot be null");
            }
            this.StandardDowns = standardDowns;
            // to ensure "havoc" is required (not null)
            if (havoc == null)
            {
                throw new ArgumentNullException("havoc is a required property for AdvancedSeasonStatOffense and cannot be null");
            }
            this.Havoc = havoc;
            // to ensure "fieldPosition" is required (not null)
            if (fieldPosition == null)
            {
                throw new ArgumentNullException("fieldPosition is a required property for AdvancedSeasonStatOffense and cannot be null");
            }
            this.FieldPosition = fieldPosition;
            this.PointsPerOpportunity = pointsPerOpportunity;
            this.TotalOpportunies = totalOpportunies;
            this.OpenFieldYardsTotal = openFieldYardsTotal;
            this.OpenFieldYards = openFieldYards;
            this.SecondLevelYardsTotal = secondLevelYardsTotal;
            this.SecondLevelYards = secondLevelYards;
            this.LineYardsTotal = lineYardsTotal;
            this.LineYards = lineYards;
            this.StuffRate = stuffRate;
            this.PowerSuccess = powerSuccess;
            this.Explosiveness = explosiveness;
            this.SuccessRate = successRate;
            this.TotalPPA = totalPPA;
            this.Ppa = ppa;
            this.Drives = drives;
            this.Plays = plays;
        }

        /// <summary>
        /// Gets or Sets PassingPlays
        /// </summary>
        [DataMember(Name = "passingPlays", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedSeasonStatOffensePassingPlays PassingPlays { get; set; }

        /// <summary>
        /// Gets or Sets RushingPlays
        /// </summary>
        [DataMember(Name = "rushingPlays", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedSeasonStatOffensePassingPlays RushingPlays { get; set; }

        /// <summary>
        /// Gets or Sets PassingDowns
        /// </summary>
        [DataMember(Name = "passingDowns", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedSeasonStatOffensePassingDowns PassingDowns { get; set; }

        /// <summary>
        /// Gets or Sets StandardDowns
        /// </summary>
        [DataMember(Name = "standardDowns", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedSeasonStatOffensePassingDowns StandardDowns { get; set; }

        /// <summary>
        /// Gets or Sets Havoc
        /// </summary>
        [DataMember(Name = "havoc", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedSeasonStatOffenseHavoc Havoc { get; set; }

        /// <summary>
        /// Gets or Sets FieldPosition
        /// </summary>
        [DataMember(Name = "fieldPosition", IsRequired = true, EmitDefaultValue = true)]
        public AdvancedSeasonStatOffenseFieldPosition FieldPosition { get; set; }

        /// <summary>
        /// Gets or Sets PointsPerOpportunity
        /// </summary>
        [DataMember(Name = "pointsPerOpportunity", IsRequired = true, EmitDefaultValue = true)]
        public double PointsPerOpportunity { get; set; }

        /// <summary>
        /// Gets or Sets TotalOpportunies
        /// </summary>
        [DataMember(Name = "totalOpportunies", IsRequired = true, EmitDefaultValue = true)]
        public int TotalOpportunies { get; set; }

        /// <summary>
        /// Gets or Sets OpenFieldYardsTotal
        /// </summary>
        [DataMember(Name = "openFieldYardsTotal", IsRequired = true, EmitDefaultValue = true)]
        public int OpenFieldYardsTotal { get; set; }

        /// <summary>
        /// Gets or Sets OpenFieldYards
        /// </summary>
        [DataMember(Name = "openFieldYards", IsRequired = true, EmitDefaultValue = true)]
        public double OpenFieldYards { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelYardsTotal
        /// </summary>
        [DataMember(Name = "secondLevelYardsTotal", IsRequired = true, EmitDefaultValue = true)]
        public int SecondLevelYardsTotal { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelYards
        /// </summary>
        [DataMember(Name = "secondLevelYards", IsRequired = true, EmitDefaultValue = true)]
        public double SecondLevelYards { get; set; }

        /// <summary>
        /// Gets or Sets LineYardsTotal
        /// </summary>
        [DataMember(Name = "lineYardsTotal", IsRequired = true, EmitDefaultValue = true)]
        public int LineYardsTotal { get; set; }

        /// <summary>
        /// Gets or Sets LineYards
        /// </summary>
        [DataMember(Name = "lineYards", IsRequired = true, EmitDefaultValue = true)]
        public double LineYards { get; set; }

        /// <summary>
        /// Gets or Sets StuffRate
        /// </summary>
        [DataMember(Name = "stuffRate", IsRequired = true, EmitDefaultValue = true)]
        public double StuffRate { get; set; }

        /// <summary>
        /// Gets or Sets PowerSuccess
        /// </summary>
        [DataMember(Name = "powerSuccess", IsRequired = true, EmitDefaultValue = true)]
        public double PowerSuccess { get; set; }

        /// <summary>
        /// Gets or Sets Explosiveness
        /// </summary>
        [DataMember(Name = "explosiveness", IsRequired = true, EmitDefaultValue = true)]
        public double Explosiveness { get; set; }

        /// <summary>
        /// Gets or Sets SuccessRate
        /// </summary>
        [DataMember(Name = "successRate", IsRequired = true, EmitDefaultValue = true)]
        public double SuccessRate { get; set; }

        /// <summary>
        /// Gets or Sets TotalPPA
        /// </summary>
        [DataMember(Name = "totalPPA", IsRequired = true, EmitDefaultValue = true)]
        public double TotalPPA { get; set; }

        /// <summary>
        /// Gets or Sets Ppa
        /// </summary>
        [DataMember(Name = "ppa", IsRequired = true, EmitDefaultValue = true)]
        public double Ppa { get; set; }

        /// <summary>
        /// Gets or Sets Drives
        /// </summary>
        [DataMember(Name = "drives", IsRequired = true, EmitDefaultValue = true)]
        public int Drives { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [DataMember(Name = "plays", IsRequired = true, EmitDefaultValue = true)]
        public int Plays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdvancedSeasonStatOffense {\n");
            sb.Append("  PassingPlays: ").Append(PassingPlays).Append("\n");
            sb.Append("  RushingPlays: ").Append(RushingPlays).Append("\n");
            sb.Append("  PassingDowns: ").Append(PassingDowns).Append("\n");
            sb.Append("  StandardDowns: ").Append(StandardDowns).Append("\n");
            sb.Append("  Havoc: ").Append(Havoc).Append("\n");
            sb.Append("  FieldPosition: ").Append(FieldPosition).Append("\n");
            sb.Append("  PointsPerOpportunity: ").Append(PointsPerOpportunity).Append("\n");
            sb.Append("  TotalOpportunies: ").Append(TotalOpportunies).Append("\n");
            sb.Append("  OpenFieldYardsTotal: ").Append(OpenFieldYardsTotal).Append("\n");
            sb.Append("  OpenFieldYards: ").Append(OpenFieldYards).Append("\n");
            sb.Append("  SecondLevelYardsTotal: ").Append(SecondLevelYardsTotal).Append("\n");
            sb.Append("  SecondLevelYards: ").Append(SecondLevelYards).Append("\n");
            sb.Append("  LineYardsTotal: ").Append(LineYardsTotal).Append("\n");
            sb.Append("  LineYards: ").Append(LineYards).Append("\n");
            sb.Append("  StuffRate: ").Append(StuffRate).Append("\n");
            sb.Append("  PowerSuccess: ").Append(PowerSuccess).Append("\n");
            sb.Append("  Explosiveness: ").Append(Explosiveness).Append("\n");
            sb.Append("  SuccessRate: ").Append(SuccessRate).Append("\n");
            sb.Append("  TotalPPA: ").Append(TotalPPA).Append("\n");
            sb.Append("  Ppa: ").Append(Ppa).Append("\n");
            sb.Append("  Drives: ").Append(Drives).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
