/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayWinProbability
    /// </summary>
    [DataContract(Name = "PlayWinProbability")]
    public partial class PlayWinProbability : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayWinProbability" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayWinProbability() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayWinProbability" /> class.
        /// </summary>
        /// <param name="gameId">gameId (required).</param>
        /// <param name="playId">playId (required).</param>
        /// <param name="playText">playText (required).</param>
        /// <param name="homeId">homeId (required).</param>
        /// <param name="home">home (required).</param>
        /// <param name="awayId">awayId (required).</param>
        /// <param name="away">away (required).</param>
        /// <param name="spread">spread (required).</param>
        /// <param name="homeBall">homeBall (required).</param>
        /// <param name="homeScore">homeScore (required).</param>
        /// <param name="awayScore">awayScore (required).</param>
        /// <param name="yardLine">yardLine (required).</param>
        /// <param name="down">down (required).</param>
        /// <param name="distance">distance (required).</param>
        /// <param name="homeWinProbability">homeWinProbability (required).</param>
        /// <param name="playNumber">playNumber (required).</param>
        public PlayWinProbability(int gameId = default(int), string playId = default(string), string playText = default(string), int homeId = default(int), string home = default(string), int awayId = default(int), string away = default(string), double spread = default(double), bool homeBall = default(bool), int homeScore = default(int), int awayScore = default(int), int yardLine = default(int), int down = default(int), int distance = default(int), double homeWinProbability = default(double), int playNumber = default(int))
        {
            this.GameId = gameId;
            // to ensure "playId" is required (not null)
            if (playId == null)
            {
                throw new ArgumentNullException("playId is a required property for PlayWinProbability and cannot be null");
            }
            this.PlayId = playId;
            // to ensure "playText" is required (not null)
            if (playText == null)
            {
                throw new ArgumentNullException("playText is a required property for PlayWinProbability and cannot be null");
            }
            this.PlayText = playText;
            this.HomeId = homeId;
            // to ensure "home" is required (not null)
            if (home == null)
            {
                throw new ArgumentNullException("home is a required property for PlayWinProbability and cannot be null");
            }
            this.Home = home;
            this.AwayId = awayId;
            // to ensure "away" is required (not null)
            if (away == null)
            {
                throw new ArgumentNullException("away is a required property for PlayWinProbability and cannot be null");
            }
            this.Away = away;
            this.Spread = spread;
            this.HomeBall = homeBall;
            this.HomeScore = homeScore;
            this.AwayScore = awayScore;
            this.YardLine = yardLine;
            this.Down = down;
            this.Distance = distance;
            this.HomeWinProbability = homeWinProbability;
            this.PlayNumber = playNumber;
        }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name = "gameId", IsRequired = true, EmitDefaultValue = true)]
        public int GameId { get; set; }

        /// <summary>
        /// Gets or Sets PlayId
        /// </summary>
        [DataMember(Name = "playId", IsRequired = true, EmitDefaultValue = true)]
        public string PlayId { get; set; }

        /// <summary>
        /// Gets or Sets PlayText
        /// </summary>
        [DataMember(Name = "playText", IsRequired = true, EmitDefaultValue = true)]
        public string PlayText { get; set; }

        /// <summary>
        /// Gets or Sets HomeId
        /// </summary>
        [DataMember(Name = "homeId", IsRequired = true, EmitDefaultValue = true)]
        public int HomeId { get; set; }

        /// <summary>
        /// Gets or Sets Home
        /// </summary>
        [DataMember(Name = "home", IsRequired = true, EmitDefaultValue = true)]
        public string Home { get; set; }

        /// <summary>
        /// Gets or Sets AwayId
        /// </summary>
        [DataMember(Name = "awayId", IsRequired = true, EmitDefaultValue = true)]
        public int AwayId { get; set; }

        /// <summary>
        /// Gets or Sets Away
        /// </summary>
        [DataMember(Name = "away", IsRequired = true, EmitDefaultValue = true)]
        public string Away { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name = "spread", IsRequired = true, EmitDefaultValue = true)]
        public double Spread { get; set; }

        /// <summary>
        /// Gets or Sets HomeBall
        /// </summary>
        [DataMember(Name = "homeBall", IsRequired = true, EmitDefaultValue = true)]
        public bool HomeBall { get; set; }

        /// <summary>
        /// Gets or Sets HomeScore
        /// </summary>
        [DataMember(Name = "homeScore", IsRequired = true, EmitDefaultValue = true)]
        public int HomeScore { get; set; }

        /// <summary>
        /// Gets or Sets AwayScore
        /// </summary>
        [DataMember(Name = "awayScore", IsRequired = true, EmitDefaultValue = true)]
        public int AwayScore { get; set; }

        /// <summary>
        /// Gets or Sets YardLine
        /// </summary>
        [DataMember(Name = "yardLine", IsRequired = true, EmitDefaultValue = true)]
        public int YardLine { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [DataMember(Name = "down", IsRequired = true, EmitDefaultValue = true)]
        public int Down { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public int Distance { get; set; }

        /// <summary>
        /// Gets or Sets HomeWinProbability
        /// </summary>
        [DataMember(Name = "homeWinProbability", IsRequired = true, EmitDefaultValue = true)]
        public double HomeWinProbability { get; set; }

        /// <summary>
        /// Gets or Sets PlayNumber
        /// </summary>
        [DataMember(Name = "playNumber", IsRequired = true, EmitDefaultValue = true)]
        public int PlayNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayWinProbability {\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  PlayId: ").Append(PlayId).Append("\n");
            sb.Append("  PlayText: ").Append(PlayText).Append("\n");
            sb.Append("  HomeId: ").Append(HomeId).Append("\n");
            sb.Append("  Home: ").Append(Home).Append("\n");
            sb.Append("  AwayId: ").Append(AwayId).Append("\n");
            sb.Append("  Away: ").Append(Away).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  HomeBall: ").Append(HomeBall).Append("\n");
            sb.Append("  HomeScore: ").Append(HomeScore).Append("\n");
            sb.Append("  AwayScore: ").Append(AwayScore).Append("\n");
            sb.Append("  YardLine: ").Append(YardLine).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  HomeWinProbability: ").Append(HomeWinProbability).Append("\n");
            sb.Append("  PlayNumber: ").Append(PlayNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
