// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.24
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// CalendarWeek
    /// </summary>
    public partial class CalendarWeek : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarWeek" /> class.
        /// </summary>
        /// <param name="season">season</param>
        /// <param name="week">week</param>
        /// <param name="seasonType">seasonType</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <param name="firstGameStart">firstGameStart</param>
        /// <param name="lastGameStart">lastGameStart</param>
        [JsonConstructor]
        public CalendarWeek(int season, int week, SeasonType seasonType, DateTime startDate, DateTime endDate, DateTime firstGameStart, DateTime lastGameStart)
        {
            Season = season;
            Week = week;
            SeasonType = seasonType;
            StartDate = startDate;
            EndDate = endDate;
            FirstGameStart = firstGameStart;
            LastGameStart = lastGameStart;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [JsonPropertyName("seasonType")]
        public SeasonType SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [JsonPropertyName("season")]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [JsonPropertyName("week")]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [JsonPropertyName("endDate")]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets FirstGameStart
        /// </summary>
        [JsonPropertyName("firstGameStart")]
        [Obsolete]
        public DateTime FirstGameStart { get; set; }

        /// <summary>
        /// Gets or Sets LastGameStart
        /// </summary>
        [JsonPropertyName("lastGameStart")]
        [Obsolete]
        public DateTime LastGameStart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CalendarWeek {\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FirstGameStart: ").Append(FirstGameStart).Append("\n");
            sb.Append("  LastGameStart: ").Append(LastGameStart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CalendarWeek" />
    /// </summary>
    public class CalendarWeekJsonConverter : JsonConverter<CalendarWeek>
    {
        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize FirstGameStart
        /// </summary>
        public static string FirstGameStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastGameStart
        /// </summary>
        public static string LastGameStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CalendarWeek" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CalendarWeek Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> season = default;
            Option<int?> week = default;
            Option<SeasonType?> seasonType = default;
            Option<DateTime?> startDate = default;
            Option<DateTime?> endDate = default;
            Option<DateTime?> firstGameStart = default;
            Option<DateTime?> lastGameStart = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "season":
                            season = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "week":
                            week = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "seasonType":
                            string? seasonTypeRawValue = utf8JsonReader.GetString();
                            if (seasonTypeRawValue != null)
                                seasonType = new Option<SeasonType?>(SeasonTypeValueConverter.FromStringOrDefault(seasonTypeRawValue));
                            break;
                        case "startDate":
                            startDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "firstGameStart":
                            firstGameStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastGameStart":
                            lastGameStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!season.IsSet)
                throw new ArgumentException("Property is required for class CalendarWeek.", nameof(season));

            if (!week.IsSet)
                throw new ArgumentException("Property is required for class CalendarWeek.", nameof(week));

            if (!seasonType.IsSet)
                throw new ArgumentException("Property is required for class CalendarWeek.", nameof(seasonType));

            if (!startDate.IsSet)
                throw new ArgumentException("Property is required for class CalendarWeek.", nameof(startDate));

            if (!endDate.IsSet)
                throw new ArgumentException("Property is required for class CalendarWeek.", nameof(endDate));

            if (!firstGameStart.IsSet)
                throw new ArgumentException("Property is required for class CalendarWeek.", nameof(firstGameStart));

            if (!lastGameStart.IsSet)
                throw new ArgumentException("Property is required for class CalendarWeek.", nameof(lastGameStart));

            if (season.IsSet && season.Value == null)
                throw new ArgumentNullException(nameof(season), "Property is not nullable for class CalendarWeek.");

            if (week.IsSet && week.Value == null)
                throw new ArgumentNullException(nameof(week), "Property is not nullable for class CalendarWeek.");

            if (seasonType.IsSet && seasonType.Value == null)
                throw new ArgumentNullException(nameof(seasonType), "Property is not nullable for class CalendarWeek.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class CalendarWeek.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class CalendarWeek.");

            if (firstGameStart.IsSet && firstGameStart.Value == null)
                throw new ArgumentNullException(nameof(firstGameStart), "Property is not nullable for class CalendarWeek.");

            if (lastGameStart.IsSet && lastGameStart.Value == null)
                throw new ArgumentNullException(nameof(lastGameStart), "Property is not nullable for class CalendarWeek.");

            return new CalendarWeek(season.Value!.Value!, week.Value!.Value!, seasonType.Value!.Value!, startDate.Value!.Value!, endDate.Value!.Value!, firstGameStart.Value!.Value!, lastGameStart.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CalendarWeek" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="calendarWeek"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CalendarWeek calendarWeek, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, calendarWeek, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CalendarWeek" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="calendarWeek"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CalendarWeek calendarWeek, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("season", calendarWeek.Season);

            writer.WriteNumber("week", calendarWeek.Week);

            var seasonTypeRawValue = SeasonTypeValueConverter.ToJsonValue(calendarWeek.SeasonType);
            writer.WriteString("seasonType", seasonTypeRawValue);

            writer.WriteString("startDate", calendarWeek.StartDate.ToString(StartDateFormat));

            writer.WriteString("endDate", calendarWeek.EndDate.ToString(EndDateFormat));

            writer.WriteString("firstGameStart", calendarWeek.FirstGameStart.ToString(FirstGameStartFormat));

            writer.WriteString("lastGameStart", calendarWeek.LastGameStart.ToString(LastGameStartFormat));
        }
    }
}
