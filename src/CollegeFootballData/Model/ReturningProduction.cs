// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.8
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// ReturningProduction
    /// </summary>
    public partial class ReturningProduction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturningProduction" /> class.
        /// </summary>
        /// <param name="season">season</param>
        /// <param name="team">team</param>
        /// <param name="conference">conference</param>
        /// <param name="totalPPA">totalPPA</param>
        /// <param name="totalPassingPPA">totalPassingPPA</param>
        /// <param name="totalReceivingPPA">totalReceivingPPA</param>
        /// <param name="totalRushingPPA">totalRushingPPA</param>
        /// <param name="percentPPA">percentPPA</param>
        /// <param name="percentPassingPPA">percentPassingPPA</param>
        /// <param name="percentReceivingPPA">percentReceivingPPA</param>
        /// <param name="percentRushingPPA">percentRushingPPA</param>
        /// <param name="usage">usage</param>
        /// <param name="passingUsage">passingUsage</param>
        /// <param name="receivingUsage">receivingUsage</param>
        /// <param name="rushingUsage">rushingUsage</param>
        [JsonConstructor]
        public ReturningProduction(int season, string team, string conference, double totalPPA, double totalPassingPPA, double totalReceivingPPA, double totalRushingPPA, double percentPPA, double percentPassingPPA, double percentReceivingPPA, double percentRushingPPA, double usage, double passingUsage, double receivingUsage, double rushingUsage)
        {
            Season = season;
            Team = team;
            Conference = conference;
            TotalPPA = totalPPA;
            TotalPassingPPA = totalPassingPPA;
            TotalReceivingPPA = totalReceivingPPA;
            TotalRushingPPA = totalRushingPPA;
            PercentPPA = percentPPA;
            PercentPassingPPA = percentPassingPPA;
            PercentReceivingPPA = percentReceivingPPA;
            PercentRushingPPA = percentRushingPPA;
            Usage = usage;
            PassingUsage = passingUsage;
            ReceivingUsage = receivingUsage;
            RushingUsage = rushingUsage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [JsonPropertyName("season")]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [JsonPropertyName("team")]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [JsonPropertyName("conference")]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets TotalPPA
        /// </summary>
        [JsonPropertyName("totalPPA")]
        public double TotalPPA { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassingPPA
        /// </summary>
        [JsonPropertyName("totalPassingPPA")]
        public double TotalPassingPPA { get; set; }

        /// <summary>
        /// Gets or Sets TotalReceivingPPA
        /// </summary>
        [JsonPropertyName("totalReceivingPPA")]
        public double TotalReceivingPPA { get; set; }

        /// <summary>
        /// Gets or Sets TotalRushingPPA
        /// </summary>
        [JsonPropertyName("totalRushingPPA")]
        public double TotalRushingPPA { get; set; }

        /// <summary>
        /// Gets or Sets PercentPPA
        /// </summary>
        [JsonPropertyName("percentPPA")]
        public double PercentPPA { get; set; }

        /// <summary>
        /// Gets or Sets PercentPassingPPA
        /// </summary>
        [JsonPropertyName("percentPassingPPA")]
        public double PercentPassingPPA { get; set; }

        /// <summary>
        /// Gets or Sets PercentReceivingPPA
        /// </summary>
        [JsonPropertyName("percentReceivingPPA")]
        public double PercentReceivingPPA { get; set; }

        /// <summary>
        /// Gets or Sets PercentRushingPPA
        /// </summary>
        [JsonPropertyName("percentRushingPPA")]
        public double PercentRushingPPA { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [JsonPropertyName("usage")]
        public double Usage { get; set; }

        /// <summary>
        /// Gets or Sets PassingUsage
        /// </summary>
        [JsonPropertyName("passingUsage")]
        public double PassingUsage { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingUsage
        /// </summary>
        [JsonPropertyName("receivingUsage")]
        public double ReceivingUsage { get; set; }

        /// <summary>
        /// Gets or Sets RushingUsage
        /// </summary>
        [JsonPropertyName("rushingUsage")]
        public double RushingUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturningProduction {\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  TotalPPA: ").Append(TotalPPA).Append("\n");
            sb.Append("  TotalPassingPPA: ").Append(TotalPassingPPA).Append("\n");
            sb.Append("  TotalReceivingPPA: ").Append(TotalReceivingPPA).Append("\n");
            sb.Append("  TotalRushingPPA: ").Append(TotalRushingPPA).Append("\n");
            sb.Append("  PercentPPA: ").Append(PercentPPA).Append("\n");
            sb.Append("  PercentPassingPPA: ").Append(PercentPassingPPA).Append("\n");
            sb.Append("  PercentReceivingPPA: ").Append(PercentReceivingPPA).Append("\n");
            sb.Append("  PercentRushingPPA: ").Append(PercentRushingPPA).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  PassingUsage: ").Append(PassingUsage).Append("\n");
            sb.Append("  ReceivingUsage: ").Append(ReceivingUsage).Append("\n");
            sb.Append("  RushingUsage: ").Append(RushingUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReturningProduction" />
    /// </summary>
    public class ReturningProductionJsonConverter : JsonConverter<ReturningProduction>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReturningProduction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReturningProduction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> season = default;
            Option<string?> team = default;
            Option<string?> conference = default;
            Option<double?> totalPPA = default;
            Option<double?> totalPassingPPA = default;
            Option<double?> totalReceivingPPA = default;
            Option<double?> totalRushingPPA = default;
            Option<double?> percentPPA = default;
            Option<double?> percentPassingPPA = default;
            Option<double?> percentReceivingPPA = default;
            Option<double?> percentRushingPPA = default;
            Option<double?> usage = default;
            Option<double?> passingUsage = default;
            Option<double?> receivingUsage = default;
            Option<double?> rushingUsage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "season":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                season = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "team":
                            team = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "conference":
                            conference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "totalPPA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPPA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "totalPassingPPA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPassingPPA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "totalReceivingPPA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalReceivingPPA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "totalRushingPPA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalRushingPPA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "percentPPA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                percentPPA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "percentPassingPPA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                percentPassingPPA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "percentReceivingPPA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                percentReceivingPPA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "percentRushingPPA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                percentRushingPPA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "usage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                usage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "passingUsage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passingUsage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "receivingUsage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                receivingUsage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "rushingUsage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rushingUsage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!season.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(season));

            if (!team.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(team));

            if (!conference.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(conference));

            if (!totalPPA.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(totalPPA));

            if (!totalPassingPPA.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(totalPassingPPA));

            if (!totalReceivingPPA.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(totalReceivingPPA));

            if (!totalRushingPPA.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(totalRushingPPA));

            if (!percentPPA.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(percentPPA));

            if (!percentPassingPPA.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(percentPassingPPA));

            if (!percentReceivingPPA.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(percentReceivingPPA));

            if (!percentRushingPPA.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(percentRushingPPA));

            if (!usage.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(usage));

            if (!passingUsage.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(passingUsage));

            if (!receivingUsage.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(receivingUsage));

            if (!rushingUsage.IsSet)
                throw new ArgumentException("Property is required for class ReturningProduction.", nameof(rushingUsage));

            if (season.IsSet && season.Value == null)
                throw new ArgumentNullException(nameof(season), "Property is not nullable for class ReturningProduction.");

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team), "Property is not nullable for class ReturningProduction.");

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference), "Property is not nullable for class ReturningProduction.");

            if (totalPPA.IsSet && totalPPA.Value == null)
                throw new ArgumentNullException(nameof(totalPPA), "Property is not nullable for class ReturningProduction.");

            if (totalPassingPPA.IsSet && totalPassingPPA.Value == null)
                throw new ArgumentNullException(nameof(totalPassingPPA), "Property is not nullable for class ReturningProduction.");

            if (totalReceivingPPA.IsSet && totalReceivingPPA.Value == null)
                throw new ArgumentNullException(nameof(totalReceivingPPA), "Property is not nullable for class ReturningProduction.");

            if (totalRushingPPA.IsSet && totalRushingPPA.Value == null)
                throw new ArgumentNullException(nameof(totalRushingPPA), "Property is not nullable for class ReturningProduction.");

            if (percentPPA.IsSet && percentPPA.Value == null)
                throw new ArgumentNullException(nameof(percentPPA), "Property is not nullable for class ReturningProduction.");

            if (percentPassingPPA.IsSet && percentPassingPPA.Value == null)
                throw new ArgumentNullException(nameof(percentPassingPPA), "Property is not nullable for class ReturningProduction.");

            if (percentReceivingPPA.IsSet && percentReceivingPPA.Value == null)
                throw new ArgumentNullException(nameof(percentReceivingPPA), "Property is not nullable for class ReturningProduction.");

            if (percentRushingPPA.IsSet && percentRushingPPA.Value == null)
                throw new ArgumentNullException(nameof(percentRushingPPA), "Property is not nullable for class ReturningProduction.");

            if (usage.IsSet && usage.Value == null)
                throw new ArgumentNullException(nameof(usage), "Property is not nullable for class ReturningProduction.");

            if (passingUsage.IsSet && passingUsage.Value == null)
                throw new ArgumentNullException(nameof(passingUsage), "Property is not nullable for class ReturningProduction.");

            if (receivingUsage.IsSet && receivingUsage.Value == null)
                throw new ArgumentNullException(nameof(receivingUsage), "Property is not nullable for class ReturningProduction.");

            if (rushingUsage.IsSet && rushingUsage.Value == null)
                throw new ArgumentNullException(nameof(rushingUsage), "Property is not nullable for class ReturningProduction.");

            return new ReturningProduction(season.Value!.Value!, team.Value!, conference.Value!, totalPPA.Value!.Value!, totalPassingPPA.Value!.Value!, totalReceivingPPA.Value!.Value!, totalRushingPPA.Value!.Value!, percentPPA.Value!.Value!, percentPassingPPA.Value!.Value!, percentReceivingPPA.Value!.Value!, percentRushingPPA.Value!.Value!, usage.Value!.Value!, passingUsage.Value!.Value!, receivingUsage.Value!.Value!, rushingUsage.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ReturningProduction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="returningProduction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReturningProduction returningProduction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, returningProduction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReturningProduction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="returningProduction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReturningProduction returningProduction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (returningProduction.Team == null)
                throw new ArgumentNullException(nameof(returningProduction.Team), "Property is required for class ReturningProduction.");

            if (returningProduction.Conference == null)
                throw new ArgumentNullException(nameof(returningProduction.Conference), "Property is required for class ReturningProduction.");

            writer.WriteNumber("season", returningProduction.Season);

            writer.WriteString("team", returningProduction.Team);

            writer.WriteString("conference", returningProduction.Conference);

            writer.WriteNumber("totalPPA", returningProduction.TotalPPA);

            writer.WriteNumber("totalPassingPPA", returningProduction.TotalPassingPPA);

            writer.WriteNumber("totalReceivingPPA", returningProduction.TotalReceivingPPA);

            writer.WriteNumber("totalRushingPPA", returningProduction.TotalRushingPPA);

            writer.WriteNumber("percentPPA", returningProduction.PercentPPA);

            writer.WriteNumber("percentPassingPPA", returningProduction.PercentPassingPPA);

            writer.WriteNumber("percentReceivingPPA", returningProduction.PercentReceivingPPA);

            writer.WriteNumber("percentRushingPPA", returningProduction.PercentRushingPPA);

            writer.WriteNumber("usage", returningProduction.Usage);

            writer.WriteNumber("passingUsage", returningProduction.PassingUsage);

            writer.WriteNumber("receivingUsage", returningProduction.ReceivingUsage);

            writer.WriteNumber("rushingUsage", returningProduction.RushingUsage);
        }
    }
}
