/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.3
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// LiveGame
    /// </summary>
    [DataContract(Name = "LiveGame")]
    public partial class LiveGame : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveGame" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LiveGame() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveGame" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="period">period (required).</param>
        /// <param name="clock">clock (required).</param>
        /// <param name="possession">possession (required).</param>
        /// <param name="down">down (required).</param>
        /// <param name="distance">distance (required).</param>
        /// <param name="yardsToGoal">yardsToGoal (required).</param>
        /// <param name="teams">teams (required).</param>
        /// <param name="drives">drives (required).</param>
        public LiveGame(int id = default(int), string status = default(string), int? period = default(int?), string clock = default(string), string possession = default(string), int? down = default(int?), int? distance = default(int?), int? yardsToGoal = default(int?), List<LiveGameTeam> teams = default(List<LiveGameTeam>), List<LiveGameDrive> drives = default(List<LiveGameDrive>))
        {
            this.Id = id;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for LiveGame and cannot be null");
            }
            this.Status = status;
            // to ensure "period" is required (not null)
            if (period == null)
            {
                throw new ArgumentNullException("period is a required property for LiveGame and cannot be null");
            }
            this.Period = period;
            // to ensure "clock" is required (not null)
            if (clock == null)
            {
                throw new ArgumentNullException("clock is a required property for LiveGame and cannot be null");
            }
            this.Clock = clock;
            // to ensure "possession" is required (not null)
            if (possession == null)
            {
                throw new ArgumentNullException("possession is a required property for LiveGame and cannot be null");
            }
            this.Possession = possession;
            // to ensure "down" is required (not null)
            if (down == null)
            {
                throw new ArgumentNullException("down is a required property for LiveGame and cannot be null");
            }
            this.Down = down;
            // to ensure "distance" is required (not null)
            if (distance == null)
            {
                throw new ArgumentNullException("distance is a required property for LiveGame and cannot be null");
            }
            this.Distance = distance;
            // to ensure "yardsToGoal" is required (not null)
            if (yardsToGoal == null)
            {
                throw new ArgumentNullException("yardsToGoal is a required property for LiveGame and cannot be null");
            }
            this.YardsToGoal = yardsToGoal;
            // to ensure "teams" is required (not null)
            if (teams == null)
            {
                throw new ArgumentNullException("teams is a required property for LiveGame and cannot be null");
            }
            this.Teams = teams;
            // to ensure "drives" is required (not null)
            if (drives == null)
            {
                throw new ArgumentNullException("drives is a required property for LiveGame and cannot be null");
            }
            this.Drives = drives;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = true)]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name = "clock", IsRequired = true, EmitDefaultValue = true)]
        public string Clock { get; set; }

        /// <summary>
        /// Gets or Sets Possession
        /// </summary>
        [DataMember(Name = "possession", IsRequired = true, EmitDefaultValue = true)]
        public string Possession { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [DataMember(Name = "down", IsRequired = true, EmitDefaultValue = true)]
        public int? Down { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public int? Distance { get; set; }

        /// <summary>
        /// Gets or Sets YardsToGoal
        /// </summary>
        [DataMember(Name = "yardsToGoal", IsRequired = true, EmitDefaultValue = true)]
        public int? YardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name = "teams", IsRequired = true, EmitDefaultValue = true)]
        public List<LiveGameTeam> Teams { get; set; }

        /// <summary>
        /// Gets or Sets Drives
        /// </summary>
        [DataMember(Name = "drives", IsRequired = true, EmitDefaultValue = true)]
        public List<LiveGameDrive> Drives { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveGame {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  Possession: ").Append(Possession).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  YardsToGoal: ").Append(YardsToGoal).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  Drives: ").Append(Drives).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
