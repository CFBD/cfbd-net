// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.15
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// LiveGame
    /// </summary>
    public partial class LiveGame : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveGame" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="status">status</param>
        /// <param name="clock">clock</param>
        /// <param name="possession">possession</param>
        /// <param name="teams">teams</param>
        /// <param name="drives">drives</param>
        /// <param name="period">period</param>
        /// <param name="down">down</param>
        /// <param name="distance">distance</param>
        /// <param name="yardsToGoal">yardsToGoal</param>
        [JsonConstructor]
        public LiveGame(int id, string status, string clock, string possession, List<LiveGameTeam> teams, List<LiveGameDrive> drives, int? period = default, int? down = default, int? distance = default, int? yardsToGoal = default)
        {
            Id = id;
            Status = status;
            Clock = clock;
            Possession = possession;
            Teams = teams;
            Drives = drives;
            Period = period;
            Down = down;
            Distance = distance;
            YardsToGoal = yardsToGoal;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [JsonPropertyName("clock")]
        public string Clock { get; set; }

        /// <summary>
        /// Gets or Sets Possession
        /// </summary>
        [JsonPropertyName("possession")]
        public string Possession { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [JsonPropertyName("teams")]
        public List<LiveGameTeam> Teams { get; set; }

        /// <summary>
        /// Gets or Sets Drives
        /// </summary>
        [JsonPropertyName("drives")]
        public List<LiveGameDrive> Drives { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [JsonPropertyName("period")]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [JsonPropertyName("down")]
        public int? Down { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [JsonPropertyName("distance")]
        public int? Distance { get; set; }

        /// <summary>
        /// Gets or Sets YardsToGoal
        /// </summary>
        [JsonPropertyName("yardsToGoal")]
        public int? YardsToGoal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveGame {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  Possession: ").Append(Possession).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  Drives: ").Append(Drives).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  YardsToGoal: ").Append(YardsToGoal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LiveGame" />
    /// </summary>
    public class LiveGameJsonConverter : JsonConverter<LiveGame>
    {
        /// <summary>
        /// Deserializes json to <see cref="LiveGame" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LiveGame Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> status = default;
            Option<string?> clock = default;
            Option<string?> possession = default;
            Option<List<LiveGameTeam>?> teams = default;
            Option<List<LiveGameDrive>?> drives = default;
            Option<int?> period = default;
            Option<int?> down = default;
            Option<int?> distance = default;
            Option<int?> yardsToGoal = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "clock":
                            clock = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "possession":
                            possession = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "teams":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                teams = new Option<List<LiveGameTeam>?>(JsonSerializer.Deserialize<List<LiveGameTeam>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "drives":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                drives = new Option<List<LiveGameDrive>?>(JsonSerializer.Deserialize<List<LiveGameDrive>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "period":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                period = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "down":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                down = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "distance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                distance = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "yardsToGoal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                yardsToGoal = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(id));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(status));

            if (!clock.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(clock));

            if (!possession.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(possession));

            if (!teams.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(teams));

            if (!drives.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(drives));

            if (!period.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(period));

            if (!down.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(down));

            if (!distance.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(distance));

            if (!yardsToGoal.IsSet)
                throw new ArgumentException("Property is required for class LiveGame.", nameof(yardsToGoal));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class LiveGame.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class LiveGame.");

            if (clock.IsSet && clock.Value == null)
                throw new ArgumentNullException(nameof(clock), "Property is not nullable for class LiveGame.");

            if (possession.IsSet && possession.Value == null)
                throw new ArgumentNullException(nameof(possession), "Property is not nullable for class LiveGame.");

            if (teams.IsSet && teams.Value == null)
                throw new ArgumentNullException(nameof(teams), "Property is not nullable for class LiveGame.");

            if (drives.IsSet && drives.Value == null)
                throw new ArgumentNullException(nameof(drives), "Property is not nullable for class LiveGame.");

            return new LiveGame(id.Value!.Value!, status.Value!, clock.Value!, possession.Value!, teams.Value!, drives.Value!, period.Value!, down.Value!, distance.Value!, yardsToGoal.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LiveGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="liveGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LiveGame liveGame, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, liveGame, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LiveGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="liveGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LiveGame liveGame, JsonSerializerOptions jsonSerializerOptions)
        {
            if (liveGame.Status == null)
                throw new ArgumentNullException(nameof(liveGame.Status), "Property is required for class LiveGame.");

            if (liveGame.Clock == null)
                throw new ArgumentNullException(nameof(liveGame.Clock), "Property is required for class LiveGame.");

            if (liveGame.Possession == null)
                throw new ArgumentNullException(nameof(liveGame.Possession), "Property is required for class LiveGame.");

            if (liveGame.Teams == null)
                throw new ArgumentNullException(nameof(liveGame.Teams), "Property is required for class LiveGame.");

            if (liveGame.Drives == null)
                throw new ArgumentNullException(nameof(liveGame.Drives), "Property is required for class LiveGame.");

            writer.WriteNumber("id", liveGame.Id);

            writer.WriteString("status", liveGame.Status);

            writer.WriteString("clock", liveGame.Clock);

            writer.WriteString("possession", liveGame.Possession);

            writer.WritePropertyName("teams");
            JsonSerializer.Serialize(writer, liveGame.Teams, jsonSerializerOptions);
            writer.WritePropertyName("drives");
            JsonSerializer.Serialize(writer, liveGame.Drives, jsonSerializerOptions);
            if (liveGame.Period != null)
                writer.WriteNumber("period", liveGame.Period.Value);
            else
                writer.WriteNull("period");

            if (liveGame.Down != null)
                writer.WriteNumber("down", liveGame.Down.Value);
            else
                writer.WriteNull("down");

            if (liveGame.Distance != null)
                writer.WriteNumber("distance", liveGame.Distance.Value);
            else
                writer.WriteNull("distance");

            if (liveGame.YardsToGoal != null)
                writer.WriteNumber("yardsToGoal", liveGame.YardsToGoal.Value);
            else
                writer.WriteNull("yardsToGoal");
        }
    }
}
