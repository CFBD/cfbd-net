// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.7
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// AdjustedTeamMetrics
    /// </summary>
    public partial class AdjustedTeamMetrics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdjustedTeamMetrics" /> class.
        /// </summary>
        /// <param name="year">year</param>
        /// <param name="teamId">teamId</param>
        /// <param name="team">team</param>
        /// <param name="conference">conference</param>
        /// <param name="epa">epa</param>
        /// <param name="epaAllowed">epaAllowed</param>
        /// <param name="successRate">successRate</param>
        /// <param name="successRateAllowed">successRateAllowed</param>
        /// <param name="rushing">rushing</param>
        /// <param name="rushingAllowed">rushingAllowed</param>
        /// <param name="explosiveness">explosiveness</param>
        /// <param name="explosivenessAllowed">explosivenessAllowed</param>
        [JsonConstructor]
        public AdjustedTeamMetrics(int year, int teamId, string team, string conference, AdjustedTeamMetricsEpa epa, AdjustedTeamMetricsEpa epaAllowed, AdjustedTeamMetricsSuccessRate successRate, AdjustedTeamMetricsSuccessRate successRateAllowed, AdjustedTeamMetricsRushing rushing, AdjustedTeamMetricsRushing rushingAllowed, double explosiveness, double explosivenessAllowed)
        {
            Year = year;
            TeamId = teamId;
            Team = team;
            Conference = conference;
            Epa = epa;
            EpaAllowed = epaAllowed;
            SuccessRate = successRate;
            SuccessRateAllowed = successRateAllowed;
            Rushing = rushing;
            RushingAllowed = rushingAllowed;
            Explosiveness = explosiveness;
            ExplosivenessAllowed = explosivenessAllowed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [JsonPropertyName("year")]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [JsonPropertyName("teamId")]
        public int TeamId { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [JsonPropertyName("team")]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [JsonPropertyName("conference")]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets Epa
        /// </summary>
        [JsonPropertyName("epa")]
        public AdjustedTeamMetricsEpa Epa { get; set; }

        /// <summary>
        /// Gets or Sets EpaAllowed
        /// </summary>
        [JsonPropertyName("epaAllowed")]
        public AdjustedTeamMetricsEpa EpaAllowed { get; set; }

        /// <summary>
        /// Gets or Sets SuccessRate
        /// </summary>
        [JsonPropertyName("successRate")]
        public AdjustedTeamMetricsSuccessRate SuccessRate { get; set; }

        /// <summary>
        /// Gets or Sets SuccessRateAllowed
        /// </summary>
        [JsonPropertyName("successRateAllowed")]
        public AdjustedTeamMetricsSuccessRate SuccessRateAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Rushing
        /// </summary>
        [JsonPropertyName("rushing")]
        public AdjustedTeamMetricsRushing Rushing { get; set; }

        /// <summary>
        /// Gets or Sets RushingAllowed
        /// </summary>
        [JsonPropertyName("rushingAllowed")]
        public AdjustedTeamMetricsRushing RushingAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Explosiveness
        /// </summary>
        [JsonPropertyName("explosiveness")]
        public double Explosiveness { get; set; }

        /// <summary>
        /// Gets or Sets ExplosivenessAllowed
        /// </summary>
        [JsonPropertyName("explosivenessAllowed")]
        public double ExplosivenessAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdjustedTeamMetrics {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Epa: ").Append(Epa).Append("\n");
            sb.Append("  EpaAllowed: ").Append(EpaAllowed).Append("\n");
            sb.Append("  SuccessRate: ").Append(SuccessRate).Append("\n");
            sb.Append("  SuccessRateAllowed: ").Append(SuccessRateAllowed).Append("\n");
            sb.Append("  Rushing: ").Append(Rushing).Append("\n");
            sb.Append("  RushingAllowed: ").Append(RushingAllowed).Append("\n");
            sb.Append("  Explosiveness: ").Append(Explosiveness).Append("\n");
            sb.Append("  ExplosivenessAllowed: ").Append(ExplosivenessAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdjustedTeamMetrics" />
    /// </summary>
    public class AdjustedTeamMetricsJsonConverter : JsonConverter<AdjustedTeamMetrics>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdjustedTeamMetrics" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdjustedTeamMetrics Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> year = default;
            Option<int?> teamId = default;
            Option<string?> team = default;
            Option<string?> conference = default;
            Option<AdjustedTeamMetricsEpa?> epa = default;
            Option<AdjustedTeamMetricsEpa?> epaAllowed = default;
            Option<AdjustedTeamMetricsSuccessRate?> successRate = default;
            Option<AdjustedTeamMetricsSuccessRate?> successRateAllowed = default;
            Option<AdjustedTeamMetricsRushing?> rushing = default;
            Option<AdjustedTeamMetricsRushing?> rushingAllowed = default;
            Option<double?> explosiveness = default;
            Option<double?> explosivenessAllowed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "year":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                year = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "teamId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                teamId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "team":
                            team = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "conference":
                            conference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "epa":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                epa = new Option<AdjustedTeamMetricsEpa?>(JsonSerializer.Deserialize<AdjustedTeamMetricsEpa>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "epaAllowed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                epaAllowed = new Option<AdjustedTeamMetricsEpa?>(JsonSerializer.Deserialize<AdjustedTeamMetricsEpa>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "successRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                successRate = new Option<AdjustedTeamMetricsSuccessRate?>(JsonSerializer.Deserialize<AdjustedTeamMetricsSuccessRate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "successRateAllowed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                successRateAllowed = new Option<AdjustedTeamMetricsSuccessRate?>(JsonSerializer.Deserialize<AdjustedTeamMetricsSuccessRate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rushing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rushing = new Option<AdjustedTeamMetricsRushing?>(JsonSerializer.Deserialize<AdjustedTeamMetricsRushing>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rushingAllowed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rushingAllowed = new Option<AdjustedTeamMetricsRushing?>(JsonSerializer.Deserialize<AdjustedTeamMetricsRushing>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "explosiveness":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                explosiveness = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "explosivenessAllowed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                explosivenessAllowed = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!year.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(year));

            if (!teamId.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(teamId));

            if (!team.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(team));

            if (!conference.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(conference));

            if (!epa.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(epa));

            if (!epaAllowed.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(epaAllowed));

            if (!successRate.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(successRate));

            if (!successRateAllowed.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(successRateAllowed));

            if (!rushing.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(rushing));

            if (!rushingAllowed.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(rushingAllowed));

            if (!explosiveness.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(explosiveness));

            if (!explosivenessAllowed.IsSet)
                throw new ArgumentException("Property is required for class AdjustedTeamMetrics.", nameof(explosivenessAllowed));

            if (year.IsSet && year.Value == null)
                throw new ArgumentNullException(nameof(year), "Property is not nullable for class AdjustedTeamMetrics.");

            if (teamId.IsSet && teamId.Value == null)
                throw new ArgumentNullException(nameof(teamId), "Property is not nullable for class AdjustedTeamMetrics.");

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team), "Property is not nullable for class AdjustedTeamMetrics.");

            if (conference.IsSet && conference.Value == null)
                throw new ArgumentNullException(nameof(conference), "Property is not nullable for class AdjustedTeamMetrics.");

            if (epa.IsSet && epa.Value == null)
                throw new ArgumentNullException(nameof(epa), "Property is not nullable for class AdjustedTeamMetrics.");

            if (epaAllowed.IsSet && epaAllowed.Value == null)
                throw new ArgumentNullException(nameof(epaAllowed), "Property is not nullable for class AdjustedTeamMetrics.");

            if (successRate.IsSet && successRate.Value == null)
                throw new ArgumentNullException(nameof(successRate), "Property is not nullable for class AdjustedTeamMetrics.");

            if (successRateAllowed.IsSet && successRateAllowed.Value == null)
                throw new ArgumentNullException(nameof(successRateAllowed), "Property is not nullable for class AdjustedTeamMetrics.");

            if (rushing.IsSet && rushing.Value == null)
                throw new ArgumentNullException(nameof(rushing), "Property is not nullable for class AdjustedTeamMetrics.");

            if (rushingAllowed.IsSet && rushingAllowed.Value == null)
                throw new ArgumentNullException(nameof(rushingAllowed), "Property is not nullable for class AdjustedTeamMetrics.");

            if (explosiveness.IsSet && explosiveness.Value == null)
                throw new ArgumentNullException(nameof(explosiveness), "Property is not nullable for class AdjustedTeamMetrics.");

            if (explosivenessAllowed.IsSet && explosivenessAllowed.Value == null)
                throw new ArgumentNullException(nameof(explosivenessAllowed), "Property is not nullable for class AdjustedTeamMetrics.");

            return new AdjustedTeamMetrics(year.Value!.Value!, teamId.Value!.Value!, team.Value!, conference.Value!, epa.Value!, epaAllowed.Value!, successRate.Value!, successRateAllowed.Value!, rushing.Value!, rushingAllowed.Value!, explosiveness.Value!.Value!, explosivenessAllowed.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AdjustedTeamMetrics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adjustedTeamMetrics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdjustedTeamMetrics adjustedTeamMetrics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adjustedTeamMetrics, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdjustedTeamMetrics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adjustedTeamMetrics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdjustedTeamMetrics adjustedTeamMetrics, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adjustedTeamMetrics.Team == null)
                throw new ArgumentNullException(nameof(adjustedTeamMetrics.Team), "Property is required for class AdjustedTeamMetrics.");

            if (adjustedTeamMetrics.Conference == null)
                throw new ArgumentNullException(nameof(adjustedTeamMetrics.Conference), "Property is required for class AdjustedTeamMetrics.");

            if (adjustedTeamMetrics.Epa == null)
                throw new ArgumentNullException(nameof(adjustedTeamMetrics.Epa), "Property is required for class AdjustedTeamMetrics.");

            if (adjustedTeamMetrics.EpaAllowed == null)
                throw new ArgumentNullException(nameof(adjustedTeamMetrics.EpaAllowed), "Property is required for class AdjustedTeamMetrics.");

            if (adjustedTeamMetrics.SuccessRate == null)
                throw new ArgumentNullException(nameof(adjustedTeamMetrics.SuccessRate), "Property is required for class AdjustedTeamMetrics.");

            if (adjustedTeamMetrics.SuccessRateAllowed == null)
                throw new ArgumentNullException(nameof(adjustedTeamMetrics.SuccessRateAllowed), "Property is required for class AdjustedTeamMetrics.");

            if (adjustedTeamMetrics.Rushing == null)
                throw new ArgumentNullException(nameof(adjustedTeamMetrics.Rushing), "Property is required for class AdjustedTeamMetrics.");

            if (adjustedTeamMetrics.RushingAllowed == null)
                throw new ArgumentNullException(nameof(adjustedTeamMetrics.RushingAllowed), "Property is required for class AdjustedTeamMetrics.");

            writer.WriteNumber("year", adjustedTeamMetrics.Year);

            writer.WriteNumber("teamId", adjustedTeamMetrics.TeamId);

            writer.WriteString("team", adjustedTeamMetrics.Team);

            writer.WriteString("conference", adjustedTeamMetrics.Conference);

            writer.WritePropertyName("epa");
            JsonSerializer.Serialize(writer, adjustedTeamMetrics.Epa, jsonSerializerOptions);
            writer.WritePropertyName("epaAllowed");
            JsonSerializer.Serialize(writer, adjustedTeamMetrics.EpaAllowed, jsonSerializerOptions);
            writer.WritePropertyName("successRate");
            JsonSerializer.Serialize(writer, adjustedTeamMetrics.SuccessRate, jsonSerializerOptions);
            writer.WritePropertyName("successRateAllowed");
            JsonSerializer.Serialize(writer, adjustedTeamMetrics.SuccessRateAllowed, jsonSerializerOptions);
            writer.WritePropertyName("rushing");
            JsonSerializer.Serialize(writer, adjustedTeamMetrics.Rushing, jsonSerializerOptions);
            writer.WritePropertyName("rushingAllowed");
            JsonSerializer.Serialize(writer, adjustedTeamMetrics.RushingAllowed, jsonSerializerOptions);
            writer.WriteNumber("explosiveness", adjustedTeamMetrics.Explosiveness);

            writer.WriteNumber("explosivenessAllowed", adjustedTeamMetrics.ExplosivenessAllowed);
        }
    }
}
