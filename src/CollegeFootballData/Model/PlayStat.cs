/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.3
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayStat
    /// </summary>
    [DataContract(Name = "PlayStat")]
    public partial class PlayStat : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayStat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayStat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayStat" /> class.
        /// </summary>
        /// <param name="gameId">gameId (required).</param>
        /// <param name="season">season (required).</param>
        /// <param name="week">week (required).</param>
        /// <param name="team">team (required).</param>
        /// <param name="conference">conference (required).</param>
        /// <param name="opponent">opponent (required).</param>
        /// <param name="teamScore">teamScore (required).</param>
        /// <param name="opponentScore">opponentScore (required).</param>
        /// <param name="driveId">driveId (required).</param>
        /// <param name="playId">playId (required).</param>
        /// <param name="period">period (required).</param>
        /// <param name="clock">clock (required).</param>
        /// <param name="yardsToGoal">yardsToGoal (required).</param>
        /// <param name="down">down (required).</param>
        /// <param name="distance">distance (required).</param>
        /// <param name="athleteId">athleteId (required).</param>
        /// <param name="athleteName">athleteName (required).</param>
        /// <param name="statType">statType (required).</param>
        /// <param name="stat">stat (required).</param>
        public PlayStat(double gameId = default(double), double season = default(double), double week = default(double), string team = default(string), string conference = default(string), string opponent = default(string), double teamScore = default(double), double opponentScore = default(double), string driveId = default(string), string playId = default(string), double period = default(double), PlayStatClock clock = default(PlayStatClock), double yardsToGoal = default(double), double down = default(double), double distance = default(double), string athleteId = default(string), string athleteName = default(string), string statType = default(string), double stat = default(double))
        {
            this.GameId = gameId;
            this.Season = season;
            this.Week = week;
            // to ensure "team" is required (not null)
            if (team == null)
            {
                throw new ArgumentNullException("team is a required property for PlayStat and cannot be null");
            }
            this.Team = team;
            // to ensure "conference" is required (not null)
            if (conference == null)
            {
                throw new ArgumentNullException("conference is a required property for PlayStat and cannot be null");
            }
            this.Conference = conference;
            // to ensure "opponent" is required (not null)
            if (opponent == null)
            {
                throw new ArgumentNullException("opponent is a required property for PlayStat and cannot be null");
            }
            this.Opponent = opponent;
            this.TeamScore = teamScore;
            this.OpponentScore = opponentScore;
            // to ensure "driveId" is required (not null)
            if (driveId == null)
            {
                throw new ArgumentNullException("driveId is a required property for PlayStat and cannot be null");
            }
            this.DriveId = driveId;
            // to ensure "playId" is required (not null)
            if (playId == null)
            {
                throw new ArgumentNullException("playId is a required property for PlayStat and cannot be null");
            }
            this.PlayId = playId;
            this.Period = period;
            // to ensure "clock" is required (not null)
            if (clock == null)
            {
                throw new ArgumentNullException("clock is a required property for PlayStat and cannot be null");
            }
            this.Clock = clock;
            this.YardsToGoal = yardsToGoal;
            this.Down = down;
            this.Distance = distance;
            // to ensure "athleteId" is required (not null)
            if (athleteId == null)
            {
                throw new ArgumentNullException("athleteId is a required property for PlayStat and cannot be null");
            }
            this.AthleteId = athleteId;
            // to ensure "athleteName" is required (not null)
            if (athleteName == null)
            {
                throw new ArgumentNullException("athleteName is a required property for PlayStat and cannot be null");
            }
            this.AthleteName = athleteName;
            // to ensure "statType" is required (not null)
            if (statType == null)
            {
                throw new ArgumentNullException("statType is a required property for PlayStat and cannot be null");
            }
            this.StatType = statType;
            this.Stat = stat;
        }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name = "gameId", IsRequired = true, EmitDefaultValue = true)]
        public double GameId { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name = "season", IsRequired = true, EmitDefaultValue = true)]
        public double Season { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name = "week", IsRequired = true, EmitDefaultValue = true)]
        public double Week { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", IsRequired = true, EmitDefaultValue = true)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [DataMember(Name = "conference", IsRequired = true, EmitDefaultValue = true)]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets Opponent
        /// </summary>
        [DataMember(Name = "opponent", IsRequired = true, EmitDefaultValue = true)]
        public string Opponent { get; set; }

        /// <summary>
        /// Gets or Sets TeamScore
        /// </summary>
        [DataMember(Name = "teamScore", IsRequired = true, EmitDefaultValue = true)]
        public double TeamScore { get; set; }

        /// <summary>
        /// Gets or Sets OpponentScore
        /// </summary>
        [DataMember(Name = "opponentScore", IsRequired = true, EmitDefaultValue = true)]
        public double OpponentScore { get; set; }

        /// <summary>
        /// Gets or Sets DriveId
        /// </summary>
        [DataMember(Name = "driveId", IsRequired = true, EmitDefaultValue = true)]
        public string DriveId { get; set; }

        /// <summary>
        /// Gets or Sets PlayId
        /// </summary>
        [DataMember(Name = "playId", IsRequired = true, EmitDefaultValue = true)]
        public string PlayId { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = true)]
        public double Period { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name = "clock", IsRequired = true, EmitDefaultValue = true)]
        public PlayStatClock Clock { get; set; }

        /// <summary>
        /// Gets or Sets YardsToGoal
        /// </summary>
        [DataMember(Name = "yardsToGoal", IsRequired = true, EmitDefaultValue = true)]
        public double YardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [DataMember(Name = "down", IsRequired = true, EmitDefaultValue = true)]
        public double Down { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public double Distance { get; set; }

        /// <summary>
        /// Gets or Sets AthleteId
        /// </summary>
        [DataMember(Name = "athleteId", IsRequired = true, EmitDefaultValue = true)]
        public string AthleteId { get; set; }

        /// <summary>
        /// Gets or Sets AthleteName
        /// </summary>
        [DataMember(Name = "athleteName", IsRequired = true, EmitDefaultValue = true)]
        public string AthleteName { get; set; }

        /// <summary>
        /// Gets or Sets StatType
        /// </summary>
        [DataMember(Name = "statType", IsRequired = true, EmitDefaultValue = true)]
        public string StatType { get; set; }

        /// <summary>
        /// Gets or Sets Stat
        /// </summary>
        [DataMember(Name = "stat", IsRequired = true, EmitDefaultValue = true)]
        public double Stat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayStat {\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Opponent: ").Append(Opponent).Append("\n");
            sb.Append("  TeamScore: ").Append(TeamScore).Append("\n");
            sb.Append("  OpponentScore: ").Append(OpponentScore).Append("\n");
            sb.Append("  DriveId: ").Append(DriveId).Append("\n");
            sb.Append("  PlayId: ").Append(PlayId).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  YardsToGoal: ").Append(YardsToGoal).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  AthleteId: ").Append(AthleteId).Append("\n");
            sb.Append("  AthleteName: ").Append(AthleteName).Append("\n");
            sb.Append("  StatType: ").Append(StatType).Append("\n");
            sb.Append("  Stat: ").Append(Stat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
