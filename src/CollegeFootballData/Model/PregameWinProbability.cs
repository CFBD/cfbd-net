// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.17
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PregameWinProbability
    /// </summary>
    public partial class PregameWinProbability : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PregameWinProbability" /> class.
        /// </summary>
        /// <param name="season">season</param>
        /// <param name="seasonType">seasonType</param>
        /// <param name="week">week</param>
        /// <param name="gameId">gameId</param>
        /// <param name="homeTeam">homeTeam</param>
        /// <param name="awayTeam">awayTeam</param>
        /// <param name="spread">spread</param>
        /// <param name="homeWinProbability">homeWinProbability</param>
        [JsonConstructor]
        public PregameWinProbability(int season, SeasonType seasonType, int week, int gameId, string homeTeam, string awayTeam, double spread, double homeWinProbability)
        {
            Season = season;
            SeasonType = seasonType;
            Week = week;
            GameId = gameId;
            HomeTeam = homeTeam;
            AwayTeam = awayTeam;
            Spread = spread;
            HomeWinProbability = homeWinProbability;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [JsonPropertyName("seasonType")]
        public SeasonType SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [JsonPropertyName("season")]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [JsonPropertyName("week")]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [JsonPropertyName("gameId")]
        public int GameId { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [JsonPropertyName("homeTeam")]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [JsonPropertyName("awayTeam")]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [JsonPropertyName("spread")]
        public double Spread { get; set; }

        /// <summary>
        /// Gets or Sets HomeWinProbability
        /// </summary>
        [JsonPropertyName("homeWinProbability")]
        public double HomeWinProbability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PregameWinProbability {\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  HomeWinProbability: ").Append(HomeWinProbability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PregameWinProbability" />
    /// </summary>
    public class PregameWinProbabilityJsonConverter : JsonConverter<PregameWinProbability>
    {
        /// <summary>
        /// Deserializes json to <see cref="PregameWinProbability" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PregameWinProbability Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> season = default;
            Option<SeasonType?> seasonType = default;
            Option<int?> week = default;
            Option<int?> gameId = default;
            Option<string?> homeTeam = default;
            Option<string?> awayTeam = default;
            Option<double?> spread = default;
            Option<double?> homeWinProbability = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "season":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                season = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "seasonType":
                            string? seasonTypeRawValue = utf8JsonReader.GetString();
                            if (seasonTypeRawValue != null)
                                seasonType = new Option<SeasonType?>(SeasonTypeValueConverter.FromStringOrDefault(seasonTypeRawValue));
                            break;
                        case "week":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                week = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "gameId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                gameId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "homeTeam":
                            homeTeam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "awayTeam":
                            awayTeam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "spread":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                spread = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "homeWinProbability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homeWinProbability = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!season.IsSet)
                throw new ArgumentException("Property is required for class PregameWinProbability.", nameof(season));

            if (!seasonType.IsSet)
                throw new ArgumentException("Property is required for class PregameWinProbability.", nameof(seasonType));

            if (!week.IsSet)
                throw new ArgumentException("Property is required for class PregameWinProbability.", nameof(week));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class PregameWinProbability.", nameof(gameId));

            if (!homeTeam.IsSet)
                throw new ArgumentException("Property is required for class PregameWinProbability.", nameof(homeTeam));

            if (!awayTeam.IsSet)
                throw new ArgumentException("Property is required for class PregameWinProbability.", nameof(awayTeam));

            if (!spread.IsSet)
                throw new ArgumentException("Property is required for class PregameWinProbability.", nameof(spread));

            if (!homeWinProbability.IsSet)
                throw new ArgumentException("Property is required for class PregameWinProbability.", nameof(homeWinProbability));

            if (season.IsSet && season.Value == null)
                throw new ArgumentNullException(nameof(season), "Property is not nullable for class PregameWinProbability.");

            if (seasonType.IsSet && seasonType.Value == null)
                throw new ArgumentNullException(nameof(seasonType), "Property is not nullable for class PregameWinProbability.");

            if (week.IsSet && week.Value == null)
                throw new ArgumentNullException(nameof(week), "Property is not nullable for class PregameWinProbability.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class PregameWinProbability.");

            if (homeTeam.IsSet && homeTeam.Value == null)
                throw new ArgumentNullException(nameof(homeTeam), "Property is not nullable for class PregameWinProbability.");

            if (awayTeam.IsSet && awayTeam.Value == null)
                throw new ArgumentNullException(nameof(awayTeam), "Property is not nullable for class PregameWinProbability.");

            if (spread.IsSet && spread.Value == null)
                throw new ArgumentNullException(nameof(spread), "Property is not nullable for class PregameWinProbability.");

            if (homeWinProbability.IsSet && homeWinProbability.Value == null)
                throw new ArgumentNullException(nameof(homeWinProbability), "Property is not nullable for class PregameWinProbability.");

            return new PregameWinProbability(season.Value!.Value!, seasonType.Value!.Value!, week.Value!.Value!, gameId.Value!.Value!, homeTeam.Value!, awayTeam.Value!, spread.Value!.Value!, homeWinProbability.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PregameWinProbability" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pregameWinProbability"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PregameWinProbability pregameWinProbability, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pregameWinProbability, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PregameWinProbability" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pregameWinProbability"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PregameWinProbability pregameWinProbability, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pregameWinProbability.HomeTeam == null)
                throw new ArgumentNullException(nameof(pregameWinProbability.HomeTeam), "Property is required for class PregameWinProbability.");

            if (pregameWinProbability.AwayTeam == null)
                throw new ArgumentNullException(nameof(pregameWinProbability.AwayTeam), "Property is required for class PregameWinProbability.");

            writer.WriteNumber("season", pregameWinProbability.Season);

            var seasonTypeRawValue = SeasonTypeValueConverter.ToJsonValue(pregameWinProbability.SeasonType);
            writer.WriteString("seasonType", seasonTypeRawValue);

            writer.WriteNumber("week", pregameWinProbability.Week);

            writer.WriteNumber("gameId", pregameWinProbability.GameId);

            writer.WriteString("homeTeam", pregameWinProbability.HomeTeam);

            writer.WriteString("awayTeam", pregameWinProbability.AwayTeam);

            writer.WriteNumber("spread", pregameWinProbability.Spread);

            writer.WriteNumber("homeWinProbability", pregameWinProbability.HomeWinProbability);
        }
    }
}
