// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.7.0
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// AdvancedBoxScorePlayers
    /// </summary>
    public partial class AdvancedBoxScorePlayers : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedBoxScorePlayers" /> class.
        /// </summary>
        /// <param name="ppa">ppa</param>
        /// <param name="usage">usage</param>
        [JsonConstructor]
        public AdvancedBoxScorePlayers(List<PlayerPPA> ppa, List<PlayerGameUsage> usage)
        {
            Ppa = ppa;
            Usage = usage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Ppa
        /// </summary>
        [JsonPropertyName("ppa")]
        public List<PlayerPPA> Ppa { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [JsonPropertyName("usage")]
        public List<PlayerGameUsage> Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdvancedBoxScorePlayers {\n");
            sb.Append("  Ppa: ").Append(Ppa).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdvancedBoxScorePlayers" />
    /// </summary>
    public class AdvancedBoxScorePlayersJsonConverter : JsonConverter<AdvancedBoxScorePlayers>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdvancedBoxScorePlayers" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdvancedBoxScorePlayers Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<PlayerPPA>?> ppa = default;
            Option<List<PlayerGameUsage>?> usage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ppa":
                            ppa = new Option<List<PlayerPPA>?>(JsonSerializer.Deserialize<List<PlayerPPA>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "usage":
                            usage = new Option<List<PlayerGameUsage>?>(JsonSerializer.Deserialize<List<PlayerGameUsage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ppa.IsSet)
                throw new ArgumentException("Property is required for class AdvancedBoxScorePlayers.", nameof(ppa));

            if (!usage.IsSet)
                throw new ArgumentException("Property is required for class AdvancedBoxScorePlayers.", nameof(usage));

            if (ppa.IsSet && ppa.Value == null)
                throw new ArgumentNullException(nameof(ppa), "Property is not nullable for class AdvancedBoxScorePlayers.");

            if (usage.IsSet && usage.Value == null)
                throw new ArgumentNullException(nameof(usage), "Property is not nullable for class AdvancedBoxScorePlayers.");

            return new AdvancedBoxScorePlayers(ppa.Value!, usage.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AdvancedBoxScorePlayers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="advancedBoxScorePlayers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdvancedBoxScorePlayers advancedBoxScorePlayers, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, advancedBoxScorePlayers, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdvancedBoxScorePlayers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="advancedBoxScorePlayers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdvancedBoxScorePlayers advancedBoxScorePlayers, JsonSerializerOptions jsonSerializerOptions)
        {
            if (advancedBoxScorePlayers.Ppa == null)
                throw new ArgumentNullException(nameof(advancedBoxScorePlayers.Ppa), "Property is required for class AdvancedBoxScorePlayers.");

            if (advancedBoxScorePlayers.Usage == null)
                throw new ArgumentNullException(nameof(advancedBoxScorePlayers.Usage), "Property is required for class AdvancedBoxScorePlayers.");

            writer.WritePropertyName("ppa");
            JsonSerializer.Serialize(writer, advancedBoxScorePlayers.Ppa, jsonSerializerOptions);
            writer.WritePropertyName("usage");
            JsonSerializer.Serialize(writer, advancedBoxScorePlayers.Usage, jsonSerializerOptions);
        }
    }
}
