/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.3
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Coach
    /// </summary>
    [DataContract(Name = "Coach")]
    public partial class Coach : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Coach" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Coach() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Coach" /> class.
        /// </summary>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="hireDate">hireDate (required).</param>
        /// <param name="seasons">seasons (required).</param>
        public Coach(string firstName = default(string), string lastName = default(string), DateTime? hireDate = default(DateTime?), List<CoachSeason> seasons = default(List<CoachSeason>))
        {
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for Coach and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for Coach and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "hireDate" is required (not null)
            if (hireDate == null)
            {
                throw new ArgumentNullException("hireDate is a required property for Coach and cannot be null");
            }
            this.HireDate = hireDate;
            // to ensure "seasons" is required (not null)
            if (seasons == null)
            {
                throw new ArgumentNullException("seasons is a required property for Coach and cannot be null");
            }
            this.Seasons = seasons;
        }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets HireDate
        /// </summary>
        [DataMember(Name = "hireDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? HireDate { get; set; }

        /// <summary>
        /// Gets or Sets Seasons
        /// </summary>
        [DataMember(Name = "seasons", IsRequired = true, EmitDefaultValue = true)]
        public List<CoachSeason> Seasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Coach {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("  Seasons: ").Append(Seasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
