// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.16
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Coach
    /// </summary>
    public partial class Coach : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Coach" /> class.
        /// </summary>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="seasons">seasons</param>
        /// <param name="hireDate">hireDate</param>
        [JsonConstructor]
        public Coach(string firstName, string lastName, List<CoachSeason> seasons, DateTime? hireDate = default)
        {
            FirstName = firstName;
            LastName = lastName;
            Seasons = seasons;
            HireDate = hireDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Seasons
        /// </summary>
        [JsonPropertyName("seasons")]
        public List<CoachSeason> Seasons { get; set; }

        /// <summary>
        /// Gets or Sets HireDate
        /// </summary>
        [JsonPropertyName("hireDate")]
        public DateTime? HireDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Coach {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Seasons: ").Append(Seasons).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Coach" />
    /// </summary>
    public class CoachJsonConverter : JsonConverter<Coach>
    {
        /// <summary>
        /// The format to use to serialize HireDate
        /// </summary>
        public static string HireDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Coach" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Coach Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<List<CoachSeason>?> seasons = default;
            Option<DateTime?> hireDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "seasons":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                seasons = new Option<List<CoachSeason>?>(JsonSerializer.Deserialize<List<CoachSeason>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hireDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hireDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class Coach.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class Coach.", nameof(lastName));

            if (!seasons.IsSet)
                throw new ArgumentException("Property is required for class Coach.", nameof(seasons));

            if (!hireDate.IsSet)
                throw new ArgumentException("Property is required for class Coach.", nameof(hireDate));

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class Coach.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class Coach.");

            if (seasons.IsSet && seasons.Value == null)
                throw new ArgumentNullException(nameof(seasons), "Property is not nullable for class Coach.");

            return new Coach(firstName.Value!, lastName.Value!, seasons.Value!, hireDate.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Coach" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="coach"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Coach coach, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, coach, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Coach" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="coach"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Coach coach, JsonSerializerOptions jsonSerializerOptions)
        {
            if (coach.FirstName == null)
                throw new ArgumentNullException(nameof(coach.FirstName), "Property is required for class Coach.");

            if (coach.LastName == null)
                throw new ArgumentNullException(nameof(coach.LastName), "Property is required for class Coach.");

            if (coach.Seasons == null)
                throw new ArgumentNullException(nameof(coach.Seasons), "Property is required for class Coach.");

            writer.WriteString("firstName", coach.FirstName);

            writer.WriteString("lastName", coach.LastName);

            writer.WritePropertyName("seasons");
            JsonSerializer.Serialize(writer, coach.Seasons, jsonSerializerOptions);
            if (coach.HireDate != null)
                writer.WriteString("hireDate", coach.HireDate.Value.ToString(HireDateFormat));
            else
                writer.WriteNull("hireDate");
        }
    }
}
