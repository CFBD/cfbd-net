// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.10
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayerPPA
    /// </summary>
    public partial class PlayerPPA : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerPPA" /> class.
        /// </summary>
        /// <param name="player">player</param>
        /// <param name="team">team</param>
        /// <param name="position">position</param>
        /// <param name="average">average</param>
        /// <param name="cumulative">cumulative</param>
        [JsonConstructor]
        public PlayerPPA(string player, string team, string position, PlayerStatsByQuarter average, PlayerStatsByQuarter cumulative)
        {
            Player = player;
            Team = team;
            Position = position;
            Average = average;
            Cumulative = cumulative;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Player
        /// </summary>
        [JsonPropertyName("player")]
        public string Player { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [JsonPropertyName("team")]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [JsonPropertyName("position")]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Average
        /// </summary>
        [JsonPropertyName("average")]
        public PlayerStatsByQuarter Average { get; set; }

        /// <summary>
        /// Gets or Sets Cumulative
        /// </summary>
        [JsonPropertyName("cumulative")]
        public PlayerStatsByQuarter Cumulative { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerPPA {\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  Cumulative: ").Append(Cumulative).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerPPA" />
    /// </summary>
    public class PlayerPPAJsonConverter : JsonConverter<PlayerPPA>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerPPA" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerPPA Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> player = default;
            Option<string?> team = default;
            Option<string?> position = default;
            Option<PlayerStatsByQuarter?> average = default;
            Option<PlayerStatsByQuarter?> cumulative = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "player":
                            player = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "team":
                            team = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "position":
                            position = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "average":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                average = new Option<PlayerStatsByQuarter?>(JsonSerializer.Deserialize<PlayerStatsByQuarter>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cumulative":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cumulative = new Option<PlayerStatsByQuarter?>(JsonSerializer.Deserialize<PlayerStatsByQuarter>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!player.IsSet)
                throw new ArgumentException("Property is required for class PlayerPPA.", nameof(player));

            if (!team.IsSet)
                throw new ArgumentException("Property is required for class PlayerPPA.", nameof(team));

            if (!position.IsSet)
                throw new ArgumentException("Property is required for class PlayerPPA.", nameof(position));

            if (!average.IsSet)
                throw new ArgumentException("Property is required for class PlayerPPA.", nameof(average));

            if (!cumulative.IsSet)
                throw new ArgumentException("Property is required for class PlayerPPA.", nameof(cumulative));

            if (player.IsSet && player.Value == null)
                throw new ArgumentNullException(nameof(player), "Property is not nullable for class PlayerPPA.");

            if (team.IsSet && team.Value == null)
                throw new ArgumentNullException(nameof(team), "Property is not nullable for class PlayerPPA.");

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position), "Property is not nullable for class PlayerPPA.");

            if (average.IsSet && average.Value == null)
                throw new ArgumentNullException(nameof(average), "Property is not nullable for class PlayerPPA.");

            if (cumulative.IsSet && cumulative.Value == null)
                throw new ArgumentNullException(nameof(cumulative), "Property is not nullable for class PlayerPPA.");

            return new PlayerPPA(player.Value!, team.Value!, position.Value!, average.Value!, cumulative.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerPPA" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerPPA"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerPPA playerPPA, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerPPA, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerPPA" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerPPA"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerPPA playerPPA, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerPPA.Player == null)
                throw new ArgumentNullException(nameof(playerPPA.Player), "Property is required for class PlayerPPA.");

            if (playerPPA.Team == null)
                throw new ArgumentNullException(nameof(playerPPA.Team), "Property is required for class PlayerPPA.");

            if (playerPPA.Position == null)
                throw new ArgumentNullException(nameof(playerPPA.Position), "Property is required for class PlayerPPA.");

            if (playerPPA.Average == null)
                throw new ArgumentNullException(nameof(playerPPA.Average), "Property is required for class PlayerPPA.");

            if (playerPPA.Cumulative == null)
                throw new ArgumentNullException(nameof(playerPPA.Cumulative), "Property is required for class PlayerPPA.");

            writer.WriteString("player", playerPPA.Player);

            writer.WriteString("team", playerPPA.Team);

            writer.WriteString("position", playerPPA.Position);

            writer.WritePropertyName("average");
            JsonSerializer.Serialize(writer, playerPPA.Average, jsonSerializerOptions);
            writer.WritePropertyName("cumulative");
            JsonSerializer.Serialize(writer, playerPPA.Cumulative, jsonSerializerOptions);
        }
    }
}
