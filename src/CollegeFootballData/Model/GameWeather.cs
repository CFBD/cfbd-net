/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// GameWeather
    /// </summary>
    [DataContract(Name = "GameWeather")]
    public partial class GameWeather : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [DataMember(Name = "seasonType", IsRequired = true, EmitDefaultValue = true)]
        public SeasonType SeasonType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameWeather" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GameWeather() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameWeather" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="season">season (required).</param>
        /// <param name="week">week (required).</param>
        /// <param name="seasonType">seasonType (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="gameIndoors">gameIndoors (required).</param>
        /// <param name="homeTeam">homeTeam (required).</param>
        /// <param name="homeConference">homeConference (required).</param>
        /// <param name="awayTeam">awayTeam (required).</param>
        /// <param name="awayConference">awayConference (required).</param>
        /// <param name="venueId">venueId (required).</param>
        /// <param name="venue">venue (required).</param>
        /// <param name="temperature">temperature (required).</param>
        /// <param name="dewPoint">dewPoint (required).</param>
        /// <param name="humidity">humidity (required).</param>
        /// <param name="precipitation">precipitation (required).</param>
        /// <param name="snowfall">snowfall (required).</param>
        /// <param name="windDirection">windDirection (required).</param>
        /// <param name="windSpeed">windSpeed (required).</param>
        /// <param name="pressure">pressure (required).</param>
        /// <param name="weatherConditionCode">weatherConditionCode (required).</param>
        /// <param name="weatherCondition">weatherCondition (required).</param>
        public GameWeather(int id = default(int), int season = default(int), int week = default(int), SeasonType seasonType = default(SeasonType), DateTime startTime = default(DateTime), bool gameIndoors = default(bool), string homeTeam = default(string), string homeConference = default(string), string awayTeam = default(string), string awayConference = default(string), int venueId = default(int), string venue = default(string), double? temperature = default(double?), double? dewPoint = default(double?), double? humidity = default(double?), double? precipitation = default(double?), double? snowfall = default(double?), double? windDirection = default(double?), double? windSpeed = default(double?), double? pressure = default(double?), double? weatherConditionCode = default(double?), string weatherCondition = default(string))
        {
            this.Id = id;
            this.Season = season;
            this.Week = week;
            this.SeasonType = seasonType;
            this.StartTime = startTime;
            this.GameIndoors = gameIndoors;
            // to ensure "homeTeam" is required (not null)
            if (homeTeam == null)
            {
                throw new ArgumentNullException("homeTeam is a required property for GameWeather and cannot be null");
            }
            this.HomeTeam = homeTeam;
            // to ensure "homeConference" is required (not null)
            if (homeConference == null)
            {
                throw new ArgumentNullException("homeConference is a required property for GameWeather and cannot be null");
            }
            this.HomeConference = homeConference;
            // to ensure "awayTeam" is required (not null)
            if (awayTeam == null)
            {
                throw new ArgumentNullException("awayTeam is a required property for GameWeather and cannot be null");
            }
            this.AwayTeam = awayTeam;
            // to ensure "awayConference" is required (not null)
            if (awayConference == null)
            {
                throw new ArgumentNullException("awayConference is a required property for GameWeather and cannot be null");
            }
            this.AwayConference = awayConference;
            this.VenueId = venueId;
            // to ensure "venue" is required (not null)
            if (venue == null)
            {
                throw new ArgumentNullException("venue is a required property for GameWeather and cannot be null");
            }
            this.Venue = venue;
            // to ensure "temperature" is required (not null)
            if (temperature == null)
            {
                throw new ArgumentNullException("temperature is a required property for GameWeather and cannot be null");
            }
            this.Temperature = temperature;
            // to ensure "dewPoint" is required (not null)
            if (dewPoint == null)
            {
                throw new ArgumentNullException("dewPoint is a required property for GameWeather and cannot be null");
            }
            this.DewPoint = dewPoint;
            // to ensure "humidity" is required (not null)
            if (humidity == null)
            {
                throw new ArgumentNullException("humidity is a required property for GameWeather and cannot be null");
            }
            this.Humidity = humidity;
            // to ensure "precipitation" is required (not null)
            if (precipitation == null)
            {
                throw new ArgumentNullException("precipitation is a required property for GameWeather and cannot be null");
            }
            this.Precipitation = precipitation;
            // to ensure "snowfall" is required (not null)
            if (snowfall == null)
            {
                throw new ArgumentNullException("snowfall is a required property for GameWeather and cannot be null");
            }
            this.Snowfall = snowfall;
            // to ensure "windDirection" is required (not null)
            if (windDirection == null)
            {
                throw new ArgumentNullException("windDirection is a required property for GameWeather and cannot be null");
            }
            this.WindDirection = windDirection;
            // to ensure "windSpeed" is required (not null)
            if (windSpeed == null)
            {
                throw new ArgumentNullException("windSpeed is a required property for GameWeather and cannot be null");
            }
            this.WindSpeed = windSpeed;
            // to ensure "pressure" is required (not null)
            if (pressure == null)
            {
                throw new ArgumentNullException("pressure is a required property for GameWeather and cannot be null");
            }
            this.Pressure = pressure;
            // to ensure "weatherConditionCode" is required (not null)
            if (weatherConditionCode == null)
            {
                throw new ArgumentNullException("weatherConditionCode is a required property for GameWeather and cannot be null");
            }
            this.WeatherConditionCode = weatherConditionCode;
            // to ensure "weatherCondition" is required (not null)
            if (weatherCondition == null)
            {
                throw new ArgumentNullException("weatherCondition is a required property for GameWeather and cannot be null");
            }
            this.WeatherCondition = weatherCondition;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name = "season", IsRequired = true, EmitDefaultValue = true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name = "week", IsRequired = true, EmitDefaultValue = true)]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets GameIndoors
        /// </summary>
        [DataMember(Name = "gameIndoors", IsRequired = true, EmitDefaultValue = true)]
        public bool GameIndoors { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name = "homeTeam", IsRequired = true, EmitDefaultValue = true)]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets HomeConference
        /// </summary>
        [DataMember(Name = "homeConference", IsRequired = true, EmitDefaultValue = true)]
        public string HomeConference { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name = "awayTeam", IsRequired = true, EmitDefaultValue = true)]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets AwayConference
        /// </summary>
        [DataMember(Name = "awayConference", IsRequired = true, EmitDefaultValue = true)]
        public string AwayConference { get; set; }

        /// <summary>
        /// Gets or Sets VenueId
        /// </summary>
        [DataMember(Name = "venueId", IsRequired = true, EmitDefaultValue = true)]
        public int VenueId { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [DataMember(Name = "venue", IsRequired = true, EmitDefaultValue = true)]
        public string Venue { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name = "temperature", IsRequired = true, EmitDefaultValue = true)]
        public double? Temperature { get; set; }

        /// <summary>
        /// Gets or Sets DewPoint
        /// </summary>
        [DataMember(Name = "dewPoint", IsRequired = true, EmitDefaultValue = true)]
        public double? DewPoint { get; set; }

        /// <summary>
        /// Gets or Sets Humidity
        /// </summary>
        [DataMember(Name = "humidity", IsRequired = true, EmitDefaultValue = true)]
        public double? Humidity { get; set; }

        /// <summary>
        /// Gets or Sets Precipitation
        /// </summary>
        [DataMember(Name = "precipitation", IsRequired = true, EmitDefaultValue = true)]
        public double? Precipitation { get; set; }

        /// <summary>
        /// Gets or Sets Snowfall
        /// </summary>
        [DataMember(Name = "snowfall", IsRequired = true, EmitDefaultValue = true)]
        public double? Snowfall { get; set; }

        /// <summary>
        /// Gets or Sets WindDirection
        /// </summary>
        [DataMember(Name = "windDirection", IsRequired = true, EmitDefaultValue = true)]
        public double? WindDirection { get; set; }

        /// <summary>
        /// Gets or Sets WindSpeed
        /// </summary>
        [DataMember(Name = "windSpeed", IsRequired = true, EmitDefaultValue = true)]
        public double? WindSpeed { get; set; }

        /// <summary>
        /// Gets or Sets Pressure
        /// </summary>
        [DataMember(Name = "pressure", IsRequired = true, EmitDefaultValue = true)]
        public double? Pressure { get; set; }

        /// <summary>
        /// Gets or Sets WeatherConditionCode
        /// </summary>
        [DataMember(Name = "weatherConditionCode", IsRequired = true, EmitDefaultValue = true)]
        public double? WeatherConditionCode { get; set; }

        /// <summary>
        /// Gets or Sets WeatherCondition
        /// </summary>
        [DataMember(Name = "weatherCondition", IsRequired = true, EmitDefaultValue = true)]
        public string WeatherCondition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GameWeather {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  GameIndoors: ").Append(GameIndoors).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  HomeConference: ").Append(HomeConference).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  AwayConference: ").Append(AwayConference).Append("\n");
            sb.Append("  VenueId: ").Append(VenueId).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  DewPoint: ").Append(DewPoint).Append("\n");
            sb.Append("  Humidity: ").Append(Humidity).Append("\n");
            sb.Append("  Precipitation: ").Append(Precipitation).Append("\n");
            sb.Append("  Snowfall: ").Append(Snowfall).Append("\n");
            sb.Append("  WindDirection: ").Append(WindDirection).Append("\n");
            sb.Append("  WindSpeed: ").Append(WindSpeed).Append("\n");
            sb.Append("  Pressure: ").Append(Pressure).Append("\n");
            sb.Append("  WeatherConditionCode: ").Append(WeatherConditionCode).Append("\n");
            sb.Append("  WeatherCondition: ").Append(WeatherCondition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
