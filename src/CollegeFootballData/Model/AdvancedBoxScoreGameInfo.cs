/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.3
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// AdvancedBoxScoreGameInfo
    /// </summary>
    [DataContract(Name = "AdvancedBoxScore_gameInfo")]
    public partial class AdvancedBoxScoreGameInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedBoxScoreGameInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdvancedBoxScoreGameInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedBoxScoreGameInfo" /> class.
        /// </summary>
        /// <param name="excitement">excitement (required).</param>
        /// <param name="homeWinner">homeWinner (required).</param>
        /// <param name="awayWinProb">awayWinProb (required).</param>
        /// <param name="awayPoints">awayPoints (required).</param>
        /// <param name="awayTeam">awayTeam (required).</param>
        /// <param name="homeWinProb">homeWinProb (required).</param>
        /// <param name="homePoints">homePoints (required).</param>
        /// <param name="homeTeam">homeTeam (required).</param>
        public AdvancedBoxScoreGameInfo(double excitement = default(double), bool homeWinner = default(bool), double awayWinProb = default(double), int awayPoints = default(int), string awayTeam = default(string), double homeWinProb = default(double), int homePoints = default(int), string homeTeam = default(string))
        {
            this.Excitement = excitement;
            this.HomeWinner = homeWinner;
            this.AwayWinProb = awayWinProb;
            this.AwayPoints = awayPoints;
            // to ensure "awayTeam" is required (not null)
            if (awayTeam == null)
            {
                throw new ArgumentNullException("awayTeam is a required property for AdvancedBoxScoreGameInfo and cannot be null");
            }
            this.AwayTeam = awayTeam;
            this.HomeWinProb = homeWinProb;
            this.HomePoints = homePoints;
            // to ensure "homeTeam" is required (not null)
            if (homeTeam == null)
            {
                throw new ArgumentNullException("homeTeam is a required property for AdvancedBoxScoreGameInfo and cannot be null");
            }
            this.HomeTeam = homeTeam;
        }

        /// <summary>
        /// Gets or Sets Excitement
        /// </summary>
        [DataMember(Name = "excitement", IsRequired = true, EmitDefaultValue = true)]
        public double Excitement { get; set; }

        /// <summary>
        /// Gets or Sets HomeWinner
        /// </summary>
        [DataMember(Name = "homeWinner", IsRequired = true, EmitDefaultValue = true)]
        public bool HomeWinner { get; set; }

        /// <summary>
        /// Gets or Sets AwayWinProb
        /// </summary>
        [DataMember(Name = "awayWinProb", IsRequired = true, EmitDefaultValue = true)]
        public double AwayWinProb { get; set; }

        /// <summary>
        /// Gets or Sets AwayPoints
        /// </summary>
        [DataMember(Name = "awayPoints", IsRequired = true, EmitDefaultValue = true)]
        public int AwayPoints { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name = "awayTeam", IsRequired = true, EmitDefaultValue = true)]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets HomeWinProb
        /// </summary>
        [DataMember(Name = "homeWinProb", IsRequired = true, EmitDefaultValue = true)]
        public double HomeWinProb { get; set; }

        /// <summary>
        /// Gets or Sets HomePoints
        /// </summary>
        [DataMember(Name = "homePoints", IsRequired = true, EmitDefaultValue = true)]
        public int HomePoints { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name = "homeTeam", IsRequired = true, EmitDefaultValue = true)]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdvancedBoxScoreGameInfo {\n");
            sb.Append("  Excitement: ").Append(Excitement).Append("\n");
            sb.Append("  HomeWinner: ").Append(HomeWinner).Append("\n");
            sb.Append("  AwayWinProb: ").Append(AwayWinProb).Append("\n");
            sb.Append("  AwayPoints: ").Append(AwayPoints).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  HomeWinProb: ").Append(HomeWinProb).Append("\n");
            sb.Append("  HomePoints: ").Append(HomePoints).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
