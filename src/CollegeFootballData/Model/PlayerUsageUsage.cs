// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.13
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayerUsageUsage
    /// </summary>
    public partial class PlayerUsageUsage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerUsageUsage" /> class.
        /// </summary>
        /// <param name="passingDowns">passingDowns</param>
        /// <param name="standardDowns">standardDowns</param>
        /// <param name="thirdDown">thirdDown</param>
        /// <param name="secondDown">secondDown</param>
        /// <param name="firstDown">firstDown</param>
        /// <param name="rush">rush</param>
        /// <param name="pass">pass</param>
        /// <param name="overall">overall</param>
        [JsonConstructor]
        public PlayerUsageUsage(double passingDowns, double standardDowns, double thirdDown, double secondDown, double firstDown, double rush, double pass, double overall)
        {
            PassingDowns = passingDowns;
            StandardDowns = standardDowns;
            ThirdDown = thirdDown;
            SecondDown = secondDown;
            FirstDown = firstDown;
            Rush = rush;
            Pass = pass;
            Overall = overall;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets PassingDowns
        /// </summary>
        [JsonPropertyName("passingDowns")]
        public double PassingDowns { get; set; }

        /// <summary>
        /// Gets or Sets StandardDowns
        /// </summary>
        [JsonPropertyName("standardDowns")]
        public double StandardDowns { get; set; }

        /// <summary>
        /// Gets or Sets ThirdDown
        /// </summary>
        [JsonPropertyName("thirdDown")]
        public double ThirdDown { get; set; }

        /// <summary>
        /// Gets or Sets SecondDown
        /// </summary>
        [JsonPropertyName("secondDown")]
        public double SecondDown { get; set; }

        /// <summary>
        /// Gets or Sets FirstDown
        /// </summary>
        [JsonPropertyName("firstDown")]
        public double FirstDown { get; set; }

        /// <summary>
        /// Gets or Sets Rush
        /// </summary>
        [JsonPropertyName("rush")]
        public double Rush { get; set; }

        /// <summary>
        /// Gets or Sets Pass
        /// </summary>
        [JsonPropertyName("pass")]
        public double Pass { get; set; }

        /// <summary>
        /// Gets or Sets Overall
        /// </summary>
        [JsonPropertyName("overall")]
        public double Overall { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerUsageUsage {\n");
            sb.Append("  PassingDowns: ").Append(PassingDowns).Append("\n");
            sb.Append("  StandardDowns: ").Append(StandardDowns).Append("\n");
            sb.Append("  ThirdDown: ").Append(ThirdDown).Append("\n");
            sb.Append("  SecondDown: ").Append(SecondDown).Append("\n");
            sb.Append("  FirstDown: ").Append(FirstDown).Append("\n");
            sb.Append("  Rush: ").Append(Rush).Append("\n");
            sb.Append("  Pass: ").Append(Pass).Append("\n");
            sb.Append("  Overall: ").Append(Overall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerUsageUsage" />
    /// </summary>
    public class PlayerUsageUsageJsonConverter : JsonConverter<PlayerUsageUsage>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerUsageUsage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerUsageUsage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> passingDowns = default;
            Option<double?> standardDowns = default;
            Option<double?> thirdDown = default;
            Option<double?> secondDown = default;
            Option<double?> firstDown = default;
            Option<double?> rush = default;
            Option<double?> pass = default;
            Option<double?> overall = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "passingDowns":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passingDowns = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "standardDowns":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standardDowns = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "thirdDown":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                thirdDown = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "secondDown":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                secondDown = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "firstDown":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstDown = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "rush":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rush = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "pass":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pass = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "overall":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                overall = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!passingDowns.IsSet)
                throw new ArgumentException("Property is required for class PlayerUsageUsage.", nameof(passingDowns));

            if (!standardDowns.IsSet)
                throw new ArgumentException("Property is required for class PlayerUsageUsage.", nameof(standardDowns));

            if (!thirdDown.IsSet)
                throw new ArgumentException("Property is required for class PlayerUsageUsage.", nameof(thirdDown));

            if (!secondDown.IsSet)
                throw new ArgumentException("Property is required for class PlayerUsageUsage.", nameof(secondDown));

            if (!firstDown.IsSet)
                throw new ArgumentException("Property is required for class PlayerUsageUsage.", nameof(firstDown));

            if (!rush.IsSet)
                throw new ArgumentException("Property is required for class PlayerUsageUsage.", nameof(rush));

            if (!pass.IsSet)
                throw new ArgumentException("Property is required for class PlayerUsageUsage.", nameof(pass));

            if (!overall.IsSet)
                throw new ArgumentException("Property is required for class PlayerUsageUsage.", nameof(overall));

            if (passingDowns.IsSet && passingDowns.Value == null)
                throw new ArgumentNullException(nameof(passingDowns), "Property is not nullable for class PlayerUsageUsage.");

            if (standardDowns.IsSet && standardDowns.Value == null)
                throw new ArgumentNullException(nameof(standardDowns), "Property is not nullable for class PlayerUsageUsage.");

            if (thirdDown.IsSet && thirdDown.Value == null)
                throw new ArgumentNullException(nameof(thirdDown), "Property is not nullable for class PlayerUsageUsage.");

            if (secondDown.IsSet && secondDown.Value == null)
                throw new ArgumentNullException(nameof(secondDown), "Property is not nullable for class PlayerUsageUsage.");

            if (firstDown.IsSet && firstDown.Value == null)
                throw new ArgumentNullException(nameof(firstDown), "Property is not nullable for class PlayerUsageUsage.");

            if (rush.IsSet && rush.Value == null)
                throw new ArgumentNullException(nameof(rush), "Property is not nullable for class PlayerUsageUsage.");

            if (pass.IsSet && pass.Value == null)
                throw new ArgumentNullException(nameof(pass), "Property is not nullable for class PlayerUsageUsage.");

            if (overall.IsSet && overall.Value == null)
                throw new ArgumentNullException(nameof(overall), "Property is not nullable for class PlayerUsageUsage.");

            return new PlayerUsageUsage(passingDowns.Value!.Value!, standardDowns.Value!.Value!, thirdDown.Value!.Value!, secondDown.Value!.Value!, firstDown.Value!.Value!, rush.Value!.Value!, pass.Value!.Value!, overall.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerUsageUsage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerUsageUsage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerUsageUsage playerUsageUsage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerUsageUsage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerUsageUsage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerUsageUsage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerUsageUsage playerUsageUsage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("passingDowns", playerUsageUsage.PassingDowns);

            writer.WriteNumber("standardDowns", playerUsageUsage.StandardDowns);

            writer.WriteNumber("thirdDown", playerUsageUsage.ThirdDown);

            writer.WriteNumber("secondDown", playerUsageUsage.SecondDown);

            writer.WriteNumber("firstDown", playerUsageUsage.FirstDown);

            writer.WriteNumber("rush", playerUsageUsage.Rush);

            writer.WriteNumber("pass", playerUsageUsage.Pass);

            writer.WriteNumber("overall", playerUsageUsage.Overall);
        }
    }
}
