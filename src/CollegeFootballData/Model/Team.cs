// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.7.0
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Team
    /// </summary>
    public partial class Team : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Team" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="school">school</param>
        /// <param name="mascot">mascot</param>
        /// <param name="abbreviation">abbreviation</param>
        /// <param name="alternateNames">alternateNames</param>
        /// <param name="conference">conference</param>
        /// <param name="division">division</param>
        /// <param name="classification">classification</param>
        /// <param name="color">color</param>
        /// <param name="alternateColor">alternateColor</param>
        /// <param name="logos">logos</param>
        /// <param name="twitter">twitter</param>
        /// <param name="location">location</param>
        [JsonConstructor]
        public Team(int id, string school, string? mascot = default, string? abbreviation = default, List<string>? alternateNames = default, string? conference = default, string? division = default, string? classification = default, string? color = default, string? alternateColor = default, List<string>? logos = default, string? twitter = default, Venue? location = default)
        {
            Id = id;
            School = school;
            Mascot = mascot;
            Abbreviation = abbreviation;
            AlternateNames = alternateNames;
            Conference = conference;
            Division = division;
            Classification = classification;
            Color = color;
            AlternateColor = alternateColor;
            Logos = logos;
            Twitter = twitter;
            Location = location;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [JsonPropertyName("school")]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets Mascot
        /// </summary>
        [JsonPropertyName("mascot")]
        public string? Mascot { get; set; }

        /// <summary>
        /// Gets or Sets Abbreviation
        /// </summary>
        [JsonPropertyName("abbreviation")]
        public string? Abbreviation { get; set; }

        /// <summary>
        /// Gets or Sets AlternateNames
        /// </summary>
        [JsonPropertyName("alternateNames")]
        public List<string>? AlternateNames { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [JsonPropertyName("conference")]
        public string? Conference { get; set; }

        /// <summary>
        /// Gets or Sets Division
        /// </summary>
        [JsonPropertyName("division")]
        public string? Division { get; set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [JsonPropertyName("classification")]
        public string? Classification { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public string? Color { get; set; }

        /// <summary>
        /// Gets or Sets AlternateColor
        /// </summary>
        [JsonPropertyName("alternateColor")]
        public string? AlternateColor { get; set; }

        /// <summary>
        /// Gets or Sets Logos
        /// </summary>
        [JsonPropertyName("logos")]
        public List<string>? Logos { get; set; }

        /// <summary>
        /// Gets or Sets Twitter
        /// </summary>
        [JsonPropertyName("twitter")]
        public string? Twitter { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public Venue? Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Team {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  Mascot: ").Append(Mascot).Append("\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("  AlternateNames: ").Append(AlternateNames).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  AlternateColor: ").Append(AlternateColor).Append("\n");
            sb.Append("  Logos: ").Append(Logos).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Team" />
    /// </summary>
    public class TeamJsonConverter : JsonConverter<Team>
    {
        /// <summary>
        /// Deserializes json to <see cref="Team" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Team Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> school = default;
            Option<string?> mascot = default;
            Option<string?> abbreviation = default;
            Option<List<string>?> alternateNames = default;
            Option<string?> conference = default;
            Option<string?> division = default;
            Option<string?> classification = default;
            Option<string?> color = default;
            Option<string?> alternateColor = default;
            Option<List<string>?> logos = default;
            Option<string?> twitter = default;
            Option<Venue?> location = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "school":
                            school = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mascot":
                            mascot = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "abbreviation":
                            abbreviation = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "alternateNames":
                            alternateNames = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "conference":
                            conference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "division":
                            division = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "classification":
                            classification = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "alternateColor":
                            alternateColor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "logos":
                            logos = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "twitter":
                            twitter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "location":
                            location = new Option<Venue?>(JsonSerializer.Deserialize<Venue>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(id));

            if (!school.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(school));

            if (!mascot.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(mascot));

            if (!abbreviation.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(abbreviation));

            if (!alternateNames.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(alternateNames));

            if (!conference.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(conference));

            if (!division.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(division));

            if (!classification.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(classification));

            if (!color.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(color));

            if (!alternateColor.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(alternateColor));

            if (!logos.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(logos));

            if (!twitter.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(twitter));

            if (!location.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(location));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Team.");

            if (school.IsSet && school.Value == null)
                throw new ArgumentNullException(nameof(school), "Property is not nullable for class Team.");

            return new Team(id.Value!.Value!, school.Value!, mascot.Value!, abbreviation.Value!, alternateNames.Value!, conference.Value!, division.Value!, classification.Value!, color.Value!, alternateColor.Value!, logos.Value!, twitter.Value!, location.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Team" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="team"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Team team, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, team, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Team" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="team"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Team team, JsonSerializerOptions jsonSerializerOptions)
        {
            if (team.School == null)
                throw new ArgumentNullException(nameof(team.School), "Property is required for class Team.");

            writer.WriteNumber("id", team.Id);

            writer.WriteString("school", team.School);

            if (team.Mascot != null)
                writer.WriteString("mascot", team.Mascot);
            else
                writer.WriteNull("mascot");

            if (team.Abbreviation != null)
                writer.WriteString("abbreviation", team.Abbreviation);
            else
                writer.WriteNull("abbreviation");

            if (team.AlternateNames != null)
            {
                writer.WritePropertyName("alternateNames");
                JsonSerializer.Serialize(writer, team.AlternateNames, jsonSerializerOptions);
            }
            else
                writer.WriteNull("alternateNames");
            if (team.Conference != null)
                writer.WriteString("conference", team.Conference);
            else
                writer.WriteNull("conference");

            if (team.Division != null)
                writer.WriteString("division", team.Division);
            else
                writer.WriteNull("division");

            if (team.Classification != null)
                writer.WriteString("classification", team.Classification);
            else
                writer.WriteNull("classification");

            if (team.Color != null)
                writer.WriteString("color", team.Color);
            else
                writer.WriteNull("color");

            if (team.AlternateColor != null)
                writer.WriteString("alternateColor", team.AlternateColor);
            else
                writer.WriteNull("alternateColor");

            if (team.Logos != null)
            {
                writer.WritePropertyName("logos");
                JsonSerializer.Serialize(writer, team.Logos, jsonSerializerOptions);
            }
            else
                writer.WriteNull("logos");
            if (team.Twitter != null)
                writer.WriteString("twitter", team.Twitter);
            else
                writer.WriteNull("twitter");

            if (team.Location != null)
            {
                writer.WritePropertyName("location");
                JsonSerializer.Serialize(writer, team.Location, jsonSerializerOptions);
            }
            else
                writer.WriteNull("location");
        }
    }
}
