/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Team
    /// </summary>
    [DataContract(Name = "Team")]
    public partial class Team : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Team" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Team() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Team" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="school">school (required).</param>
        /// <param name="mascot">mascot (required).</param>
        /// <param name="abbreviation">abbreviation (required).</param>
        /// <param name="alternateNames">alternateNames (required).</param>
        /// <param name="conference">conference (required).</param>
        /// <param name="division">division (required).</param>
        /// <param name="classification">classification (required).</param>
        /// <param name="color">color (required).</param>
        /// <param name="alternateColor">alternateColor (required).</param>
        /// <param name="logos">logos (required).</param>
        /// <param name="twitter">twitter (required).</param>
        /// <param name="location">location (required).</param>
        public Team(int id = default(int), string school = default(string), string mascot = default(string), string abbreviation = default(string), List<string> alternateNames = default(List<string>), string conference = default(string), string division = default(string), string classification = default(string), string color = default(string), string alternateColor = default(string), List<string> logos = default(List<string>), string twitter = default(string), Venue location = default(Venue))
        {
            this.Id = id;
            // to ensure "school" is required (not null)
            if (school == null)
            {
                throw new ArgumentNullException("school is a required property for Team and cannot be null");
            }
            this.School = school;
            // to ensure "mascot" is required (not null)
            if (mascot == null)
            {
                throw new ArgumentNullException("mascot is a required property for Team and cannot be null");
            }
            this.Mascot = mascot;
            // to ensure "abbreviation" is required (not null)
            if (abbreviation == null)
            {
                throw new ArgumentNullException("abbreviation is a required property for Team and cannot be null");
            }
            this.Abbreviation = abbreviation;
            // to ensure "alternateNames" is required (not null)
            if (alternateNames == null)
            {
                throw new ArgumentNullException("alternateNames is a required property for Team and cannot be null");
            }
            this.AlternateNames = alternateNames;
            // to ensure "conference" is required (not null)
            if (conference == null)
            {
                throw new ArgumentNullException("conference is a required property for Team and cannot be null");
            }
            this.Conference = conference;
            // to ensure "division" is required (not null)
            if (division == null)
            {
                throw new ArgumentNullException("division is a required property for Team and cannot be null");
            }
            this.Division = division;
            // to ensure "classification" is required (not null)
            if (classification == null)
            {
                throw new ArgumentNullException("classification is a required property for Team and cannot be null");
            }
            this.Classification = classification;
            // to ensure "color" is required (not null)
            if (color == null)
            {
                throw new ArgumentNullException("color is a required property for Team and cannot be null");
            }
            this.Color = color;
            // to ensure "alternateColor" is required (not null)
            if (alternateColor == null)
            {
                throw new ArgumentNullException("alternateColor is a required property for Team and cannot be null");
            }
            this.AlternateColor = alternateColor;
            // to ensure "logos" is required (not null)
            if (logos == null)
            {
                throw new ArgumentNullException("logos is a required property for Team and cannot be null");
            }
            this.Logos = logos;
            // to ensure "twitter" is required (not null)
            if (twitter == null)
            {
                throw new ArgumentNullException("twitter is a required property for Team and cannot be null");
            }
            this.Twitter = twitter;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for Team and cannot be null");
            }
            this.Location = location;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name = "school", IsRequired = true, EmitDefaultValue = true)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets Mascot
        /// </summary>
        [DataMember(Name = "mascot", IsRequired = true, EmitDefaultValue = true)]
        public string Mascot { get; set; }

        /// <summary>
        /// Gets or Sets Abbreviation
        /// </summary>
        [DataMember(Name = "abbreviation", IsRequired = true, EmitDefaultValue = true)]
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or Sets AlternateNames
        /// </summary>
        [DataMember(Name = "alternateNames", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AlternateNames { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [DataMember(Name = "conference", IsRequired = true, EmitDefaultValue = true)]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets Division
        /// </summary>
        [DataMember(Name = "division", IsRequired = true, EmitDefaultValue = true)]
        public string Division { get; set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [DataMember(Name = "classification", IsRequired = true, EmitDefaultValue = true)]
        public string Classification { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", IsRequired = true, EmitDefaultValue = true)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets AlternateColor
        /// </summary>
        [DataMember(Name = "alternateColor", IsRequired = true, EmitDefaultValue = true)]
        public string AlternateColor { get; set; }

        /// <summary>
        /// Gets or Sets Logos
        /// </summary>
        [DataMember(Name = "logos", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Logos { get; set; }

        /// <summary>
        /// Gets or Sets Twitter
        /// </summary>
        [DataMember(Name = "twitter", IsRequired = true, EmitDefaultValue = true)]
        public string Twitter { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public Venue Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Team {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  Mascot: ").Append(Mascot).Append("\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("  AlternateNames: ").Append(AlternateNames).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  AlternateColor: ").Append(AlternateColor).Append("\n");
            sb.Append("  Logos: ").Append(Logos).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
