// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.18
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// DraftTeam
    /// </summary>
    public partial class DraftTeam : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DraftTeam" /> class.
        /// </summary>
        /// <param name="location">location</param>
        /// <param name="nickname">nickname</param>
        /// <param name="displayName">displayName</param>
        /// <param name="logo">logo</param>
        [JsonConstructor]
        public DraftTeam(string location, string? nickname = default, string? displayName = default, string? logo = default)
        {
            Location = location;
            Nickname = nickname;
            DisplayName = displayName;
            Logo = logo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [JsonPropertyName("nickname")]
        public string? Nickname { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [JsonPropertyName("logo")]
        public string? Logo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DraftTeam {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DraftTeam" />
    /// </summary>
    public class DraftTeamJsonConverter : JsonConverter<DraftTeam>
    {
        /// <summary>
        /// Deserializes json to <see cref="DraftTeam" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DraftTeam Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> location = default;
            Option<string?> nickname = default;
            Option<string?> displayName = default;
            Option<string?> logo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nickname":
                            nickname = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "logo":
                            logo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!location.IsSet)
                throw new ArgumentException("Property is required for class DraftTeam.", nameof(location));

            if (!nickname.IsSet)
                throw new ArgumentException("Property is required for class DraftTeam.", nameof(nickname));

            if (!displayName.IsSet)
                throw new ArgumentException("Property is required for class DraftTeam.", nameof(displayName));

            if (!logo.IsSet)
                throw new ArgumentException("Property is required for class DraftTeam.", nameof(logo));

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class DraftTeam.");

            return new DraftTeam(location.Value!, nickname.Value!, displayName.Value!, logo.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DraftTeam" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="draftTeam"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DraftTeam draftTeam, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, draftTeam, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DraftTeam" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="draftTeam"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DraftTeam draftTeam, JsonSerializerOptions jsonSerializerOptions)
        {
            if (draftTeam.Location == null)
                throw new ArgumentNullException(nameof(draftTeam.Location), "Property is required for class DraftTeam.");

            writer.WriteString("location", draftTeam.Location);

            if (draftTeam.Nickname != null)
                writer.WriteString("nickname", draftTeam.Nickname);
            else
                writer.WriteNull("nickname");

            if (draftTeam.DisplayName != null)
                writer.WriteString("displayName", draftTeam.DisplayName);
            else
                writer.WriteNull("displayName");

            if (draftTeam.Logo != null)
                writer.WriteString("logo", draftTeam.Logo);
            else
                writer.WriteNull("logo");
        }
    }
}
