/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// GameLine
    /// </summary>
    [DataContract(Name = "GameLine")]
    public partial class GameLine : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameLine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GameLine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameLine" /> class.
        /// </summary>
        /// <param name="provider">provider (required).</param>
        /// <param name="spread">spread (required).</param>
        /// <param name="formattedSpread">formattedSpread (required).</param>
        /// <param name="spreadOpen">spreadOpen (required).</param>
        /// <param name="overUnder">overUnder (required).</param>
        /// <param name="overUnderOpen">overUnderOpen (required).</param>
        /// <param name="homeMoneyline">homeMoneyline (required).</param>
        /// <param name="awayMoneyline">awayMoneyline (required).</param>
        public GameLine(string provider = default(string), double? spread = default(double?), string formattedSpread = default(string), double? spreadOpen = default(double?), double? overUnder = default(double?), double? overUnderOpen = default(double?), double? homeMoneyline = default(double?), double? awayMoneyline = default(double?))
        {
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new ArgumentNullException("provider is a required property for GameLine and cannot be null");
            }
            this.Provider = provider;
            // to ensure "spread" is required (not null)
            if (spread == null)
            {
                throw new ArgumentNullException("spread is a required property for GameLine and cannot be null");
            }
            this.Spread = spread;
            // to ensure "formattedSpread" is required (not null)
            if (formattedSpread == null)
            {
                throw new ArgumentNullException("formattedSpread is a required property for GameLine and cannot be null");
            }
            this.FormattedSpread = formattedSpread;
            // to ensure "spreadOpen" is required (not null)
            if (spreadOpen == null)
            {
                throw new ArgumentNullException("spreadOpen is a required property for GameLine and cannot be null");
            }
            this.SpreadOpen = spreadOpen;
            // to ensure "overUnder" is required (not null)
            if (overUnder == null)
            {
                throw new ArgumentNullException("overUnder is a required property for GameLine and cannot be null");
            }
            this.OverUnder = overUnder;
            // to ensure "overUnderOpen" is required (not null)
            if (overUnderOpen == null)
            {
                throw new ArgumentNullException("overUnderOpen is a required property for GameLine and cannot be null");
            }
            this.OverUnderOpen = overUnderOpen;
            // to ensure "homeMoneyline" is required (not null)
            if (homeMoneyline == null)
            {
                throw new ArgumentNullException("homeMoneyline is a required property for GameLine and cannot be null");
            }
            this.HomeMoneyline = homeMoneyline;
            // to ensure "awayMoneyline" is required (not null)
            if (awayMoneyline == null)
            {
                throw new ArgumentNullException("awayMoneyline is a required property for GameLine and cannot be null");
            }
            this.AwayMoneyline = awayMoneyline;
        }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", IsRequired = true, EmitDefaultValue = true)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name = "spread", IsRequired = true, EmitDefaultValue = true)]
        public double? Spread { get; set; }

        /// <summary>
        /// Gets or Sets FormattedSpread
        /// </summary>
        [DataMember(Name = "formattedSpread", IsRequired = true, EmitDefaultValue = true)]
        public string FormattedSpread { get; set; }

        /// <summary>
        /// Gets or Sets SpreadOpen
        /// </summary>
        [DataMember(Name = "spreadOpen", IsRequired = true, EmitDefaultValue = true)]
        public double? SpreadOpen { get; set; }

        /// <summary>
        /// Gets or Sets OverUnder
        /// </summary>
        [DataMember(Name = "overUnder", IsRequired = true, EmitDefaultValue = true)]
        public double? OverUnder { get; set; }

        /// <summary>
        /// Gets or Sets OverUnderOpen
        /// </summary>
        [DataMember(Name = "overUnderOpen", IsRequired = true, EmitDefaultValue = true)]
        public double? OverUnderOpen { get; set; }

        /// <summary>
        /// Gets or Sets HomeMoneyline
        /// </summary>
        [DataMember(Name = "homeMoneyline", IsRequired = true, EmitDefaultValue = true)]
        public double? HomeMoneyline { get; set; }

        /// <summary>
        /// Gets or Sets AwayMoneyline
        /// </summary>
        [DataMember(Name = "awayMoneyline", IsRequired = true, EmitDefaultValue = true)]
        public double? AwayMoneyline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GameLine {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  FormattedSpread: ").Append(FormattedSpread).Append("\n");
            sb.Append("  SpreadOpen: ").Append(SpreadOpen).Append("\n");
            sb.Append("  OverUnder: ").Append(OverUnder).Append("\n");
            sb.Append("  OverUnderOpen: ").Append(OverUnderOpen).Append("\n");
            sb.Append("  HomeMoneyline: ").Append(HomeMoneyline).Append("\n");
            sb.Append("  AwayMoneyline: ").Append(AwayMoneyline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
