// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.11
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// TeamSPDefense
    /// </summary>
    public partial class TeamSPDefense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamSPDefense" /> class.
        /// </summary>
        /// <param name="havoc">havoc</param>
        /// <param name="rating">rating</param>
        /// <param name="passingDowns">passingDowns</param>
        /// <param name="standardDowns">standardDowns</param>
        /// <param name="passing">passing</param>
        /// <param name="rushing">rushing</param>
        /// <param name="explosiveness">explosiveness</param>
        /// <param name="success">success</param>
        /// <param name="ranking">ranking</param>
        [JsonConstructor]
        public TeamSPDefense(AdvancedSeasonStatOffenseHavoc havoc, double rating, double? passingDowns = default, double? standardDowns = default, double? passing = default, double? rushing = default, double? explosiveness = default, double? success = default, int? ranking = default)
        {
            Havoc = havoc;
            Rating = rating;
            PassingDowns = passingDowns;
            StandardDowns = standardDowns;
            Passing = passing;
            Rushing = rushing;
            Explosiveness = explosiveness;
            Success = success;
            Ranking = ranking;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Havoc
        /// </summary>
        [JsonPropertyName("havoc")]
        public AdvancedSeasonStatOffenseHavoc Havoc { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public double Rating { get; set; }

        /// <summary>
        /// Gets or Sets PassingDowns
        /// </summary>
        [JsonPropertyName("passingDowns")]
        public double? PassingDowns { get; set; }

        /// <summary>
        /// Gets or Sets StandardDowns
        /// </summary>
        [JsonPropertyName("standardDowns")]
        public double? StandardDowns { get; set; }

        /// <summary>
        /// Gets or Sets Passing
        /// </summary>
        [JsonPropertyName("passing")]
        public double? Passing { get; set; }

        /// <summary>
        /// Gets or Sets Rushing
        /// </summary>
        [JsonPropertyName("rushing")]
        public double? Rushing { get; set; }

        /// <summary>
        /// Gets or Sets Explosiveness
        /// </summary>
        [JsonPropertyName("explosiveness")]
        public double? Explosiveness { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public double? Success { get; set; }

        /// <summary>
        /// Gets or Sets Ranking
        /// </summary>
        [JsonPropertyName("ranking")]
        public int? Ranking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamSPDefense {\n");
            sb.Append("  Havoc: ").Append(Havoc).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  PassingDowns: ").Append(PassingDowns).Append("\n");
            sb.Append("  StandardDowns: ").Append(StandardDowns).Append("\n");
            sb.Append("  Passing: ").Append(Passing).Append("\n");
            sb.Append("  Rushing: ").Append(Rushing).Append("\n");
            sb.Append("  Explosiveness: ").Append(Explosiveness).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Ranking: ").Append(Ranking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TeamSPDefense" />
    /// </summary>
    public class TeamSPDefenseJsonConverter : JsonConverter<TeamSPDefense>
    {
        /// <summary>
        /// Deserializes json to <see cref="TeamSPDefense" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TeamSPDefense Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AdvancedSeasonStatOffenseHavoc?> havoc = default;
            Option<double?> rating = default;
            Option<double?> passingDowns = default;
            Option<double?> standardDowns = default;
            Option<double?> passing = default;
            Option<double?> rushing = default;
            Option<double?> explosiveness = default;
            Option<double?> success = default;
            Option<int?> ranking = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "havoc":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                havoc = new Option<AdvancedSeasonStatOffenseHavoc?>(JsonSerializer.Deserialize<AdvancedSeasonStatOffenseHavoc>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rating":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rating = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "passingDowns":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passingDowns = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "standardDowns":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standardDowns = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "passing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passing = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "rushing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rushing = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "explosiveness":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                explosiveness = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "success":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                success = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ranking":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ranking = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!havoc.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(havoc));

            if (!rating.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(rating));

            if (!passingDowns.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(passingDowns));

            if (!standardDowns.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(standardDowns));

            if (!passing.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(passing));

            if (!rushing.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(rushing));

            if (!explosiveness.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(explosiveness));

            if (!success.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(success));

            if (!ranking.IsSet)
                throw new ArgumentException("Property is required for class TeamSPDefense.", nameof(ranking));

            if (havoc.IsSet && havoc.Value == null)
                throw new ArgumentNullException(nameof(havoc), "Property is not nullable for class TeamSPDefense.");

            if (rating.IsSet && rating.Value == null)
                throw new ArgumentNullException(nameof(rating), "Property is not nullable for class TeamSPDefense.");

            return new TeamSPDefense(havoc.Value!, rating.Value!.Value!, passingDowns.Value!, standardDowns.Value!, passing.Value!, rushing.Value!, explosiveness.Value!, success.Value!, ranking.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TeamSPDefense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="teamSPDefense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TeamSPDefense teamSPDefense, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, teamSPDefense, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TeamSPDefense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="teamSPDefense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TeamSPDefense teamSPDefense, JsonSerializerOptions jsonSerializerOptions)
        {
            if (teamSPDefense.Havoc == null)
                throw new ArgumentNullException(nameof(teamSPDefense.Havoc), "Property is required for class TeamSPDefense.");

            writer.WritePropertyName("havoc");
            JsonSerializer.Serialize(writer, teamSPDefense.Havoc, jsonSerializerOptions);
            writer.WriteNumber("rating", teamSPDefense.Rating);

            if (teamSPDefense.PassingDowns != null)
                writer.WriteNumber("passingDowns", teamSPDefense.PassingDowns.Value);
            else
                writer.WriteNull("passingDowns");

            if (teamSPDefense.StandardDowns != null)
                writer.WriteNumber("standardDowns", teamSPDefense.StandardDowns.Value);
            else
                writer.WriteNull("standardDowns");

            if (teamSPDefense.Passing != null)
                writer.WriteNumber("passing", teamSPDefense.Passing.Value);
            else
                writer.WriteNull("passing");

            if (teamSPDefense.Rushing != null)
                writer.WriteNumber("rushing", teamSPDefense.Rushing.Value);
            else
                writer.WriteNull("rushing");

            if (teamSPDefense.Explosiveness != null)
                writer.WriteNumber("explosiveness", teamSPDefense.Explosiveness.Value);
            else
                writer.WriteNull("explosiveness");

            if (teamSPDefense.Success != null)
                writer.WriteNumber("success", teamSPDefense.Success.Value);
            else
                writer.WriteNull("success");

            if (teamSPDefense.Ranking != null)
                writer.WriteNumber("ranking", teamSPDefense.Ranking.Value);
            else
                writer.WriteNull("ranking");
        }
    }
}
