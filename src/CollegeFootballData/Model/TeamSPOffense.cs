// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.23
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// TeamSPOffense
    /// </summary>
    public partial class TeamSPOffense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamSPOffense" /> class.
        /// </summary>
        /// <param name="rating">rating</param>
        /// <param name="pace">pace</param>
        /// <param name="runRate">runRate</param>
        /// <param name="passingDowns">passingDowns</param>
        /// <param name="standardDowns">standardDowns</param>
        /// <param name="passing">passing</param>
        /// <param name="rushing">rushing</param>
        /// <param name="explosiveness">explosiveness</param>
        /// <param name="success">success</param>
        /// <param name="ranking">ranking</param>
        [JsonConstructor]
        public TeamSPOffense(double rating, double? pace = default, double? runRate = default, double? passingDowns = default, double? standardDowns = default, double? passing = default, double? rushing = default, double? explosiveness = default, double? success = default, int? ranking = default)
        {
            Rating = rating;
            Pace = pace;
            RunRate = runRate;
            PassingDowns = passingDowns;
            StandardDowns = standardDowns;
            Passing = passing;
            Rushing = rushing;
            Explosiveness = explosiveness;
            Success = success;
            Ranking = ranking;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public double Rating { get; set; }

        /// <summary>
        /// Gets or Sets Pace
        /// </summary>
        [JsonPropertyName("pace")]
        public double? Pace { get; set; }

        /// <summary>
        /// Gets or Sets RunRate
        /// </summary>
        [JsonPropertyName("runRate")]
        public double? RunRate { get; set; }

        /// <summary>
        /// Gets or Sets PassingDowns
        /// </summary>
        [JsonPropertyName("passingDowns")]
        public double? PassingDowns { get; set; }

        /// <summary>
        /// Gets or Sets StandardDowns
        /// </summary>
        [JsonPropertyName("standardDowns")]
        public double? StandardDowns { get; set; }

        /// <summary>
        /// Gets or Sets Passing
        /// </summary>
        [JsonPropertyName("passing")]
        public double? Passing { get; set; }

        /// <summary>
        /// Gets or Sets Rushing
        /// </summary>
        [JsonPropertyName("rushing")]
        public double? Rushing { get; set; }

        /// <summary>
        /// Gets or Sets Explosiveness
        /// </summary>
        [JsonPropertyName("explosiveness")]
        public double? Explosiveness { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public double? Success { get; set; }

        /// <summary>
        /// Gets or Sets Ranking
        /// </summary>
        [JsonPropertyName("ranking")]
        public int? Ranking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamSPOffense {\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Pace: ").Append(Pace).Append("\n");
            sb.Append("  RunRate: ").Append(RunRate).Append("\n");
            sb.Append("  PassingDowns: ").Append(PassingDowns).Append("\n");
            sb.Append("  StandardDowns: ").Append(StandardDowns).Append("\n");
            sb.Append("  Passing: ").Append(Passing).Append("\n");
            sb.Append("  Rushing: ").Append(Rushing).Append("\n");
            sb.Append("  Explosiveness: ").Append(Explosiveness).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Ranking: ").Append(Ranking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TeamSPOffense" />
    /// </summary>
    public class TeamSPOffenseJsonConverter : JsonConverter<TeamSPOffense>
    {
        /// <summary>
        /// Deserializes json to <see cref="TeamSPOffense" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TeamSPOffense Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> rating = default;
            Option<double?> pace = default;
            Option<double?> runRate = default;
            Option<double?> passingDowns = default;
            Option<double?> standardDowns = default;
            Option<double?> passing = default;
            Option<double?> rushing = default;
            Option<double?> explosiveness = default;
            Option<double?> success = default;
            Option<int?> ranking = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rating":
                            rating = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "pace":
                            pace = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "runRate":
                            runRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "passingDowns":
                            passingDowns = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "standardDowns":
                            standardDowns = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "passing":
                            passing = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "rushing":
                            rushing = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "explosiveness":
                            explosiveness = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "success":
                            success = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ranking":
                            ranking = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!rating.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(rating));

            if (!pace.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(pace));

            if (!runRate.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(runRate));

            if (!passingDowns.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(passingDowns));

            if (!standardDowns.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(standardDowns));

            if (!passing.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(passing));

            if (!rushing.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(rushing));

            if (!explosiveness.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(explosiveness));

            if (!success.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(success));

            if (!ranking.IsSet)
                throw new ArgumentException("Property is required for class TeamSPOffense.", nameof(ranking));

            if (rating.IsSet && rating.Value == null)
                throw new ArgumentNullException(nameof(rating), "Property is not nullable for class TeamSPOffense.");

            return new TeamSPOffense(rating.Value!.Value!, pace.Value!, runRate.Value!, passingDowns.Value!, standardDowns.Value!, passing.Value!, rushing.Value!, explosiveness.Value!, success.Value!, ranking.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TeamSPOffense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="teamSPOffense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TeamSPOffense teamSPOffense, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, teamSPOffense, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TeamSPOffense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="teamSPOffense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TeamSPOffense teamSPOffense, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("rating", teamSPOffense.Rating);

            if (teamSPOffense.Pace != null)
                writer.WriteNumber("pace", teamSPOffense.Pace.Value);
            else
                writer.WriteNull("pace");

            if (teamSPOffense.RunRate != null)
                writer.WriteNumber("runRate", teamSPOffense.RunRate.Value);
            else
                writer.WriteNull("runRate");

            if (teamSPOffense.PassingDowns != null)
                writer.WriteNumber("passingDowns", teamSPOffense.PassingDowns.Value);
            else
                writer.WriteNull("passingDowns");

            if (teamSPOffense.StandardDowns != null)
                writer.WriteNumber("standardDowns", teamSPOffense.StandardDowns.Value);
            else
                writer.WriteNull("standardDowns");

            if (teamSPOffense.Passing != null)
                writer.WriteNumber("passing", teamSPOffense.Passing.Value);
            else
                writer.WriteNull("passing");

            if (teamSPOffense.Rushing != null)
                writer.WriteNumber("rushing", teamSPOffense.Rushing.Value);
            else
                writer.WriteNull("rushing");

            if (teamSPOffense.Explosiveness != null)
                writer.WriteNumber("explosiveness", teamSPOffense.Explosiveness.Value);
            else
                writer.WriteNull("explosiveness");

            if (teamSPOffense.Success != null)
                writer.WriteNumber("success", teamSPOffense.Success.Value);
            else
                writer.WriteNull("success");

            if (teamSPOffense.Ranking != null)
                writer.WriteNumber("ranking", teamSPOffense.Ranking.Value);
            else
                writer.WriteNull("ranking");
        }
    }
}
