/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.3
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// ConferenceSP
    /// </summary>
    [DataContract(Name = "ConferenceSP")]
    public partial class ConferenceSP : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConferenceSP" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConferenceSP() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConferenceSP" /> class.
        /// </summary>
        /// <param name="year">year (required).</param>
        /// <param name="conference">conference (required).</param>
        /// <param name="rating">rating (required).</param>
        /// <param name="secondOrderWins">secondOrderWins (required).</param>
        /// <param name="sos">sos (required).</param>
        /// <param name="offense">offense (required).</param>
        /// <param name="defense">defense (required).</param>
        /// <param name="specialTeams">specialTeams (required).</param>
        public ConferenceSP(int year = default(int), string conference = default(string), double rating = default(double), double? secondOrderWins = default(double?), double? sos = default(double?), ConferenceSPOffense offense = default(ConferenceSPOffense), ConferenceSPDefense defense = default(ConferenceSPDefense), TeamSPSpecialTeams specialTeams = default(TeamSPSpecialTeams))
        {
            this.Year = year;
            // to ensure "conference" is required (not null)
            if (conference == null)
            {
                throw new ArgumentNullException("conference is a required property for ConferenceSP and cannot be null");
            }
            this.Conference = conference;
            this.Rating = rating;
            // to ensure "secondOrderWins" is required (not null)
            if (secondOrderWins == null)
            {
                throw new ArgumentNullException("secondOrderWins is a required property for ConferenceSP and cannot be null");
            }
            this.SecondOrderWins = secondOrderWins;
            // to ensure "sos" is required (not null)
            if (sos == null)
            {
                throw new ArgumentNullException("sos is a required property for ConferenceSP and cannot be null");
            }
            this.Sos = sos;
            // to ensure "offense" is required (not null)
            if (offense == null)
            {
                throw new ArgumentNullException("offense is a required property for ConferenceSP and cannot be null");
            }
            this.Offense = offense;
            // to ensure "defense" is required (not null)
            if (defense == null)
            {
                throw new ArgumentNullException("defense is a required property for ConferenceSP and cannot be null");
            }
            this.Defense = defense;
            // to ensure "specialTeams" is required (not null)
            if (specialTeams == null)
            {
                throw new ArgumentNullException("specialTeams is a required property for ConferenceSP and cannot be null");
            }
            this.SpecialTeams = specialTeams;
        }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [DataMember(Name = "conference", IsRequired = true, EmitDefaultValue = true)]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public double Rating { get; set; }

        /// <summary>
        /// Gets or Sets SecondOrderWins
        /// </summary>
        [DataMember(Name = "secondOrderWins", IsRequired = true, EmitDefaultValue = true)]
        public double? SecondOrderWins { get; set; }

        /// <summary>
        /// Gets or Sets Sos
        /// </summary>
        [DataMember(Name = "sos", IsRequired = true, EmitDefaultValue = true)]
        public double? Sos { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [DataMember(Name = "offense", IsRequired = true, EmitDefaultValue = true)]
        public ConferenceSPOffense Offense { get; set; }

        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [DataMember(Name = "defense", IsRequired = true, EmitDefaultValue = true)]
        public ConferenceSPDefense Defense { get; set; }

        /// <summary>
        /// Gets or Sets SpecialTeams
        /// </summary>
        [DataMember(Name = "specialTeams", IsRequired = true, EmitDefaultValue = true)]
        public TeamSPSpecialTeams SpecialTeams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConferenceSP {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  SecondOrderWins: ").Append(SecondOrderWins).Append("\n");
            sb.Append("  Sos: ").Append(Sos).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  SpecialTeams: ").Append(SpecialTeams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
