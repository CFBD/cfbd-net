// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.20
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// BettingGame
    /// </summary>
    public partial class BettingGame : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BettingGame" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="season">season</param>
        /// <param name="seasonType">seasonType</param>
        /// <param name="week">week</param>
        /// <param name="startDate">startDate</param>
        /// <param name="homeTeam">homeTeam</param>
        /// <param name="awayTeam">awayTeam</param>
        /// <param name="lines">lines</param>
        /// <param name="homeConference">homeConference</param>
        /// <param name="homeClassification">homeClassification</param>
        /// <param name="homeScore">homeScore</param>
        /// <param name="awayConference">awayConference</param>
        /// <param name="awayClassification">awayClassification</param>
        /// <param name="awayScore">awayScore</param>
        [JsonConstructor]
        public BettingGame(int id, int season, SeasonType seasonType, int week, DateTime startDate, string homeTeam, string awayTeam, List<GameLine> lines, string? homeConference = default, DivisionClassification? homeClassification = default, int? homeScore = default, string? awayConference = default, DivisionClassification? awayClassification = default, int? awayScore = default)
        {
            Id = id;
            Season = season;
            SeasonType = seasonType;
            Week = week;
            StartDate = startDate;
            HomeTeam = homeTeam;
            AwayTeam = awayTeam;
            Lines = lines;
            HomeConference = homeConference;
            HomeClassification = homeClassification;
            HomeScore = homeScore;
            AwayConference = awayConference;
            AwayClassification = awayClassification;
            AwayScore = awayScore;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [JsonPropertyName("seasonType")]
        public SeasonType SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets HomeClassification
        /// </summary>
        [JsonPropertyName("homeClassification")]
        public DivisionClassification? HomeClassification { get; set; }

        /// <summary>
        /// Gets or Sets AwayClassification
        /// </summary>
        [JsonPropertyName("awayClassification")]
        public DivisionClassification? AwayClassification { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [JsonPropertyName("season")]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [JsonPropertyName("week")]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [JsonPropertyName("homeTeam")]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [JsonPropertyName("awayTeam")]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [JsonPropertyName("lines")]
        public List<GameLine> Lines { get; set; }

        /// <summary>
        /// Gets or Sets HomeConference
        /// </summary>
        [JsonPropertyName("homeConference")]
        public string? HomeConference { get; set; }

        /// <summary>
        /// Gets or Sets HomeScore
        /// </summary>
        [JsonPropertyName("homeScore")]
        public int? HomeScore { get; set; }

        /// <summary>
        /// Gets or Sets AwayConference
        /// </summary>
        [JsonPropertyName("awayConference")]
        public string? AwayConference { get; set; }

        /// <summary>
        /// Gets or Sets AwayScore
        /// </summary>
        [JsonPropertyName("awayScore")]
        public int? AwayScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BettingGame {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  HomeConference: ").Append(HomeConference).Append("\n");
            sb.Append("  HomeClassification: ").Append(HomeClassification).Append("\n");
            sb.Append("  HomeScore: ").Append(HomeScore).Append("\n");
            sb.Append("  AwayConference: ").Append(AwayConference).Append("\n");
            sb.Append("  AwayClassification: ").Append(AwayClassification).Append("\n");
            sb.Append("  AwayScore: ").Append(AwayScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BettingGame" />
    /// </summary>
    public class BettingGameJsonConverter : JsonConverter<BettingGame>
    {
        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BettingGame" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BettingGame Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> season = default;
            Option<SeasonType?> seasonType = default;
            Option<int?> week = default;
            Option<DateTime?> startDate = default;
            Option<string?> homeTeam = default;
            Option<string?> awayTeam = default;
            Option<List<GameLine>?> lines = default;
            Option<string?> homeConference = default;
            Option<DivisionClassification?> homeClassification = default;
            Option<int?> homeScore = default;
            Option<string?> awayConference = default;
            Option<DivisionClassification?> awayClassification = default;
            Option<int?> awayScore = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "season":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                season = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "seasonType":
                            string? seasonTypeRawValue = utf8JsonReader.GetString();
                            if (seasonTypeRawValue != null)
                                seasonType = new Option<SeasonType?>(SeasonTypeValueConverter.FromStringOrDefault(seasonTypeRawValue));
                            break;
                        case "week":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                week = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "startDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "homeTeam":
                            homeTeam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "awayTeam":
                            awayTeam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lines":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lines = new Option<List<GameLine>?>(JsonSerializer.Deserialize<List<GameLine>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "homeConference":
                            homeConference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "homeClassification":
                            string? homeClassificationRawValue = utf8JsonReader.GetString();
                            if (homeClassificationRawValue != null)
                                homeClassification = new Option<DivisionClassification?>(DivisionClassificationValueConverter.FromStringOrDefault(homeClassificationRawValue));
                            break;
                        case "homeScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homeScore = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "awayConference":
                            awayConference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "awayClassification":
                            string? awayClassificationRawValue = utf8JsonReader.GetString();
                            if (awayClassificationRawValue != null)
                                awayClassification = new Option<DivisionClassification?>(DivisionClassificationValueConverter.FromStringOrDefault(awayClassificationRawValue));
                            break;
                        case "awayScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                awayScore = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(id));

            if (!season.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(season));

            if (!seasonType.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(seasonType));

            if (!week.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(week));

            if (!startDate.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(startDate));

            if (!homeTeam.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(homeTeam));

            if (!awayTeam.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(awayTeam));

            if (!lines.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(lines));

            if (!homeConference.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(homeConference));

            if (!homeClassification.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(homeClassification));

            if (!homeScore.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(homeScore));

            if (!awayConference.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(awayConference));

            if (!awayClassification.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(awayClassification));

            if (!awayScore.IsSet)
                throw new ArgumentException("Property is required for class BettingGame.", nameof(awayScore));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BettingGame.");

            if (season.IsSet && season.Value == null)
                throw new ArgumentNullException(nameof(season), "Property is not nullable for class BettingGame.");

            if (seasonType.IsSet && seasonType.Value == null)
                throw new ArgumentNullException(nameof(seasonType), "Property is not nullable for class BettingGame.");

            if (week.IsSet && week.Value == null)
                throw new ArgumentNullException(nameof(week), "Property is not nullable for class BettingGame.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class BettingGame.");

            if (homeTeam.IsSet && homeTeam.Value == null)
                throw new ArgumentNullException(nameof(homeTeam), "Property is not nullable for class BettingGame.");

            if (awayTeam.IsSet && awayTeam.Value == null)
                throw new ArgumentNullException(nameof(awayTeam), "Property is not nullable for class BettingGame.");

            if (lines.IsSet && lines.Value == null)
                throw new ArgumentNullException(nameof(lines), "Property is not nullable for class BettingGame.");

            return new BettingGame(id.Value!.Value!, season.Value!.Value!, seasonType.Value!.Value!, week.Value!.Value!, startDate.Value!.Value!, homeTeam.Value!, awayTeam.Value!, lines.Value!, homeConference.Value!, homeClassification.Value!, homeScore.Value!, awayConference.Value!, awayClassification.Value!, awayScore.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="BettingGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bettingGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BettingGame bettingGame, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bettingGame, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BettingGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bettingGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BettingGame bettingGame, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bettingGame.HomeTeam == null)
                throw new ArgumentNullException(nameof(bettingGame.HomeTeam), "Property is required for class BettingGame.");

            if (bettingGame.AwayTeam == null)
                throw new ArgumentNullException(nameof(bettingGame.AwayTeam), "Property is required for class BettingGame.");

            if (bettingGame.Lines == null)
                throw new ArgumentNullException(nameof(bettingGame.Lines), "Property is required for class BettingGame.");

            writer.WriteNumber("id", bettingGame.Id);

            writer.WriteNumber("season", bettingGame.Season);

            var seasonTypeRawValue = SeasonTypeValueConverter.ToJsonValue(bettingGame.SeasonType);
            writer.WriteString("seasonType", seasonTypeRawValue);

            writer.WriteNumber("week", bettingGame.Week);

            writer.WriteString("startDate", bettingGame.StartDate.ToString(StartDateFormat));

            writer.WriteString("homeTeam", bettingGame.HomeTeam);

            writer.WriteString("awayTeam", bettingGame.AwayTeam);

            writer.WritePropertyName("lines");
            JsonSerializer.Serialize(writer, bettingGame.Lines, jsonSerializerOptions);
            if (bettingGame.HomeConference != null)
                writer.WriteString("homeConference", bettingGame.HomeConference);
            else
                writer.WriteNull("homeConference");

            if (bettingGame.HomeClassification == null)
                writer.WriteNull("homeClassification");
            else
            {
                var homeClassificationRawValue = DivisionClassificationValueConverter.ToJsonValue(bettingGame.HomeClassification.Value);
                if (homeClassificationRawValue != null)
                    writer.WriteString("homeClassification", homeClassificationRawValue);
                else
                    writer.WriteNull("homeClassification");
            }

            if (bettingGame.HomeScore != null)
                writer.WriteNumber("homeScore", bettingGame.HomeScore.Value);
            else
                writer.WriteNull("homeScore");

            if (bettingGame.AwayConference != null)
                writer.WriteString("awayConference", bettingGame.AwayConference);
            else
                writer.WriteNull("awayConference");

            if (bettingGame.AwayClassification == null)
                writer.WriteNull("awayClassification");
            else
            {
                var awayClassificationRawValue = DivisionClassificationValueConverter.ToJsonValue(bettingGame.AwayClassification.Value);
                if (awayClassificationRawValue != null)
                    writer.WriteString("awayClassification", awayClassificationRawValue);
                else
                    writer.WriteNull("awayClassification");
            }

            if (bettingGame.AwayScore != null)
                writer.WriteNumber("awayScore", bettingGame.AwayScore.Value);
            else
                writer.WriteNull("awayScore");
        }
    }
}
