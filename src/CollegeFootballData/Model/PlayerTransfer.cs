/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayerTransfer
    /// </summary>
    [DataContract(Name = "PlayerTransfer")]
    public partial class PlayerTransfer : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Eligibility
        /// </summary>
        [DataMember(Name = "eligibility", IsRequired = true, EmitDefaultValue = true)]
        public TransferEligibility Eligibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerTransfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayerTransfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerTransfer" /> class.
        /// </summary>
        /// <param name="season">season (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="origin">origin (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="transferDate">transferDate (required).</param>
        /// <param name="rating">rating (required).</param>
        /// <param name="stars">stars (required).</param>
        /// <param name="eligibility">eligibility (required).</param>
        public PlayerTransfer(int season = default(int), string firstName = default(string), string lastName = default(string), string position = default(string), string origin = default(string), string destination = default(string), DateTime? transferDate = default(DateTime?), double? rating = default(double?), int? stars = default(int?), TransferEligibility eligibility = default(TransferEligibility))
        {
            this.Season = season;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for PlayerTransfer and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for PlayerTransfer and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for PlayerTransfer and cannot be null");
            }
            this.Position = position;
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for PlayerTransfer and cannot be null");
            }
            this.Origin = origin;
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for PlayerTransfer and cannot be null");
            }
            this.Destination = destination;
            // to ensure "transferDate" is required (not null)
            if (transferDate == null)
            {
                throw new ArgumentNullException("transferDate is a required property for PlayerTransfer and cannot be null");
            }
            this.TransferDate = transferDate;
            // to ensure "rating" is required (not null)
            if (rating == null)
            {
                throw new ArgumentNullException("rating is a required property for PlayerTransfer and cannot be null");
            }
            this.Rating = rating;
            // to ensure "stars" is required (not null)
            if (stars == null)
            {
                throw new ArgumentNullException("stars is a required property for PlayerTransfer and cannot be null");
            }
            this.Stars = stars;
            this.Eligibility = eligibility;
        }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name = "season", IsRequired = true, EmitDefaultValue = true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = true)]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets TransferDate
        /// </summary>
        [DataMember(Name = "transferDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? TransferDate { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public double? Rating { get; set; }

        /// <summary>
        /// Gets or Sets Stars
        /// </summary>
        [DataMember(Name = "stars", IsRequired = true, EmitDefaultValue = true)]
        public int? Stars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerTransfer {\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  TransferDate: ").Append(TransferDate).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Stars: ").Append(Stars).Append("\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
