// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.7.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayerTransfer
    /// </summary>
    public partial class PlayerTransfer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerTransfer" /> class.
        /// </summary>
        /// <param name="season">season</param>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="position">position</param>
        /// <param name="origin">origin</param>
        /// <param name="destination">destination</param>
        /// <param name="transferDate">transferDate</param>
        /// <param name="rating">rating</param>
        /// <param name="stars">stars</param>
        /// <param name="eligibility">eligibility</param>
        [JsonConstructor]
        public PlayerTransfer(int season, string firstName, string lastName, string position, string origin, string? destination = default, DateTime? transferDate = default, double? rating = default, int? stars = default, TransferEligibility? eligibility = default)
        {
            Season = season;
            FirstName = firstName;
            LastName = lastName;
            Position = position;
            Origin = origin;
            Destination = destination;
            TransferDate = transferDate;
            Rating = rating;
            Stars = stars;
            Eligibility = eligibility;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Eligibility
        /// </summary>
        [JsonPropertyName("eligibility")]
        public TransferEligibility? Eligibility { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [JsonPropertyName("season")]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [JsonPropertyName("position")]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [JsonPropertyName("origin")]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [JsonPropertyName("destination")]
        public string? Destination { get; set; }

        /// <summary>
        /// Gets or Sets TransferDate
        /// </summary>
        [JsonPropertyName("transferDate")]
        public DateTime? TransferDate { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public double? Rating { get; set; }

        /// <summary>
        /// Gets or Sets Stars
        /// </summary>
        [JsonPropertyName("stars")]
        public int? Stars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerTransfer {\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  TransferDate: ").Append(TransferDate).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Stars: ").Append(Stars).Append("\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerTransfer" />
    /// </summary>
    public class PlayerTransferJsonConverter : JsonConverter<PlayerTransfer>
    {
        /// <summary>
        /// The format to use to serialize TransferDate
        /// </summary>
        public static string TransferDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PlayerTransfer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerTransfer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> season = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> position = default;
            Option<string?> origin = default;
            Option<string?> destination = default;
            Option<DateTime?> transferDate = default;
            Option<double?> rating = default;
            Option<int?> stars = default;
            Option<TransferEligibility?> eligibility = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "season":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                season = new Option<int?>(utf8JsonReader.GetInt32());
                            else
                                season = null;
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "position":
                            position = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "origin":
                            origin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination":
                            destination = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "transferDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transferDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            else
                                transferDate = null;
                            break;
                        case "rating":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rating = new Option<double?>(utf8JsonReader.GetDouble());
                            else
                                rating = null;
                            break;
                        case "stars":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stars = new Option<int?>(utf8JsonReader.GetInt32());
                            else
                                stars = null;
                            break;
                        case "eligibility":
                            string? eligibilityRawValue = utf8JsonReader.GetString();
                            if (eligibilityRawValue != null)
                                eligibility = new Option<TransferEligibility?>(TransferEligibilityValueConverter.FromStringOrDefault(eligibilityRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!season.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(season));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(lastName));

            if (!position.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(position));

            if (!origin.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(origin));

            if (!destination.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(destination));

            if (!transferDate.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(transferDate));

            if (!rating.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(rating));

            if (!stars.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(stars));

            if (!eligibility.IsSet)
                throw new ArgumentException("Property is required for class PlayerTransfer.", nameof(eligibility));

            if (season.IsSet && season.Value == null)
                throw new ArgumentNullException(nameof(season), "Property is not nullable for class PlayerTransfer.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class PlayerTransfer.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class PlayerTransfer.");

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position), "Property is not nullable for class PlayerTransfer.");

            if (origin.IsSet && origin.Value == null)
                throw new ArgumentNullException(nameof(origin), "Property is not nullable for class PlayerTransfer.");

            return new PlayerTransfer(season.Value!.Value!, firstName.Value!, lastName.Value!, position.Value!, origin.Value!, destination.Value!, transferDate.Value!, rating.Value!, stars.Value!, eligibility.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerTransfer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerTransfer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerTransfer playerTransfer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerTransfer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerTransfer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerTransfer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerTransfer playerTransfer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerTransfer.FirstName == null)
                throw new ArgumentNullException(nameof(playerTransfer.FirstName), "Property is required for class PlayerTransfer.");

            if (playerTransfer.LastName == null)
                throw new ArgumentNullException(nameof(playerTransfer.LastName), "Property is required for class PlayerTransfer.");

            if (playerTransfer.Position == null)
                throw new ArgumentNullException(nameof(playerTransfer.Position), "Property is required for class PlayerTransfer.");

            if (playerTransfer.Origin == null)
                throw new ArgumentNullException(nameof(playerTransfer.Origin), "Property is required for class PlayerTransfer.");

            writer.WriteNumber("season", playerTransfer.Season);

            writer.WriteString("firstName", playerTransfer.FirstName);

            writer.WriteString("lastName", playerTransfer.LastName);

            writer.WriteString("position", playerTransfer.Position);

            writer.WriteString("origin", playerTransfer.Origin);

            if (playerTransfer.Destination != null)
                writer.WriteString("destination", playerTransfer.Destination);
            else
                writer.WriteNull("destination");

            if (playerTransfer.TransferDate != null)
                writer.WriteString("transferDate", playerTransfer.TransferDate.Value.ToString(TransferDateFormat));
            else
                writer.WriteNull("transferDate");

            if (playerTransfer.Rating != null)
                writer.WriteNumber("rating", playerTransfer.Rating.Value);
            else
                writer.WriteNull("rating");

            if (playerTransfer.Stars != null)
                writer.WriteNumber("stars", playerTransfer.Stars.Value);
            else
                writer.WriteNull("stars");

            if (playerTransfer.Eligibility == null)
                writer.WriteNull("eligibility");
            else
            {
                var eligibilityRawValue = TransferEligibilityValueConverter.ToJsonValue(playerTransfer.Eligibility.Value);
                if (eligibilityRawValue != null)
                    writer.WriteString("eligibility", eligibilityRawValue);
                else
                    writer.WriteNull("eligibility");
            }
        }
    }
}
