// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.11
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Conference
    /// </summary>
    public partial class Conference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Conference" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="shortName">shortName</param>
        /// <param name="abbreviation">abbreviation</param>
        /// <param name="classification">classification</param>
        [JsonConstructor]
        public Conference(int id, string name, string? shortName = default, string? abbreviation = default, DivisionClassification? classification = default)
        {
            Id = id;
            Name = name;
            ShortName = shortName;
            Abbreviation = abbreviation;
            Classification = classification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [JsonPropertyName("classification")]
        public DivisionClassification? Classification { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [JsonPropertyName("shortName")]
        public string? ShortName { get; set; }

        /// <summary>
        /// Gets or Sets Abbreviation
        /// </summary>
        [JsonPropertyName("abbreviation")]
        public string? Abbreviation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Conference {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Conference" />
    /// </summary>
    public class ConferenceJsonConverter : JsonConverter<Conference>
    {
        /// <summary>
        /// Deserializes json to <see cref="Conference" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Conference Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> name = default;
            Option<string?> shortName = default;
            Option<string?> abbreviation = default;
            Option<DivisionClassification?> classification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shortName":
                            shortName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "abbreviation":
                            abbreviation = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "classification":
                            string? classificationRawValue = utf8JsonReader.GetString();
                            if (classificationRawValue != null)
                                classification = new Option<DivisionClassification?>(DivisionClassificationValueConverter.FromStringOrDefault(classificationRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Conference.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Conference.", nameof(name));

            if (!shortName.IsSet)
                throw new ArgumentException("Property is required for class Conference.", nameof(shortName));

            if (!abbreviation.IsSet)
                throw new ArgumentException("Property is required for class Conference.", nameof(abbreviation));

            if (!classification.IsSet)
                throw new ArgumentException("Property is required for class Conference.", nameof(classification));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Conference.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Conference.");

            return new Conference(id.Value!.Value!, name.Value!, shortName.Value!, abbreviation.Value!, classification.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Conference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Conference conference, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, conference, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Conference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Conference conference, JsonSerializerOptions jsonSerializerOptions)
        {
            if (conference.Name == null)
                throw new ArgumentNullException(nameof(conference.Name), "Property is required for class Conference.");

            writer.WriteNumber("id", conference.Id);

            writer.WriteString("name", conference.Name);

            if (conference.ShortName != null)
                writer.WriteString("shortName", conference.ShortName);
            else
                writer.WriteNull("shortName");

            if (conference.Abbreviation != null)
                writer.WriteString("abbreviation", conference.Abbreviation);
            else
                writer.WriteNull("abbreviation");

            if (conference.Classification == null)
                writer.WriteNull("classification");
            else
            {
                var classificationRawValue = DivisionClassificationValueConverter.ToJsonValue(conference.Classification.Value);
                if (classificationRawValue != null)
                    writer.WriteString("classification", classificationRawValue);
                else
                    writer.WriteNull("classification");
            }
        }
    }
}
