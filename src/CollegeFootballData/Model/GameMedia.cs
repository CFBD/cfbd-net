/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// GameMedia
    /// </summary>
    [DataContract(Name = "GameMedia")]
    public partial class GameMedia : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [DataMember(Name = "seasonType", IsRequired = true, EmitDefaultValue = true)]
        public SeasonType SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets MediaType
        /// </summary>
        [DataMember(Name = "mediaType", IsRequired = true, EmitDefaultValue = true)]
        public MediaType MediaType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameMedia" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GameMedia() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameMedia" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="season">season (required).</param>
        /// <param name="week">week (required).</param>
        /// <param name="seasonType">seasonType (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="isStartTimeTBD">isStartTimeTBD (required).</param>
        /// <param name="homeTeam">homeTeam (required).</param>
        /// <param name="homeConference">homeConference (required).</param>
        /// <param name="awayTeam">awayTeam (required).</param>
        /// <param name="awayConference">awayConference (required).</param>
        /// <param name="mediaType">mediaType (required).</param>
        /// <param name="outlet">outlet (required).</param>
        public GameMedia(int id = default(int), int season = default(int), int week = default(int), SeasonType seasonType = default(SeasonType), DateTime startTime = default(DateTime), bool isStartTimeTBD = default(bool), string homeTeam = default(string), string homeConference = default(string), string awayTeam = default(string), string awayConference = default(string), MediaType mediaType = default(MediaType), string outlet = default(string))
        {
            this.Id = id;
            this.Season = season;
            this.Week = week;
            this.SeasonType = seasonType;
            this.StartTime = startTime;
            this.IsStartTimeTBD = isStartTimeTBD;
            // to ensure "homeTeam" is required (not null)
            if (homeTeam == null)
            {
                throw new ArgumentNullException("homeTeam is a required property for GameMedia and cannot be null");
            }
            this.HomeTeam = homeTeam;
            // to ensure "homeConference" is required (not null)
            if (homeConference == null)
            {
                throw new ArgumentNullException("homeConference is a required property for GameMedia and cannot be null");
            }
            this.HomeConference = homeConference;
            // to ensure "awayTeam" is required (not null)
            if (awayTeam == null)
            {
                throw new ArgumentNullException("awayTeam is a required property for GameMedia and cannot be null");
            }
            this.AwayTeam = awayTeam;
            // to ensure "awayConference" is required (not null)
            if (awayConference == null)
            {
                throw new ArgumentNullException("awayConference is a required property for GameMedia and cannot be null");
            }
            this.AwayConference = awayConference;
            this.MediaType = mediaType;
            // to ensure "outlet" is required (not null)
            if (outlet == null)
            {
                throw new ArgumentNullException("outlet is a required property for GameMedia and cannot be null");
            }
            this.Outlet = outlet;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name = "season", IsRequired = true, EmitDefaultValue = true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name = "week", IsRequired = true, EmitDefaultValue = true)]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets IsStartTimeTBD
        /// </summary>
        [DataMember(Name = "isStartTimeTBD", IsRequired = true, EmitDefaultValue = true)]
        public bool IsStartTimeTBD { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name = "homeTeam", IsRequired = true, EmitDefaultValue = true)]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets HomeConference
        /// </summary>
        [DataMember(Name = "homeConference", IsRequired = true, EmitDefaultValue = true)]
        public string HomeConference { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name = "awayTeam", IsRequired = true, EmitDefaultValue = true)]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets AwayConference
        /// </summary>
        [DataMember(Name = "awayConference", IsRequired = true, EmitDefaultValue = true)]
        public string AwayConference { get; set; }

        /// <summary>
        /// Gets or Sets Outlet
        /// </summary>
        [DataMember(Name = "outlet", IsRequired = true, EmitDefaultValue = true)]
        public string Outlet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GameMedia {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  IsStartTimeTBD: ").Append(IsStartTimeTBD).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  HomeConference: ").Append(HomeConference).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  AwayConference: ").Append(AwayConference).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Outlet: ").Append(Outlet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
