// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.14
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// RecruitHometownInfo
    /// </summary>
    public partial class RecruitHometownInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecruitHometownInfo" /> class.
        /// </summary>
        /// <param name="fipsCode">fipsCode</param>
        /// <param name="longitude">longitude</param>
        /// <param name="latitude">latitude</param>
        [JsonConstructor]
        public RecruitHometownInfo(string? fipsCode = default, double? longitude = default, double? latitude = default)
        {
            FipsCode = fipsCode;
            Longitude = longitude;
            Latitude = latitude;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FipsCode
        /// </summary>
        [JsonPropertyName("fipsCode")]
        public string? FipsCode { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [JsonPropertyName("longitude")]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [JsonPropertyName("latitude")]
        public double? Latitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecruitHometownInfo {\n");
            sb.Append("  FipsCode: ").Append(FipsCode).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecruitHometownInfo" />
    /// </summary>
    public class RecruitHometownInfoJsonConverter : JsonConverter<RecruitHometownInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="RecruitHometownInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecruitHometownInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> fipsCode = default;
            Option<double?> longitude = default;
            Option<double?> latitude = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fipsCode":
                            fipsCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "longitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                longitude = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "latitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                latitude = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fipsCode.IsSet)
                throw new ArgumentException("Property is required for class RecruitHometownInfo.", nameof(fipsCode));

            if (!longitude.IsSet)
                throw new ArgumentException("Property is required for class RecruitHometownInfo.", nameof(longitude));

            if (!latitude.IsSet)
                throw new ArgumentException("Property is required for class RecruitHometownInfo.", nameof(latitude));

            return new RecruitHometownInfo(fipsCode.Value!, longitude.Value!, latitude.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RecruitHometownInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recruitHometownInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecruitHometownInfo recruitHometownInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recruitHometownInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecruitHometownInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recruitHometownInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecruitHometownInfo recruitHometownInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recruitHometownInfo.FipsCode != null)
                writer.WriteString("fipsCode", recruitHometownInfo.FipsCode);
            else
                writer.WriteNull("fipsCode");

            if (recruitHometownInfo.Longitude != null)
                writer.WriteNumber("longitude", recruitHometownInfo.Longitude.Value);
            else
                writer.WriteNull("longitude");

            if (recruitHometownInfo.Latitude != null)
                writer.WriteNumber("latitude", recruitHometownInfo.Latitude.Value);
            else
                writer.WriteNull("latitude");
        }
    }
}
