/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// RecruitHometownInfo
    /// </summary>
    [DataContract(Name = "Recruit_hometownInfo")]
    public partial class RecruitHometownInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecruitHometownInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecruitHometownInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecruitHometownInfo" /> class.
        /// </summary>
        /// <param name="fipsCode">fipsCode (required).</param>
        /// <param name="longitude">longitude (required).</param>
        /// <param name="latitude">latitude (required).</param>
        public RecruitHometownInfo(string fipsCode = default(string), double? longitude = default(double?), double? latitude = default(double?))
        {
            // to ensure "fipsCode" is required (not null)
            if (fipsCode == null)
            {
                throw new ArgumentNullException("fipsCode is a required property for RecruitHometownInfo and cannot be null");
            }
            this.FipsCode = fipsCode;
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new ArgumentNullException("longitude is a required property for RecruitHometownInfo and cannot be null");
            }
            this.Longitude = longitude;
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new ArgumentNullException("latitude is a required property for RecruitHometownInfo and cannot be null");
            }
            this.Latitude = latitude;
        }

        /// <summary>
        /// Gets or Sets FipsCode
        /// </summary>
        [DataMember(Name = "fipsCode", IsRequired = true, EmitDefaultValue = true)]
        public string FipsCode { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", IsRequired = true, EmitDefaultValue = true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", IsRequired = true, EmitDefaultValue = true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecruitHometownInfo {\n");
            sb.Append("  FipsCode: ").Append(FipsCode).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
