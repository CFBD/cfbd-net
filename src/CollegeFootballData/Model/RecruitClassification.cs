// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.15
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Defines RecruitClassification
    /// </summary>
    public enum RecruitClassification
    {
        /// <summary>
        /// Enum JUCO for value: JUCO
        /// </summary>
        JUCO = 1,

        /// <summary>
        /// Enum PrepSchool for value: PrepSchool
        /// </summary>
        PrepSchool = 2,

        /// <summary>
        /// Enum HighSchool for value: HighSchool
        /// </summary>
        HighSchool = 3
    }

    /// <summary>
    /// Converts <see cref="RecruitClassification"/> to and from the JSON value
    /// </summary>
    public static class RecruitClassificationValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RecruitClassification"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecruitClassification FromString(string value)
        {
            if (value.Equals("JUCO"))
                return RecruitClassification.JUCO;

            if (value.Equals("PrepSchool"))
                return RecruitClassification.PrepSchool;

            if (value.Equals("HighSchool"))
                return RecruitClassification.HighSchool;

            throw new NotImplementedException($"Could not convert value to type RecruitClassification: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RecruitClassification"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecruitClassification? FromStringOrDefault(string value)
        {
            if (value.Equals("JUCO"))
                return RecruitClassification.JUCO;

            if (value.Equals("PrepSchool"))
                return RecruitClassification.PrepSchool;

            if (value.Equals("HighSchool"))
                return RecruitClassification.HighSchool;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecruitClassification"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(RecruitClassification value)
        {
            if (value == RecruitClassification.JUCO)
                return "JUCO";

            if (value == RecruitClassification.PrepSchool)
                return "PrepSchool";

            if (value == RecruitClassification.HighSchool)
                return "HighSchool";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecruitClassification"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RecruitClassificationJsonConverter : JsonConverter<RecruitClassification>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RecruitClassification Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RecruitClassification? result = rawValue == null
                ? null
                : RecruitClassificationValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RecruitClassification to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recruitClassification"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RecruitClassification recruitClassification, JsonSerializerOptions options)
        {
            writer.WriteStringValue(recruitClassification.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecruitClassification"/>
    /// </summary>
    public class RecruitClassificationNullableJsonConverter : JsonConverter<RecruitClassification?>
    {
        /// <summary>
        /// Returns a RecruitClassification from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RecruitClassification? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RecruitClassification? result = rawValue == null
                ? null
                : RecruitClassificationValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recruitClassification"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RecruitClassification? recruitClassification, JsonSerializerOptions options)
        {
            writer.WriteStringValue(recruitClassification?.ToString() ?? "null");
        }
    }
}
