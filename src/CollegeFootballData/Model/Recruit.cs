/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Recruit
    /// </summary>
    [DataContract(Name = "Recruit")]
    public partial class Recruit : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RecruitType
        /// </summary>
        [DataMember(Name = "recruitType", IsRequired = true, EmitDefaultValue = true)]
        public RecruitClassification RecruitType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recruit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Recruit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recruit" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="athleteId">athleteId (required).</param>
        /// <param name="recruitType">recruitType (required).</param>
        /// <param name="year">year (required).</param>
        /// <param name="ranking">ranking (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="school">school (required).</param>
        /// <param name="committedTo">committedTo (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="stars">stars (required).</param>
        /// <param name="rating">rating (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="stateProvince">stateProvince (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="hometownInfo">hometownInfo (required).</param>
        public Recruit(string id = default(string), string athleteId = default(string), RecruitClassification recruitType = default(RecruitClassification), int year = default(int), int? ranking = default(int?), string name = default(string), string school = default(string), string committedTo = default(string), string position = default(string), int? height = default(int?), int? weight = default(int?), int stars = default(int), double rating = default(double), string city = default(string), string stateProvince = default(string), string country = default(string), RecruitHometownInfo hometownInfo = default(RecruitHometownInfo))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Recruit and cannot be null");
            }
            this.Id = id;
            // to ensure "athleteId" is required (not null)
            if (athleteId == null)
            {
                throw new ArgumentNullException("athleteId is a required property for Recruit and cannot be null");
            }
            this.AthleteId = athleteId;
            this.RecruitType = recruitType;
            this.Year = year;
            // to ensure "ranking" is required (not null)
            if (ranking == null)
            {
                throw new ArgumentNullException("ranking is a required property for Recruit and cannot be null");
            }
            this.Ranking = ranking;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Recruit and cannot be null");
            }
            this.Name = name;
            // to ensure "school" is required (not null)
            if (school == null)
            {
                throw new ArgumentNullException("school is a required property for Recruit and cannot be null");
            }
            this.School = school;
            // to ensure "committedTo" is required (not null)
            if (committedTo == null)
            {
                throw new ArgumentNullException("committedTo is a required property for Recruit and cannot be null");
            }
            this.CommittedTo = committedTo;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for Recruit and cannot be null");
            }
            this.Position = position;
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new ArgumentNullException("height is a required property for Recruit and cannot be null");
            }
            this.Height = height;
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new ArgumentNullException("weight is a required property for Recruit and cannot be null");
            }
            this.Weight = weight;
            this.Stars = stars;
            this.Rating = rating;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for Recruit and cannot be null");
            }
            this.City = city;
            // to ensure "stateProvince" is required (not null)
            if (stateProvince == null)
            {
                throw new ArgumentNullException("stateProvince is a required property for Recruit and cannot be null");
            }
            this.StateProvince = stateProvince;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for Recruit and cannot be null");
            }
            this.Country = country;
            // to ensure "hometownInfo" is required (not null)
            if (hometownInfo == null)
            {
                throw new ArgumentNullException("hometownInfo is a required property for Recruit and cannot be null");
            }
            this.HometownInfo = hometownInfo;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AthleteId
        /// </summary>
        [DataMember(Name = "athleteId", IsRequired = true, EmitDefaultValue = true)]
        public string AthleteId { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Ranking
        /// </summary>
        [DataMember(Name = "ranking", IsRequired = true, EmitDefaultValue = true)]
        public int? Ranking { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name = "school", IsRequired = true, EmitDefaultValue = true)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets CommittedTo
        /// </summary>
        [DataMember(Name = "committedTo", IsRequired = true, EmitDefaultValue = true)]
        public string CommittedTo { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Stars
        /// </summary>
        [DataMember(Name = "stars", IsRequired = true, EmitDefaultValue = true)]
        public int Stars { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public double Rating { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets StateProvince
        /// </summary>
        [DataMember(Name = "stateProvince", IsRequired = true, EmitDefaultValue = true)]
        public string StateProvince { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets HometownInfo
        /// </summary>
        [DataMember(Name = "hometownInfo", IsRequired = true, EmitDefaultValue = true)]
        public RecruitHometownInfo HometownInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Recruit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AthleteId: ").Append(AthleteId).Append("\n");
            sb.Append("  RecruitType: ").Append(RecruitType).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Ranking: ").Append(Ranking).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  CommittedTo: ").Append(CommittedTo).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Stars: ").Append(Stars).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  HometownInfo: ").Append(HometownInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
