/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// PlayerSeasonPredictedPointsAddedAveragePPA
    /// </summary>
    [DataContract(Name = "PlayerSeasonPredictedPointsAdded_averagePPA")]
    public partial class PlayerSeasonPredictedPointsAddedAveragePPA : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerSeasonPredictedPointsAddedAveragePPA" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayerSeasonPredictedPointsAddedAveragePPA() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerSeasonPredictedPointsAddedAveragePPA" /> class.
        /// </summary>
        /// <param name="passingDowns">passingDowns.</param>
        /// <param name="standardDowns">standardDowns.</param>
        /// <param name="thirdDown">thirdDown.</param>
        /// <param name="secondDown">secondDown.</param>
        /// <param name="firstDown">firstDown.</param>
        /// <param name="rush">rush.</param>
        /// <param name="pass">pass.</param>
        /// <param name="all">all (required).</param>
        public PlayerSeasonPredictedPointsAddedAveragePPA(double passingDowns = default(double), double standardDowns = default(double), double thirdDown = default(double), double secondDown = default(double), double firstDown = default(double), double rush = default(double), double pass = default(double), double all = default(double))
        {
            this.All = all;
            this.PassingDowns = passingDowns;
            this.StandardDowns = standardDowns;
            this.ThirdDown = thirdDown;
            this.SecondDown = secondDown;
            this.FirstDown = firstDown;
            this.Rush = rush;
            this.Pass = pass;
        }

        /// <summary>
        /// Gets or Sets PassingDowns
        /// </summary>
        [DataMember(Name = "passingDowns", EmitDefaultValue = false)]
        public double PassingDowns { get; set; }

        /// <summary>
        /// Gets or Sets StandardDowns
        /// </summary>
        [DataMember(Name = "standardDowns", EmitDefaultValue = false)]
        public double StandardDowns { get; set; }

        /// <summary>
        /// Gets or Sets ThirdDown
        /// </summary>
        [DataMember(Name = "thirdDown", EmitDefaultValue = false)]
        public double ThirdDown { get; set; }

        /// <summary>
        /// Gets or Sets SecondDown
        /// </summary>
        [DataMember(Name = "secondDown", EmitDefaultValue = false)]
        public double SecondDown { get; set; }

        /// <summary>
        /// Gets or Sets FirstDown
        /// </summary>
        [DataMember(Name = "firstDown", EmitDefaultValue = false)]
        public double FirstDown { get; set; }

        /// <summary>
        /// Gets or Sets Rush
        /// </summary>
        [DataMember(Name = "rush", EmitDefaultValue = false)]
        public double Rush { get; set; }

        /// <summary>
        /// Gets or Sets Pass
        /// </summary>
        [DataMember(Name = "pass", EmitDefaultValue = false)]
        public double Pass { get; set; }

        /// <summary>
        /// Gets or Sets All
        /// </summary>
        [DataMember(Name = "all", IsRequired = true, EmitDefaultValue = true)]
        public double All { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerSeasonPredictedPointsAddedAveragePPA {\n");
            sb.Append("  PassingDowns: ").Append(PassingDowns).Append("\n");
            sb.Append("  StandardDowns: ").Append(StandardDowns).Append("\n");
            sb.Append("  ThirdDown: ").Append(ThirdDown).Append("\n");
            sb.Append("  SecondDown: ").Append(SecondDown).Append("\n");
            sb.Append("  FirstDown: ").Append(FirstDown).Append("\n");
            sb.Append("  Rush: ").Append(Rush).Append("\n");
            sb.Append("  Pass: ").Append(Pass).Append("\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
