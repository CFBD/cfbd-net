/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// AdvancedSeasonStatOffenseHavoc
    /// </summary>
    [DataContract(Name = "AdvancedSeasonStat_offense_havoc")]
    public partial class AdvancedSeasonStatOffenseHavoc : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedSeasonStatOffenseHavoc" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdvancedSeasonStatOffenseHavoc() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedSeasonStatOffenseHavoc" /> class.
        /// </summary>
        /// <param name="db">db (required).</param>
        /// <param name="frontSeven">frontSeven (required).</param>
        /// <param name="total">total (required).</param>
        public AdvancedSeasonStatOffenseHavoc(double? db = default(double?), double? frontSeven = default(double?), double? total = default(double?))
        {
            // to ensure "db" is required (not null)
            if (db == null)
            {
                throw new ArgumentNullException("db is a required property for AdvancedSeasonStatOffenseHavoc and cannot be null");
            }
            this.Db = db;
            // to ensure "frontSeven" is required (not null)
            if (frontSeven == null)
            {
                throw new ArgumentNullException("frontSeven is a required property for AdvancedSeasonStatOffenseHavoc and cannot be null");
            }
            this.FrontSeven = frontSeven;
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new ArgumentNullException("total is a required property for AdvancedSeasonStatOffenseHavoc and cannot be null");
            }
            this.Total = total;
        }

        /// <summary>
        /// Gets or Sets Db
        /// </summary>
        [DataMember(Name = "db", IsRequired = true, EmitDefaultValue = true)]
        public double? Db { get; set; }

        /// <summary>
        /// Gets or Sets FrontSeven
        /// </summary>
        [DataMember(Name = "frontSeven", IsRequired = true, EmitDefaultValue = true)]
        public double? FrontSeven { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = true)]
        public double? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdvancedSeasonStatOffenseHavoc {\n");
            sb.Append("  Db: ").Append(Db).Append("\n");
            sb.Append("  FrontSeven: ").Append(FrontSeven).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
