// <auto-generated>
/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.7.0
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CollegeFootballData.Client;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// TeamStatStatValue
    /// </summary>
    public partial class TeamStatStatValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamStatStatValue" /> class.
        /// </summary>
        /// <param name="string"></param>
        /// <param name="double"></param>
        internal TeamStatStatValue(Option<string?> @string, Option<double?> @double)
        {
            StringOption = @string;
            DoubleOption = @double;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of String
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StringOption { get; private set; }

        /// <summary>
        /// Gets or Sets String
        /// </summary>
        public string? String { get { return this.StringOption; } set { this.StringOption = new(value); } }

        /// <summary>
        /// Used to track the state of Double
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> DoubleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Double
        /// </summary>
        public double? Double { get { return this.DoubleOption; } set { this.DoubleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamStatStatValue {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TeamStatStatValue" />
    /// </summary>
    public class TeamStatStatValueJsonConverter : JsonConverter<TeamStatStatValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="TeamStatStatValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TeamStatStatValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string? varString = default;
            double? varDouble = default;

            Utf8JsonReader utf8JsonReaderAnyOf = utf8JsonReader;
            while (utf8JsonReaderAnyOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderAnyOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderAnyOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderAnyOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderAnyOf.CurrentDepth)
                    break;

                if (utf8JsonReaderAnyOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderAnyOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderString = utf8JsonReader;
                    ClientUtils.TryDeserialize<string?>(ref utf8JsonReaderString, jsonSerializerOptions, out varString);

                    Utf8JsonReader utf8JsonReaderDouble = utf8JsonReader;
                    ClientUtils.TryDeserialize<double?>(ref utf8JsonReaderDouble, jsonSerializerOptions, out varDouble);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            Option<string?> varStringParsedValue = varString == null
                ? default
                : new Option<string?>(varString);
            Option<double?> varDoubleParsedValue = varDouble == null
                ? default
                : new Option<double?>(varDouble);

            return new TeamStatStatValue(varStringParsedValue, varDoubleParsedValue);
        }

        /// <summary>
        /// Serializes a <see cref="TeamStatStatValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="teamStatStatValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TeamStatStatValue teamStatStatValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (teamStatStatValue.StringOption.IsSet && teamStatStatValue.StringOption.Value != null)
                writer.WriteString("statValue", teamStatStatValue.StringOption.Value);

            if (teamStatStatValue.DoubleOption.IsSet && teamStatStatValue.DoubleOption.Value != null)
                writer.WriteNumber("statValue", teamStatStatValue.DoubleOption.Value.Value);

            WriteProperties(writer, teamStatStatValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TeamStatStatValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="teamStatStatValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TeamStatStatValue teamStatStatValue, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
