/*
 * College Football Data API
 *
 * This is an API for query various college football datasets and analytics. API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 5.6.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CollegeFootballData.Client.OpenAPIDateConverter;

namespace CollegeFootballData.Model
{
    /// <summary>
    /// Venue
    /// </summary>
    [DataContract(Name = "Venue")]
    public partial class Venue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Venue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Venue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Venue" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="zip">zip (required).</param>
        /// <param name="countryCode">countryCode (required).</param>
        /// <param name="timezone">timezone (required).</param>
        /// <param name="latitude">latitude (required).</param>
        /// <param name="longitude">longitude (required).</param>
        /// <param name="elevation">elevation (required).</param>
        /// <param name="capacity">capacity (required).</param>
        /// <param name="constructionYear">constructionYear (required).</param>
        /// <param name="grass">grass.</param>
        /// <param name="dome">dome.</param>
        public Venue(int? id = default(int?), string name = default(string), string city = default(string), string state = default(string), string zip = default(string), string countryCode = default(string), string timezone = default(string), double? latitude = default(double?), double? longitude = default(double?), string elevation = default(string), int? capacity = default(int?), int? constructionYear = default(int?), bool? grass = default(bool?), bool? dome = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Venue and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Venue and cannot be null");
            }
            this.Name = name;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for Venue and cannot be null");
            }
            this.City = city;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for Venue and cannot be null");
            }
            this.State = state;
            // to ensure "zip" is required (not null)
            if (zip == null)
            {
                throw new ArgumentNullException("zip is a required property for Venue and cannot be null");
            }
            this.Zip = zip;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for Venue and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new ArgumentNullException("timezone is a required property for Venue and cannot be null");
            }
            this.Timezone = timezone;
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new ArgumentNullException("latitude is a required property for Venue and cannot be null");
            }
            this.Latitude = latitude;
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new ArgumentNullException("longitude is a required property for Venue and cannot be null");
            }
            this.Longitude = longitude;
            // to ensure "elevation" is required (not null)
            if (elevation == null)
            {
                throw new ArgumentNullException("elevation is a required property for Venue and cannot be null");
            }
            this.Elevation = elevation;
            // to ensure "capacity" is required (not null)
            if (capacity == null)
            {
                throw new ArgumentNullException("capacity is a required property for Venue and cannot be null");
            }
            this.Capacity = capacity;
            // to ensure "constructionYear" is required (not null)
            if (constructionYear == null)
            {
                throw new ArgumentNullException("constructionYear is a required property for Venue and cannot be null");
            }
            this.ConstructionYear = constructionYear;
            this.Grass = grass;
            this.Dome = dome;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name = "zip", IsRequired = true, EmitDefaultValue = true)]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", IsRequired = true, EmitDefaultValue = true)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", IsRequired = true, EmitDefaultValue = true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", IsRequired = true, EmitDefaultValue = true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Elevation
        /// </summary>
        [DataMember(Name = "elevation", IsRequired = true, EmitDefaultValue = true)]
        public string Elevation { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name = "capacity", IsRequired = true, EmitDefaultValue = true)]
        public int? Capacity { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionYear
        /// </summary>
        [DataMember(Name = "constructionYear", IsRequired = true, EmitDefaultValue = true)]
        public int? ConstructionYear { get; set; }

        /// <summary>
        /// Gets or Sets Grass
        /// </summary>
        [DataMember(Name = "grass", EmitDefaultValue = true)]
        public bool? Grass { get; set; }

        /// <summary>
        /// Gets or Sets Dome
        /// </summary>
        [DataMember(Name = "dome", EmitDefaultValue = true)]
        public bool? Dome { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Venue {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Elevation: ").Append(Elevation).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  ConstructionYear: ").Append(ConstructionYear).Append("\n");
            sb.Append("  Grass: ").Append(Grass).Append("\n");
            sb.Append("  Dome: ").Append(Dome).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
